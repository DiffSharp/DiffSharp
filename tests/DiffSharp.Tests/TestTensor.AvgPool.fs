// Copyright (c) 2016-     University of Oxford (Atilim Gunes Baydin <gunes@robots.ox.ac.uk>)
// and other contributors, see LICENSE in root of repository.
//
// BSD 2-Clause License. See LICENSE in root of repository.

namespace Tests

open NUnit.Framework
open DiffSharp

[<TestFixture>]
type TestTensorAvgPool () =

    [<Test>]
    member _.TestTensorAvgPool1D () =
        for combo in Combos.Float32 do
            let t = combo.tensor([[[-2.1704, -1.1558,  2.5995,  1.3858, -1.3157, -0.3179,  0.9593,  -2.1432,  0.7169, -1.7999],
                                   [ 0.4564, -0.2262,  0.3495,  0.4587, -0.3858,  0.2349,  0.2978,  0.6288,  1.1539,  0.2121]],

                                  [[ 0.6654,  0.7151,  0.9980,  0.1321, -2.0009, -1.1897,  1.0608,  -1.8059, -0.2344,  1.6387],
                                   [ 1.1872, -2.2679, -0.0297, -0.2067, -1.5622, -0.3916,  0.6039,  -1.1469,  0.4560,  1.2069]]])

            let tk3 = t.avgpool1d(kernelSize=3)
            let tk3Correct =
                combo.tensor([[[-0.2422, -0.0826, -0.1557],
                               [ 0.1932,  0.1026,  0.6935]],

                              [[ 0.7928, -1.0195, -0.3265],
                               [-0.3701, -0.7202, -0.0290]]])
            Assert.True(tk3Correct.allclose(tk3,0.01))

            let tk3p1 = t.avgpool1d(3, padding=1)
            let tk3p1Correct = combo.tensor([[[-1.1087,  0.8899, -0.5006, -0.3610],
                                              [ 0.0767,  0.1408,  0.3872,  0.4553]],

                                             [[ 0.4602, -0.2903, -0.6449,  0.4681],
                                              [-0.3602, -0.5995, -0.3115,  0.5543]]])
            Assert.True(tk3p1Correct.allclose(tk3p1,0.01))

            let tk3s2 = t.avgpool1d(3, stride=2)
            let tk3s2Correct = combo.tensor([[[-0.2422,  0.8899, -0.2248, -0.1557],
                                              [ 0.1932,  0.1408,  0.0490,  0.6935]],

                                             [[ 0.7928, -0.2903, -0.7099, -0.3265],
                                              [-0.3701, -0.5995, -0.4500, -0.0290]]])
            Assert.True(tk3s2Correct.allclose(tk3s2,0.01))

            let tk4s3p2 = t.avgpool1d(4, stride=3, padding=2)
            let tk4s3p2Correct = combo.tensor([[[-0.8316,  0.3784, -0.7044, -0.8066],
                                                [ 0.0576,  0.0491,  0.1939,  0.4987]],

                                               [[ 0.3451, -0.0389, -0.9839, -0.1004],
                                                [-0.2702, -1.0166, -0.6242,  0.1290]]])
            Assert.True(tk4s3p2Correct.allclose(tk4s3p2,0.01))

        for combo in Combos.IntegralAndBool do 
            let x = combo.zeros([1;4;4])
            isInvalidOp(fun () -> x.avgpool1d(3))

    [<Test>]
    member _.TestTensorAvgPool2D () =
        for combo in Combos.Float32 do
            let t = combo.tensor([[[[ 0.7372,  0.7090,  0.9216,  0.3363,  1.0141, -0.7642,  0.3801, -0.9568],
                                      [-0.3520, -1.2336,  1.8489,  0.9929, -0.8138,  0.0978, -1.3206, -1.5434],
                                      [ 0.6883, -0.2346,  0.1735,  0.6695, -1.9122,  1.1338, -0.1248,  0.2164],
                                      [-1.1349,  0.3008, -0.1635, -1.0362, -0.6487, -0.8422, -0.4334,  1.0604],
                                      [-2.1562, -0.1079,  0.5744, -0.7275,  1.0254, -0.0508, -0.0525, -0.0746],
                                      [-0.7494,  0.6819, -1.7327, -0.4838, -0.6120,  1.6331,  0.1797, -0.6068],
                                      [ 0.6400,  0.1389,  0.3033,  0.3195,  0.9934,  1.2455, -1.0953,  0.9922],
                                      [ 0.2375,  0.6003, -1.1614,  1.0146,  0.2100, -1.0145, -0.1933,  1.1415]],

                                     [[-0.0819,  0.2091,  0.4351,  1.7527, -1.1970,  2.1048,  1.0200, -0.5153],
                                      [ 1.0867, -1.8738, -0.2754, -0.5089,  0.8850, -0.4751, -0.7820,  1.4476],
                                      [-0.9072,  0.9977, -0.9106, -0.3171, -1.2444,  0.7102,  0.5656,  1.2660],
                                      [ 0.1986, -0.4967,  0.2384, -0.6551,  1.0156,  0.0520, -0.1964,  1.1367],
                                      [ 0.8948,  2.2070,  0.9938,  0.5311, -1.0674,  0.3894,  0.4192, -0.6235],
                                      [ 2.7646, -0.6509,  0.4669, -1.8774, -0.6341,  0.5113,  1.2398,  2.5090],
                                      [ 1.0722,  0.8162, -2.3271,  1.3826,  1.3832,  0.6205, -0.9138, -0.8237],
                                      [-0.0688, -1.6786,  0.1672, -0.7255, -0.1228, -0.1603, -2.1906, -2.6372]]],


                                    [[[-1.0461,  0.4063,  0.2085, -0.7598, -1.3893, -0.8866,  1.0594, -0.6184],
                                      [ 2.1120, -0.6475, -0.3964,  0.0378,  0.0138, -0.1672,  0.9265, -1.7734],
                                      [-0.2313,  0.6284, -0.0508, -0.1014, -0.5059,  0.8666, -0.7010, -0.5073],
                                      [ 0.1709,  0.2466,  0.1781, -1.6740, -0.0251, -1.4144, -2.1012,  0.3922],
                                      [ 0.9141,  0.6582, -0.0826, -0.7104,  1.7133,  1.2406,  1.1415, -0.6222],
                                      [-2.1525, -0.2996, -1.3787,  0.0336, -1.4643,  0.6534,  0.3996,  0.3145],
                                      [-0.3298,  0.3855, -0.5100,  1.2770,  0.5306, -0.6604, -0.0489,  0.0609],
                                      [-0.1552, -1.1218, -0.8435,  0.2365,  1.4428,  0.4234, -1.1083, -1.3874]],

                                     [[ 0.0511,  0.1216, -1.0103, -1.2529,  1.7200, -0.0225,  0.7446, -0.8076],
                                      [ 0.2543,  1.4250,  0.7869,  0.0526, -2.1598,  1.8228, -0.4628,  1.4234],
                                      [ 0.5492,  0.8668,  0.2120,  0.6599, -1.0934, -1.3726,  0.4788, -0.1171],
                                      [ 0.5121,  1.2607, -0.4565,  0.5448, -2.5025, -0.5503, -1.3373,  0.1711],
                                      [-0.3939, -0.6382, -0.0899, -1.4706,  0.4580,  0.3304,  1.8958,  0.1178],
                                      [ 0.1109,  0.2468,  0.3485, -0.0960, -0.0432, -0.3026, -1.9750,  0.4057],
                                      [-1.1117, -0.3422,  1.2130, -1.1206,  0.9506, -0.7723,  0.3162, -0.5487],
                                      [ 0.6304, -0.9149,  0.6075, -0.5371,  1.5875, -0.2979, -0.5832, -3.0311]]]])

            // Python: tk3 = torch.nn.functional.avg_pool2d(t, 3)
            let tk3 = t.avgpool2d(kernelSize=3)
            let tk3Correct =
                combo.tensor([[[[ 0.3620,  0.0838],
                                [-0.4986, -0.1936]],

                               [[-0.1467,  0.1900],
                                [ 0.7352, -0.1927]]],


                              [[[ 0.1092, -0.3213],
                                [-0.1939, -0.1830]],

                               [[ 0.3618, -0.1829],
                                [ 0.1001, -0.4036]]]])
            Assert.True(tk3Correct.allclose(tk3,0.01))

            let tk3p1 = t.avgpool2d(3, padding=1)
            let tk3p1Correct = combo.tensor([[[[-0.0155,  0.4778, -0.4563],
                                               [-0.2938, -0.2273,  0.0925],
                                               [ 0.1721, -0.1277,  0.2536]],

                                              [[-0.0733,  0.1213,  0.3111],
                                               [ 0.3216, -0.1573,  0.4132],
                                               [ 0.2505, -0.2541, -0.2050]]],


                                             [[[ 0.0916, -0.2539, -0.1622],
                                               [ 0.2652, -0.1399, -0.1895],
                                               [-0.4082, -0.0751, -0.1504]],

                                              [[ 0.2058, -0.2071,  0.2998],
                                               [ 0.2396, -0.4154, -0.0426],
                                               [-0.1534,  0.3234, -0.7543]]]])
            Assert.True(tk3p1Correct.allclose(tk3p1,0.01))

            let tk3s2 = t.avgpool2d(3, stride=2)
            let tk3s2Correct = combo.tensor([[[[ 0.3620,  0.3590, -0.2566],
                                               [-0.2289, -0.2273, -0.2117],
                                               [-0.2675, -0.0378,  0.3629]],

                                              [[-0.1467, -0.1534,  0.1763],
                                               [ 0.3573, -0.1573,  0.0715],
                                               [ 0.6931, -0.1276,  0.2165]]],


                                             [[[ 0.1092, -0.3271, -0.0871],
                                               [ 0.2702, -0.1399,  0.0238],
                                               [-0.3106, -0.0657,  0.3895]],

                                              [[ 0.3618, -0.2317, -0.0383],
                                               [ 0.2025, -0.4154, -0.4103],
                                               [-0.0730,  0.0166,  0.0953]]]])
            Assert.True(tk3s2Correct.allclose(tk3s2,0.01))

            let tk4s3p2 = t.avgpool2d(4, stride=3, padding=2)
            let tk4s3p2Correct = combo.tensor([[[[-0.0087,  0.2360, -0.2442],
                                                  [-0.2644, -0.0808, -0.2677],
                                                  [-0.0447,  0.0648,  0.2326]],

                                                 [[-0.0412, -0.0358,  0.1555],
                                                  [ 0.1317, -0.0301,  0.2187],
                                                  [ 0.3348, -0.0710, -0.1313]]],


                                                [[[ 0.0515, -0.1579, -0.1772],
                                                  [ 0.2407, -0.0449, -0.0952],
                                                  [-0.1313, -0.0083,  0.1643]],

                                                 [[ 0.1157, -0.0198,  0.1411],
                                                  [ 0.2398, -0.1340, -0.1811],
                                                  [-0.1508,  0.0100, -0.0932]]]])
            Assert.True(tk4s3p2Correct.allclose(tk4s3p2,0.01))

        for combo in Combos.IntegralAndBool do 
            let x = combo.zeros([1;4;4])
            isInvalidOp(fun () -> x.avgpool2d(3))

    [<Test>]
    member _.TestTensorAvgPool3D () =
        for combo in Combos.Float32 do
            let t = combo.tensor([[[[ 0.4633,  0.9173,  0.4568, -1.7660, -0.1077],
                                       [-2.1112,  1.5542,  0.5720, -1.0952, -1.8144],
                                       [ 0.3505, -0.9843, -2.5655, -0.9835,  1.2303],
                                       [ 0.8156,  1.5415,  1.3066, -1.1820,  0.2060],
                                       [ 0.0684,  1.5936,  0.2956, -0.5176, -1.6960]],

                                      [[-1.7281, -0.7697, -2.2310,  0.3580,  0.6299],
                                       [ 0.8558, -0.6180, -1.6077, -0.6779,  1.2910],
                                       [ 0.1885, -0.7006, -0.1863, -1.6729, -0.5761],
                                       [ 0.1940, -0.0399,  0.9329,  1.0687,  0.0955],
                                       [-1.0189,  0.4046,  1.1762,  0.3842,  0.6831]],

                                      [[ 0.2996,  0.5738,  0.0369,  0.2835, -0.2363],
                                       [ 0.6847, -0.4949, -0.3974,  0.6808, -1.2942],
                                       [ 1.0910, -0.0594, -0.0037, -0.3355, -1.5056],
                                       [-0.0965,  1.1358,  1.2851, -1.7333, -1.1705],
                                       [ 0.0966, -1.2780,  1.2939,  1.3469, -0.2603]],

                                      [[-0.5270,  1.1442,  0.1259, -1.2813,  0.3536],
                                       [ 0.1579,  0.0828,  1.3531, -0.9110, -0.8747],
                                       [ 0.2473, -0.1507, -0.4880,  0.4575,  1.1186],
                                       [ 2.0900,  1.0479, -0.7209, -1.6928,  1.8761],
                                       [ 2.2015, -0.5097,  0.7364, -1.5177,  0.9212]],

                                      [[ 1.0358,  1.6584, -1.9654, -1.3971,  1.5641],
                                       [ 0.4032,  0.7737,  0.9351, -0.5245,  0.0783],
                                       [-1.2932, -0.9885, -1.1850, -0.7403,  0.1739],
                                       [-0.5471,  0.5017, -1.0571,  1.7574, -0.0911],
                                       [ 0.6944, -1.2772,  0.7473, -1.0983,  1.1462]]],


                                     [[[-1.2563,  0.0688,  1.0405, -0.2582,  0.7333],
                                       [ 2.0711, -0.1815,  0.8876, -0.2907,  1.1195],
                                       [-0.3912,  0.3624,  1.0576, -0.4748, -1.4021],
                                       [ 1.2176, -0.6160, -0.3471,  1.1689,  0.5677],
                                       [-0.0639,  0.3765, -0.2614,  1.8267,  0.0315]],

                                      [[ 1.2927,  1.0709, -0.8808,  0.8106, -0.5315],
                                       [ 0.7614, -0.3935,  1.2451, -0.0598, -0.5887],
                                       [-0.4089, -0.8598,  0.2478,  0.1282, -0.2745],
                                       [-0.4139, -1.2905, -0.2625, -2.0453,  1.8941],
                                       [-0.2400, -1.2830, -0.3503, -0.8536, -0.5927]],

                                      [[ 0.8200,  1.8860, -0.5216, -0.9590, -0.9760],
                                       [-1.5796,  2.2379, -0.5714, -1.5612,  1.4035],
                                       [-0.6434, -1.2257,  0.1408,  0.3781, -2.2344],
                                       [ 0.4963,  0.2431,  0.6835,  0.0047,  1.3374],
                                       [-1.5899,  2.5382,  0.9503,  1.9080,  1.8315]],

                                      [[ 0.5853,  1.9343, -0.7472,  2.1774, -2.1895],
                                       [-0.6187, -0.2870,  1.2485,  2.4069, -0.2632],
                                       [-1.6047, -0.3379,  0.5372,  1.7098,  1.6220],
                                       [ 0.5255,  0.2564, -1.8615,  1.5519, -0.5655],
                                       [-0.9452, -1.1828, -1.8192,  1.1349,  0.9806]],

                                      [[-1.8198,  0.5455,  1.1761,  1.3070, -0.4654],
                                       [ 1.2673,  0.2608,  0.8385, -1.0407, -0.6288],
                                       [-0.3860,  1.3343,  1.3084,  0.5794,  0.4639],
                                       [ 0.4750, -0.9006, -1.5002,  0.8689, -0.0379],
                                       [ 0.2891,  0.0195, -0.0503, -0.3235,  1.5407]]]]).unsqueeze(0)

            // Python: tk3 = torch.nn.functional.avg_pool3d(t, 2)
            let tk3 = t.avgpool3d(kernelSize=2)
            let tk3Correct =
                combo.tensor([[[[-0.1796, -0.7489],
                                   [ 0.1707, -0.4103]],

                                  [[ 0.2401, -0.0137],
                                   [ 0.6632, -0.4040]]],


                                 [[[ 0.4292,  0.3118],
                                   [-0.3000, -0.0659]],

                                  [[ 0.6223,  0.1840],
                                   [-0.2863,  0.3931]]]]).unsqueeze(0)
            Assert.True(tk3Correct.allclose(tk3,0.01))

            let tk3p1 = t.avgpool3d(3, padding=1)
            let tk3p1Correct = combo.tensor([[[[-0.0532, -0.2219],
                                                   [ 0.0894, -0.0741]],

                                                  [[ 0.2145, -0.1285],
                                                   [ 0.1076, -0.0274]]],


                                                 [[[ 0.1272,  0.1195],
                                                   [-0.1337,  0.0022]],

                                                  [[ 0.1938,  0.0235],
                                                   [-0.0977,  0.4126]]]]).unsqueeze(0)
            Assert.True(tk3p1Correct.allclose(tk3p1,0.05))

            let tk3s2 = t.avgpool3d(3, stride=2)
            let tk3s2Correct = combo.tensor([[[[-0.2375, -0.5007],
                                                   [ 0.2532, -0.1142]],

                                                  [[ 0.1130, -0.2214],
                                                   [ 0.1301, -0.0274]]],


                                                 [[[ 0.2325, -0.0886],
                                                   [-0.0716,  0.1873]],

                                                  [[ 0.2140,  0.1903],
                                                   [-0.1574,  0.4126]]]]).unsqueeze(0)
            Assert.True(tk3s2Correct.allclose(tk3s2,0.01))

            // Python: tk3 = torch.nn.functional.avg_pool3d(t, 4, stride=3, padding=2)
            let tk4s3p2 = t.avgpool3d(4, stride=3, padding=2)
            let tk4s3p2Correct = combo.tensor([[[[-0.0224, -0.0767],
                                                   [ 0.0327, -0.0403]],

                                                  [[ 0.0552, -0.0525],
                                                   [ 0.0590, -0.0462]]],


                                                 [[[ 0.0536,  0.0592],
                                                   [-0.0211, -0.0237]],

                                                  [[ 0.1244,  0.1232],
                                                   [-0.0857,  0.1654]]]]).unsqueeze(0)
            Assert.True(tk4s3p2Correct.allclose(tk4s3p2,0.01))

        for combo in Combos.IntegralAndBool do 
            let x = combo.zeros([1;4;4])
            isInvalidOp(fun () -> x.avgpool3d(3))

    [<Test>]
    member _.TestTensorAvgPoolReverse1D () =
        for combo in Combos.Float32 do
            let t = combo.ones([2;2;6])

            let tk3 = t.avgpool1d(kernelSize=3)
            let tk3Correct = combo.ones([2;2;2])
            printfn $"tk3Correct = {tk3Correct}"
            printfn $"tk3        = {tk3}"
            Assert.True(tk3Correct.allclose(tk3,0.01))

            let tk3r = tk3.avgpoolReverse1d(t, 3I)
            let tk3rCorrect = combo.full([2;2;6], 1.0/3.0)
            printfn $"tk3r        = {tk3r}"
            printfn $"tk3rCorrect        = {tk3rCorrect}"
            Assert.True(tk3rCorrect.allclose(tk3r,0.01))

    [<Test>]
    member _.TestTensorAvgPoolReverse2D () =
        for combo in Combos.Float32 do
            let t = combo.ones([2;2;6;6])

            let tk3 = t.avgpool2d(kernelSize=3)
            let tk3Correct = combo.ones([2;2;2;2])
            printfn $"tk3Correct = {tk3Correct}"
            printfn $"tk3        = {tk3}"
            Assert.True(tk3Correct.allclose(tk3,0.01))

            let tk3r = tk3.avgpoolReverse2d(t, 3I)
            let tk3rCorrect = combo.full([2;2;6;6], 1.0/9.0)
            printfn $"tk3r        = {tk3r}"
            printfn $"tk3rCorrect        = {tk3rCorrect}"
            Assert.True(tk3rCorrect.allclose(tk3r,0.01))

    [<Test>]
    member _.TestTensorAvgPoolReverse3D () =
        for combo in Combos.Float32 do
            let t = combo.ones([2;2;6;6;6])

            let tk3 = t.avgpool3d(kernelSize=3)
            let tk3Correct = combo.ones([2;2;2;2;2])
            printfn $"tk3Correct = {tk3Correct}"
            printfn $"tk3        = {tk3}"
            Assert.True(tk3Correct.allclose(tk3,0.01))

            let tk3r = tk3.avgpoolReverse3d(t, 3I)
            let tk3rCorrect = combo.full([2;2;6;6;6], 1.0/27.0)
            printfn $"tk3r        = {tk3r}"
            printfn $"tk3rCorrect        = {tk3rCorrect}"
            Assert.True(tk3rCorrect.allclose(tk3r,0.01))
