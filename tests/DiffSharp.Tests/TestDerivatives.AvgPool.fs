// Copyright (c) 2016-     University of Oxford (Atilim Gunes Baydin <gunes@robots.ox.ac.uk>)
// and other contributors, see LICENSE in root of repository.
//
// BSD 2-Clause License. See LICENSE in root of repository.

namespace Tests

open NUnit.Framework
open DiffSharp
open DiffSharp.Util

#nowarn "0058"

[<TestFixture>]
type TestDerivativesAvgPool () =

    [<Test>]
    member _.TestDerivativeAvgPool1D () =
        for combo in Combos.FloatingPointExcept16s do
            let fwdx = combo.tensor([[[-2.1704, -1.1558,  2.5995,  1.3858, -1.3157, -0.3179,  0.9593,  -2.1432,  0.7169, -1.7999],
                                     [ 0.4564, -0.2262,  0.3495,  0.4587, -0.3858,  0.2349,  0.2978,  0.6288,  1.1539,  0.2121]],

                                    [[ 0.6654,  0.7151,  0.9980,  0.1321, -2.0009, -1.1897,  1.0608,  -1.8059, -0.2344,  1.6387],
                                     [ 1.1872, -2.2679, -0.0297, -0.2067, -1.5622, -0.3916,  0.6039,  -1.1469,  0.4560,  1.2069]]])
            let fwdx = fwdx.forwardDiff(combo.tensor([[[-0.3247,  1.0735, -1.7455,  0.8657, -0.5433,  1.7256,  0.7251, -0.3657, -0.8445,  1.6669],
                                                         [ 0.7586, -0.1351, -1.4672, -0.7769, -1.1811,  0.2663,  0.0386,  0.7750,  1.8680,  0.8252]],

                                                        [[-0.2242,  1.1212,  0.4791,  0.4936, -0.9529,  0.1540,  0.4039, -0.0324, -2.2168, -1.6637],
                                                         [ 1.5662,  0.2435, -1.0502, -0.2772,  0.8112, -0.4306, -0.2975,  0.4397,  0.4384,  1.4232]]]))
            let fwdz = fwdx.avgpool1d(3)
            let fwdzCorrect = combo.tensor([[[-0.242233, -0.082600, -0.155667],
                                             [0.193233, 0.102600, 0.693500]],
       
                                            [[0.792833, -1.019500, -0.326500],
                                             [-0.370133, -0.720167, -0.029000]]])

            let fwdzd = fwdz.derivative
            let fwdzdCorrect = combo.tensor([[[-0.332233, 0.682667, -0.161700],
                                              [-0.281233, -0.563900, 0.893867]],
       
                                             [[0.458700, -0.101767, -0.615100],
                                              [0.253167, 0.034467, 0.193533]]])

            Assert.True(fwdz.allclose(fwdzCorrect, 0.01))
            Assert.True(fwdzd.allclose(fwdzdCorrect, 0.01))
            let revx = combo.tensor([[[-2.1704, -1.1558,  2.5995,  1.3858, -1.3157, -0.3179,  0.9593,  -2.1432,  0.7169, -1.7999],
                                     [ 0.4564, -0.2262,  0.3495,  0.4587, -0.3858,  0.2349,  0.2978,  0.6288,  1.1539,  0.2121]],

                                    [[ 0.6654,  0.7151,  0.9980,  0.1321, -2.0009, -1.1897,  1.0608,  -1.8059, -0.2344,  1.6387],
                                     [ 1.1872, -2.2679, -0.0297, -0.2067, -1.5622, -0.3916,  0.6039,  -1.1469,  0.4560,  1.2069]]]).reverseDiff()

            let revz = revx.avgpool1d(3)
            let revzCorrect = combo.tensor([[[-0.2422, -0.0826, -0.1557],
                                             [ 0.1932,  0.1026,  0.6935]],

                                            [[ 0.7928, -1.0195, -0.3265],
                                             [-0.3701, -0.7202, -0.0290]]])
            revz.reverse(combo.tensor([[[ 0.5382,  0.0542,  1.2613],
                                         [ 0.1226,  1.9195,  0.2829]],

                                        [[-0.3677, -0.3066,  0.5523],
                                         [-0.3306,  1.3332,  0.8371]]]))
            let revxd = revx.derivative
            let revxdCorrect = combo.tensor([[[ 0.1794,  0.1794,  0.1794,  0.0181,  0.0181,  0.0181,  0.4204,
                                               0.4204,  0.4204,  0.0000],
                                             [ 0.0409,  0.0409,  0.0409,  0.6398,  0.6398,  0.6398,  0.0943,
                                               0.0943,  0.0943,  0.0000]],

                                            [[-0.1226, -0.1226, -0.1226, -0.1022, -0.1022, -0.1022,  0.1841,
                                               0.1841,  0.1841,  0.0000],
                                             [-0.1102, -0.1102, -0.1102,  0.4444,  0.4444,  0.4444,  0.2790,
                                               0.2790,  0.2790,  0.0000]]])

            Assert.True(revz.allclose(revzCorrect, 0.01))
            Assert.True(revxd.allclose(revxdCorrect, 0.01))

    [<Test>]
    member _.TestDerivativeAvgPool2D () =
        for combo in Combos.FloatingPointExcept16s do
            let fwdx = combo.tensor([[[[ 0.7372,  0.7090,  0.9216,  0.3363,  1.0141, -0.7642,  0.3801, -0.9568],
                                         [-0.3520, -1.2336,  1.8489,  0.9929, -0.8138,  0.0978, -1.3206, -1.5434],
                                         [ 0.6883, -0.2346,  0.1735,  0.6695, -1.9122,  1.1338, -0.1248,  0.2164],
                                         [-1.1349,  0.3008, -0.1635, -1.0362, -0.6487, -0.8422, -0.4334,  1.0604],
                                         [-2.1562, -0.1079,  0.5744, -0.7275,  1.0254, -0.0508, -0.0525, -0.0746],
                                         [-0.7494,  0.6819, -1.7327, -0.4838, -0.6120,  1.6331,  0.1797, -0.6068],
                                         [ 0.6400,  0.1389,  0.3033,  0.3195,  0.9934,  1.2455, -1.0953,  0.9922],
                                         [ 0.2375,  0.6003, -1.1614,  1.0146,  0.2100, -1.0145, -0.1933,  1.1415]],
                           
                                        [[-0.0819,  0.2091,  0.4351,  1.7527, -1.1970,  2.1048,  1.0200, -0.5153],
                                         [ 1.0867, -1.8738, -0.2754, -0.5089,  0.8850, -0.4751, -0.7820,  1.4476],
                                         [-0.9072,  0.9977, -0.9106, -0.3171, -1.2444,  0.7102,  0.5656,  1.2660],
                                         [ 0.1986, -0.4967,  0.2384, -0.6551,  1.0156,  0.0520, -0.1964,  1.1367],
                                         [ 0.8948,  2.2070,  0.9938,  0.5311, -1.0674,  0.3894,  0.4192, -0.6235],
                                         [ 2.7646, -0.6509,  0.4669, -1.8774, -0.6341,  0.5113,  1.2398,  2.5090],
                                         [ 1.0722,  0.8162, -2.3271,  1.3826,  1.3832,  0.6205, -0.9138, -0.8237],
                                         [-0.0688, -1.6786,  0.1672, -0.7255, -0.1228, -0.1603, -2.1906, -2.6372]]],
                           
                           
                                       [[[-1.0461,  0.4063,  0.2085, -0.7598, -1.3893, -0.8866,  1.0594, -0.6184],
                                         [ 2.1120, -0.6475, -0.3964,  0.0378,  0.0138, -0.1672,  0.9265, -1.7734],
                                         [-0.2313,  0.6284, -0.0508, -0.1014, -0.5059,  0.8666, -0.7010, -0.5073],
                                         [ 0.1709,  0.2466,  0.1781, -1.6740, -0.0251, -1.4144, -2.1012,  0.3922],
                                         [ 0.9141,  0.6582, -0.0826, -0.7104,  1.7133,  1.2406,  1.1415, -0.6222],
                                         [-2.1525, -0.2996, -1.3787,  0.0336, -1.4643,  0.6534,  0.3996,  0.3145],
                                         [-0.3298,  0.3855, -0.5100,  1.2770,  0.5306, -0.6604, -0.0489,  0.0609],
                                         [-0.1552, -1.1218, -0.8435,  0.2365,  1.4428,  0.4234, -1.1083, -1.3874]],
                           
                                        [[ 0.0511,  0.1216, -1.0103, -1.2529,  1.7200, -0.0225,  0.7446, -0.8076],
                                         [ 0.2543,  1.4250,  0.7869,  0.0526, -2.1598,  1.8228, -0.4628,  1.4234],
                                         [ 0.5492,  0.8668,  0.2120,  0.6599, -1.0934, -1.3726,  0.4788, -0.1171],
                                         [ 0.5121,  1.2607, -0.4565,  0.5448, -2.5025, -0.5503, -1.3373,  0.1711],
                                         [-0.3939, -0.6382, -0.0899, -1.4706,  0.4580,  0.3304,  1.8958,  0.1178],
                                         [ 0.1109,  0.2468,  0.3485, -0.0960, -0.0432, -0.3026, -1.9750,  0.4057],
                                         [-1.1117, -0.3422,  1.2130, -1.1206,  0.9506, -0.7723,  0.3162, -0.5487],
                                         [ 0.6304, -0.9149,  0.6075, -0.5371,  1.5875, -0.2979, -0.5832, -3.0311]]]])
            let fwdx = fwdx.forwardDiff(combo.tensor([[[[-0.7337, -1.3648,  1.0776,  0.2407,  0.4805, -2.3233, -0.5350,  0.2349],
                                                         [ 0.5049, -1.1209, -0.5273,  0.5923,  0.2016, -0.9050, -0.1330, -0.1143],
                                                         [ 0.1170,  0.9821, -1.5198,  0.8396,  0.9480, -1.1543,  0.5911, -0.5788],
                                                         [-0.7547,  1.5573, -1.0888,  1.1832,  0.2259,  0.7667, -1.8830,  1.5575],
                                                         [ 1.8945,  1.2214, -0.7537, -2.2445,  2.2856, -0.3581, -1.2650, -1.2537],
                                                         [ 0.9016, -0.9378,  0.3730,  0.3823,  0.5864, -0.9494,  1.9570,  0.3918],
                                                         [ 1.4439, -0.5949, -0.0530, -1.2888,  0.6724, -2.1929, -0.0656,  1.4826],
                                                         [ 1.0679, -0.4129,  1.4264, -0.5726,  1.5709, -2.1192,  0.9934,  0.5601]],
                                           
                                                        [[ 0.8278,  0.3305,  0.4650,  0.0205, -0.4212,  0.2386,  0.2713, -0.1324],
                                                         [ 0.6960,  1.3936,  0.5689, -1.1607,  0.7279, -1.0106, -1.0930, -0.0435],
                                                         [ 0.3146,  0.2892,  0.0992,  0.4875,  0.0519,  0.8227,  2.1785,  0.1240],
                                                         [-0.1070,  1.4169, -1.5649, -0.9627, -0.1553, -1.6912, -0.2387,  1.4843],
                                                         [ 1.0833,  1.5409,  1.0983,  0.7896,  0.0561, -1.1853,  1.2164, -0.2477],
                                                         [-2.4074, -0.8374,  0.7228, -0.8311, -0.1571,  0.7585, -0.0388,  1.2265],
                                                         [ 0.8151,  0.5675, -1.2308,  0.5890, -1.0173,  0.0685, -1.4259, -0.0152],
                                                         [-0.3683,  0.3478, -0.3144, -1.6980, -1.0717,  1.0022, -0.1882, -0.2628]]],
                                           
                                           
                                                       [[[-0.1276,  0.3947,  0.0067, -0.0319,  1.2249,  0.8052, -0.0976, -0.6969],
                                                         [-0.1721,  1.2421, -1.3382,  0.8105,  1.2408,  0.0398,  0.6267,  0.2405],
                                                         [ 0.8025,  1.2815, -1.0382,  1.9981,  1.0302,  0.7142, -0.1895,  0.6839],
                                                         [ 1.3058,  0.5244, -0.2134, -0.9721,  0.8622, -1.0595, -1.2676, -0.4594],
                                                         [ 0.0034,  1.2082, -0.8065, -1.3570, -0.6702, -0.7155,  1.4782,  0.4554],
                                                         [ 1.9114,  0.0033,  0.2951,  0.6574,  0.1122, -0.9725,  1.1244, -0.0866],
                                                         [ 0.2964,  0.4166, -0.9363, -1.6471, -0.9568, -1.6350,  1.2974, -0.7931],
                                                         [-2.0031,  0.6322,  0.1063,  0.6449,  0.8070, -0.6169, -0.0319,  0.4695]],
                                           
                                                        [[ 1.2686,  0.9119, -1.7762,  0.2893, -1.6885, -1.0427, -1.2432,  1.3702],
                                                         [-1.9922,  0.2098, -0.3885,  0.0719, -1.7845,  1.6076, -1.1755,  0.4668],
                                                         [-0.2193, -1.0314,  0.4875,  0.2942, -0.4408,  0.4081,  2.1808,  0.3206],
                                                         [-0.5614,  0.4319,  2.1275, -1.0575, -1.6521,  0.2688, -0.3607, -0.1448],
                                                         [ 1.0357,  0.0210, -0.2928,  1.1564,  0.8043, -1.0873, -1.3117, -1.6104],
                                                         [-0.1354,  0.1832,  0.2811, -1.5012,  0.9051,  1.0796,  0.3448,  1.7928],
                                                         [-0.2357, -1.7013, -0.2552,  0.3293, -0.6618, -1.7520, -0.2757, -0.3190],
                                                         [-0.8181,  1.4611,  0.6737,  0.6333, -1.2758, -0.0336,  0.7365,  0.0952]]]]))
            let fwdz = fwdx.avgpool2d(3)
            let fwdzCorrect = combo.tensor([[[[0.362033, 0.083800],
                                              [-0.498611, -0.193633]],
       
                                             [[-0.146700, 0.190022],
                                              [0.735167, -0.192733]]],
       
       
                                            [[[0.109233, -0.321333],
                                              [-0.193944, -0.183033]],
       
                                             [[0.361844, -0.182878],
                                              [0.100056, -0.403556]]]])
            let fwdzd = fwdz.derivative
            let fwdzdCorrect = combo.tensor([[[[-0.287211, -0.119989],
                                               [0.268089, 0.208678]],
       
                                              [[0.553867, -0.027044],
                                               [0.105056, -0.375389]]],
                                             [[[0.116822, 0.870200],
                                               [0.470189, -0.457222]],
       
                                              [[-0.281089, -0.253933],
                                               [0.343422, -0.120433]]]])

            Assert.True(fwdz.allclose(fwdzCorrect, 0.01))
            Assert.True(fwdzd.allclose(fwdzdCorrect, 0.01))
            
            let revx = combo.tensor([[[[ 0.7372,  0.7090,  0.9216,  0.3363,  1.0141, -0.7642,  0.3801, -0.9568],
                                         [-0.3520, -1.2336,  1.8489,  0.9929, -0.8138,  0.0978, -1.3206, -1.5434],
                                         [ 0.6883, -0.2346,  0.1735,  0.6695, -1.9122,  1.1338, -0.1248,  0.2164],
                                         [-1.1349,  0.3008, -0.1635, -1.0362, -0.6487, -0.8422, -0.4334,  1.0604],
                                         [-2.1562, -0.1079,  0.5744, -0.7275,  1.0254, -0.0508, -0.0525, -0.0746],
                                         [-0.7494,  0.6819, -1.7327, -0.4838, -0.6120,  1.6331,  0.1797, -0.6068],
                                         [ 0.6400,  0.1389,  0.3033,  0.3195,  0.9934,  1.2455, -1.0953,  0.9922],
                                         [ 0.2375,  0.6003, -1.1614,  1.0146,  0.2100, -1.0145, -0.1933,  1.1415]],
                           
                                        [[-0.0819,  0.2091,  0.4351,  1.7527, -1.1970,  2.1048,  1.0200, -0.5153],
                                         [ 1.0867, -1.8738, -0.2754, -0.5089,  0.8850, -0.4751, -0.7820,  1.4476],
                                         [-0.9072,  0.9977, -0.9106, -0.3171, -1.2444,  0.7102,  0.5656,  1.2660],
                                         [ 0.1986, -0.4967,  0.2384, -0.6551,  1.0156,  0.0520, -0.1964,  1.1367],
                                         [ 0.8948,  2.2070,  0.9938,  0.5311, -1.0674,  0.3894,  0.4192, -0.6235],
                                         [ 2.7646, -0.6509,  0.4669, -1.8774, -0.6341,  0.5113,  1.2398,  2.5090],
                                         [ 1.0722,  0.8162, -2.3271,  1.3826,  1.3832,  0.6205, -0.9138, -0.8237],
                                         [-0.0688, -1.6786,  0.1672, -0.7255, -0.1228, -0.1603, -2.1906, -2.6372]]],
                           
                           
                                       [[[-1.0461,  0.4063,  0.2085, -0.7598, -1.3893, -0.8866,  1.0594, -0.6184],
                                         [ 2.1120, -0.6475, -0.3964,  0.0378,  0.0138, -0.1672,  0.9265, -1.7734],
                                         [-0.2313,  0.6284, -0.0508, -0.1014, -0.5059,  0.8666, -0.7010, -0.5073],
                                         [ 0.1709,  0.2466,  0.1781, -1.6740, -0.0251, -1.4144, -2.1012,  0.3922],
                                         [ 0.9141,  0.6582, -0.0826, -0.7104,  1.7133,  1.2406,  1.1415, -0.6222],
                                         [-2.1525, -0.2996, -1.3787,  0.0336, -1.4643,  0.6534,  0.3996,  0.3145],
                                         [-0.3298,  0.3855, -0.5100,  1.2770,  0.5306, -0.6604, -0.0489,  0.0609],
                                         [-0.1552, -1.1218, -0.8435,  0.2365,  1.4428,  0.4234, -1.1083, -1.3874]],
                           
                                        [[ 0.0511,  0.1216, -1.0103, -1.2529,  1.7200, -0.0225,  0.7446, -0.8076],
                                         [ 0.2543,  1.4250,  0.7869,  0.0526, -2.1598,  1.8228, -0.4628,  1.4234],
                                         [ 0.5492,  0.8668,  0.2120,  0.6599, -1.0934, -1.3726,  0.4788, -0.1171],
                                         [ 0.5121,  1.2607, -0.4565,  0.5448, -2.5025, -0.5503, -1.3373,  0.1711],
                                         [-0.3939, -0.6382, -0.0899, -1.4706,  0.4580,  0.3304,  1.8958,  0.1178],
                                         [ 0.1109,  0.2468,  0.3485, -0.0960, -0.0432, -0.3026, -1.9750,  0.4057],
                                         [-1.1117, -0.3422,  1.2130, -1.1206,  0.9506, -0.7723,  0.3162, -0.5487],
                                         [ 0.6304, -0.9149,  0.6075, -0.5371,  1.5875, -0.2979, -0.5832, -3.0311]]]]).reverseDiff()

            //revz = torch.nn.functional.avg_pool2d(revx, 3)
            let revz = revx.avgpool2d(3)
            let revzCorrect = combo.tensor([[[[ 0.3620,  0.0838],
                                              [-0.4986, -0.1936]],

                                             [[-0.1467,  0.1900],
                                              [ 0.7352, -0.1927]]],


                                            [[[ 0.1092, -0.3213],
                                              [-0.1939, -0.1830]],

                                             [[ 0.3618, -0.1829],
                                              [ 0.1001, -0.4036]]]])
            //revz.backward
            revz.reverse(combo.tensor([[[[-1.0671,  0.1340],
                                          [-0.2743, -0.3197]],

                                         [[ 0.8588, -1.5268],
                                          [ 0.5205,  0.5109]]],


                                        [[[ 1.9620,  0.1845],
                                          [-2.5131, -0.9616]],

                                         [[ 0.7820,  0.4960],
                                          [-0.7865, -0.1536]]]]))
            //revxd = revx.grad
            let revxd = revx.derivative
            let revxdCorrect = combo.tensor([[[[-0.1186, -0.1186, -0.1186,  0.0149,  0.0149,  0.0149,  0.0000, 0.0000],
                                                  [-0.1186, -0.1186, -0.1186,  0.0149,  0.0149,  0.0149,  0.0000, 0.0000],
                                                  [-0.1186, -0.1186, -0.1186,  0.0149,  0.0149,  0.0149,  0.0000, 0.0000],
                                                  [-0.0305, -0.0305, -0.0305, -0.0355, -0.0355, -0.0355,  0.0000, 0.0000],
                                                  [-0.0305, -0.0305, -0.0305, -0.0355, -0.0355, -0.0355,  0.0000, 0.0000],
                                                  [-0.0305, -0.0305, -0.0305, -0.0355, -0.0355, -0.0355,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000]],

                                                 [[ 0.0954,  0.0954,  0.0954, -0.1696, -0.1696, -0.1696,  0.0000, 0.0000],
                                                  [ 0.0954,  0.0954,  0.0954, -0.1696, -0.1696, -0.1696,  0.0000, 0.0000],
                                                  [ 0.0954,  0.0954,  0.0954, -0.1696, -0.1696, -0.1696,  0.0000, 0.0000],
                                                  [ 0.0578,  0.0578,  0.0578,  0.0568,  0.0568,  0.0568,  0.0000, 0.0000],
                                                  [ 0.0578,  0.0578,  0.0578,  0.0568,  0.0568,  0.0568,  0.0000, 0.0000],
                                                  [ 0.0578,  0.0578,  0.0578,  0.0568,  0.0568,  0.0568,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000]]],


                                                [[[ 0.2180,  0.2180,  0.2180,  0.0205,  0.0205,  0.0205,  0.0000, 0.0000],
                                                  [ 0.2180,  0.2180,  0.2180,  0.0205,  0.0205,  0.0205,  0.0000, 0.0000],
                                                  [ 0.2180,  0.2180,  0.2180,  0.0205,  0.0205,  0.0205,  0.0000, 0.0000],
                                                  [-0.2792, -0.2792, -0.2792, -0.1068, -0.1068, -0.1068,  0.0000, 0.0000],
                                                  [-0.2792, -0.2792, -0.2792, -0.1068, -0.1068, -0.1068,  0.0000, 0.0000],
                                                  [-0.2792, -0.2792, -0.2792, -0.1068, -0.1068, -0.1068,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000]],

                                                 [[ 0.0869,  0.0869,  0.0869,  0.0551,  0.0551,  0.0551,  0.0000, 0.0000],
                                                  [ 0.0869,  0.0869,  0.0869,  0.0551,  0.0551,  0.0551,  0.0000, 0.0000],
                                                  [ 0.0869,  0.0869,  0.0869,  0.0551,  0.0551,  0.0551,  0.0000, 0.0000],
                                                  [-0.0874, -0.0874, -0.0874, -0.0171, -0.0171, -0.0171,  0.0000, 0.0000],
                                                  [-0.0874, -0.0874, -0.0874, -0.0171, -0.0171, -0.0171,  0.0000, 0.0000],
                                                  [-0.0874, -0.0874, -0.0874, -0.0171, -0.0171, -0.0171,  0.0000,0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000],
                                                  [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, 0.0000]]]])

            Assert.True(revz.allclose(revzCorrect, 0.01))
            Assert.True(revxd.allclose(revxdCorrect, 0.01))

    [<Test>]
    member _.TestDerivativeAvgPool3D () =
        for combo in Combos.FloatingPointExcept16s do
            let fwdx = combo.tensor([[[[ 0.4633,  0.9173,  0.4568, -1.7660, -0.1077],
                                         [-2.1112,  1.5542,  0.5720, -1.0952, -1.8144],
                                         [ 0.3505, -0.9843, -2.5655, -0.9835,  1.2303],
                                         [ 0.8156,  1.5415,  1.3066, -1.1820,  0.2060],
                                         [ 0.0684,  1.5936,  0.2956, -0.5176, -1.6960]],

                                        [[-1.7281, -0.7697, -2.2310,  0.3580,  0.6299],
                                         [ 0.8558, -0.6180, -1.6077, -0.6779,  1.2910],
                                         [ 0.1885, -0.7006, -0.1863, -1.6729, -0.5761],
                                         [ 0.1940, -0.0399,  0.9329,  1.0687,  0.0955],
                                         [-1.0189,  0.4046,  1.1762,  0.3842,  0.6831]],

                                        [[ 0.2996,  0.5738,  0.0369,  0.2835, -0.2363],
                                         [ 0.6847, -0.4949, -0.3974,  0.6808, -1.2942],
                                         [ 1.0910, -0.0594, -0.0037, -0.3355, -1.5056],
                                         [-0.0965,  1.1358,  1.2851, -1.7333, -1.1705],
                                         [ 0.0966, -1.2780,  1.2939,  1.3469, -0.2603]],

                                        [[-0.5270,  1.1442,  0.1259, -1.2813,  0.3536],
                                         [ 0.1579,  0.0828,  1.3531, -0.9110, -0.8747],
                                         [ 0.2473, -0.1507, -0.4880,  0.4575,  1.1186],
                                         [ 2.0900,  1.0479, -0.7209, -1.6928,  1.8761],
                                         [ 2.2015, -0.5097,  0.7364, -1.5177,  0.9212]],

                                        [[ 1.0358,  1.6584, -1.9654, -1.3971,  1.5641],
                                         [ 0.4032,  0.7737,  0.9351, -0.5245,  0.0783],
                                         [-1.2932, -0.9885, -1.1850, -0.7403,  0.1739],
                                         [-0.5471,  0.5017, -1.0571,  1.7574, -0.0911],
                                         [ 0.6944, -1.2772,  0.7473, -1.0983,  1.1462]]],


                                       [[[-1.2563,  0.0688,  1.0405, -0.2582,  0.7333],
                                         [ 2.0711, -0.1815,  0.8876, -0.2907,  1.1195],
                                         [-0.3912,  0.3624,  1.0576, -0.4748, -1.4021],
                                         [ 1.2176, -0.6160, -0.3471,  1.1689,  0.5677],
                                         [-0.0639,  0.3765, -0.2614,  1.8267,  0.0315]],

                                        [[ 1.2927,  1.0709, -0.8808,  0.8106, -0.5315],
                                         [ 0.7614, -0.3935,  1.2451, -0.0598, -0.5887],
                                         [-0.4089, -0.8598,  0.2478,  0.1282, -0.2745],
                                         [-0.4139, -1.2905, -0.2625, -2.0453,  1.8941],
                                         [-0.2400, -1.2830, -0.3503, -0.8536, -0.5927]],

                                        [[ 0.8200,  1.8860, -0.5216, -0.9590, -0.9760],
                                         [-1.5796,  2.2379, -0.5714, -1.5612,  1.4035],
                                         [-0.6434, -1.2257,  0.1408,  0.3781, -2.2344],
                                         [ 0.4963,  0.2431,  0.6835,  0.0047,  1.3374],
                                         [-1.5899,  2.5382,  0.9503,  1.9080,  1.8315]],

                                        [[ 0.5853,  1.9343, -0.7472,  2.1774, -2.1895],
                                         [-0.6187, -0.2870,  1.2485,  2.4069, -0.2632],
                                         [-1.6047, -0.3379,  0.5372,  1.7098,  1.6220],
                                         [ 0.5255,  0.2564, -1.8615,  1.5519, -0.5655],
                                         [-0.9452, -1.1828, -1.8192,  1.1349,  0.9806]],

                                        [[-1.8198,  0.5455,  1.1761,  1.3070, -0.4654],
                                         [ 1.2673,  0.2608,  0.8385, -1.0407, -0.6288],
                                         [-0.3860,  1.3343,  1.3084,  0.5794,  0.4639],
                                         [ 0.4750, -0.9006, -1.5002,  0.8689, -0.0379],
                                         [ 0.2891,  0.0195, -0.0503, -0.3235,  1.5407]]]]).unsqueeze(0)
            let fwdx = fwdx.forwardDiff(combo.tensor([[[[ 1.2061,  1.7293,  0.4767,  0.7229,  0.7488],
                                                          [ 0.6760, -0.0393, -0.8397,  0.8051,  0.4581],
                                                          [ 1.2460,  2.0884, -1.1798,  0.4861, -0.0964],
                                                          [ 0.3063,  0.4975,  0.6513,  0.1162,  0.3748],
                                                          [-1.2513, -0.5590,  1.5486, -0.6724,  1.1572]],
                                           
                                                         [[ 0.1752,  0.4672, -0.5822, -1.9512,  0.8160],
                                                          [ 1.7688,  0.8751, -0.1430, -0.2425,  0.0821],
                                                          [-0.2486,  0.3299,  0.5527, -2.1193,  0.4580],
                                                          [ 1.3704, -1.0868, -1.9629, -1.4430, -0.0127],
                                                          [ 1.7375, -1.3191, -0.5753, -1.9077, -0.3804]],
                                           
                                                         [[ 0.6108,  0.4258, -1.1079, -0.7524,  0.9564],
                                                          [-1.5938,  1.2050,  0.0338,  0.5924,  0.1084],
                                                          [ 0.8414, -0.0152, -0.4412,  1.1122, -1.9355],
                                                          [-0.1598, -0.6622,  0.3185, -0.1600,  0.1670],
                                                          [ 0.2093,  0.4207, -0.2291, -1.1138,  2.8360]],
                                           
                                                         [[ 0.6769,  1.6479, -1.2976,  0.8720,  0.8976],
                                                          [-0.6833, -1.4484, -0.3252, -1.4125, -0.6695],
                                                          [ 1.1028, -2.1919, -1.6716, -0.3574, -1.1171],
                                                          [-0.4295, -1.5260,  1.3498, -1.3144,  0.1886],
                                                          [ 2.1619,  0.8260,  0.0601, -0.7519, -1.3959]],
                                           
                                                         [[ 0.5264, -0.7098, -1.2012, -1.1240,  0.3372],
                                                          [-0.1811, -0.5194,  0.4035, -0.3355, -1.6033],
                                                          [-0.6442,  0.1703,  0.9095, -0.4948,  2.3665],
                                                          [ 0.1669,  0.1530, -0.2943,  1.5188, -1.5053],
                                                          [ 1.6047,  1.1917, -1.0954, -0.4808, -0.3117]]],
                                           
                                           
                                                        [[[-1.1625,  0.9542,  0.1126,  1.1992, -0.2086],
                                                          [ 1.0938, -1.4662,  0.4404,  0.0325,  0.2896],
                                                          [ 0.4777, -1.6264,  0.9373, -0.9954,  0.1160],
                                                          [ 1.7084, -1.0506, -0.7470,  1.6613, -0.0847],
                                                          [-2.1556, -0.4030,  0.2127, -0.0435,  1.1515]],
                                           
                                                         [[-0.4482,  1.7436,  0.5124,  0.1872, -0.8369],
                                                          [ 1.4735, -1.2213, -0.7122,  1.6542,  2.4351],
                                                          [-0.3379, -0.4623,  0.6521,  1.4995, -0.8807],
                                                          [-0.6245, -0.2797,  0.0155,  0.1932, -0.7321],
                                                          [-0.6612, -0.2360,  1.6194, -0.5233,  1.3992]],
                                           
                                                         [[-0.5477,  0.3180,  1.0264,  0.4323, -0.3248],
                                                          [ 0.7884,  0.4413,  1.3339,  2.2025,  1.0101],
                                                          [ 0.5930, -1.2639, -1.0836, -0.9338, -0.2644],
                                                          [ 0.9948, -0.9962, -1.1016,  2.2480, -1.9893],
                                                          [-0.2152, -0.1174,  0.6922, -2.1619,  0.0580]],
                                           
                                                         [[-0.4531,  0.1824, -0.4269, -1.1911,  2.4893],
                                                          [-0.8215, -1.3639, -0.1583, -0.1183, -0.1474],
                                                          [ 1.5304,  0.7693, -0.5337, -2.7162,  0.5287],
                                                          [-0.8808,  0.1495,  0.1766,  0.2239, -0.5056],
                                                          [ 1.2601, -0.4200, -0.3813, -0.2944,  1.4041]],
                                           
                                                         [[ 0.2880, -1.0861, -0.4530,  0.5327, -0.8753],
                                                          [ 0.5471,  0.3222,  1.7499, -0.5514,  0.7659],
                                                          [-1.8905, -0.6201,  0.6678,  1.4364, -0.5993],
                                                          [-0.6859, -0.3009,  0.4489, -1.1521,  0.9835],
                                                          [ 0.1159,  2.4556, -1.5528,  0.9735,  1.7658]]]]).unsqueeze(0))
            let fwdz = fwdx.avgpool3d(2)
            let fwdzCorrect = combo.tensor([[[[-0.179550, -0.748875],
                                              [0.170663, -0.410250]],
                  
                                             [[0.240137, -0.013687],
                                              [0.663175, -0.403950]]],
                  
                  
                                            [[[0.429200, 0.311788],
                                              [-0.300038, -0.065900]],
                  
                                             [[0.622275, 0.184050],
                                              [-0.286300, 0.393062]]]]).unsqueeze(0)
            let fwdzd = fwdz.derivative
            let fwdzdCorrect = combo.tensor([[[[0.857300, -0.219238],
                                               [0.562887, -0.612337]],
                  
                                              [[0.105112, -0.424675],
                                               [-0.380050, -0.145512]]],
                  
                  
                                             [[[0.120862, 0.428288],
                                               [-0.274413, 0.402063]],
                  
                                              [[-0.182012, 0.387563],
                                                [0.112012, -0.465050]]]]).unsqueeze(0)

            Assert.True(fwdz.allclose(fwdzCorrect, 0.05))
            Assert.True(fwdzd.allclose(fwdzdCorrect, 0.05))
            let revx = combo.tensor([[[[ 0.4633,  0.9173,  0.4568, -1.7660, -0.1077],
                                         [-2.1112,  1.5542,  0.5720, -1.0952, -1.8144],
                                         [ 0.3505, -0.9843, -2.5655, -0.9835,  1.2303],
                                         [ 0.8156,  1.5415,  1.3066, -1.1820,  0.2060],
                                         [ 0.0684,  1.5936,  0.2956, -0.5176, -1.6960]],

                                        [[-1.7281, -0.7697, -2.2310,  0.3580,  0.6299],
                                         [ 0.8558, -0.6180, -1.6077, -0.6779,  1.2910],
                                         [ 0.1885, -0.7006, -0.1863, -1.6729, -0.5761],
                                         [ 0.1940, -0.0399,  0.9329,  1.0687,  0.0955],
                                         [-1.0189,  0.4046,  1.1762,  0.3842,  0.6831]],

                                        [[ 0.2996,  0.5738,  0.0369,  0.2835, -0.2363],
                                         [ 0.6847, -0.4949, -0.3974,  0.6808, -1.2942],
                                         [ 1.0910, -0.0594, -0.0037, -0.3355, -1.5056],
                                         [-0.0965,  1.1358,  1.2851, -1.7333, -1.1705],
                                         [ 0.0966, -1.2780,  1.2939,  1.3469, -0.2603]],

                                        [[-0.5270,  1.1442,  0.1259, -1.2813,  0.3536],
                                         [ 0.1579,  0.0828,  1.3531, -0.9110, -0.8747],
                                         [ 0.2473, -0.1507, -0.4880,  0.4575,  1.1186],
                                         [ 2.0900,  1.0479, -0.7209, -1.6928,  1.8761],
                                         [ 2.2015, -0.5097,  0.7364, -1.5177,  0.9212]],

                                        [[ 1.0358,  1.6584, -1.9654, -1.3971,  1.5641],
                                         [ 0.4032,  0.7737,  0.9351, -0.5245,  0.0783],
                                         [-1.2932, -0.9885, -1.1850, -0.7403,  0.1739],
                                         [-0.5471,  0.5017, -1.0571,  1.7574, -0.0911],
                                         [ 0.6944, -1.2772,  0.7473, -1.0983,  1.1462]]],


                                       [[[-1.2563,  0.0688,  1.0405, -0.2582,  0.7333],
                                         [ 2.0711, -0.1815,  0.8876, -0.2907,  1.1195],
                                         [-0.3912,  0.3624,  1.0576, -0.4748, -1.4021],
                                         [ 1.2176, -0.6160, -0.3471,  1.1689,  0.5677],
                                         [-0.0639,  0.3765, -0.2614,  1.8267,  0.0315]],

                                        [[ 1.2927,  1.0709, -0.8808,  0.8106, -0.5315],
                                         [ 0.7614, -0.3935,  1.2451, -0.0598, -0.5887],
                                         [-0.4089, -0.8598,  0.2478,  0.1282, -0.2745],
                                         [-0.4139, -1.2905, -0.2625, -2.0453,  1.8941],
                                         [-0.2400, -1.2830, -0.3503, -0.8536, -0.5927]],

                                        [[ 0.8200,  1.8860, -0.5216, -0.9590, -0.9760],
                                         [-1.5796,  2.2379, -0.5714, -1.5612,  1.4035],
                                         [-0.6434, -1.2257,  0.1408,  0.3781, -2.2344],
                                         [ 0.4963,  0.2431,  0.6835,  0.0047,  1.3374],
                                         [-1.5899,  2.5382,  0.9503,  1.9080,  1.8315]],

                                        [[ 0.5853,  1.9343, -0.7472,  2.1774, -2.1895],
                                         [-0.6187, -0.2870,  1.2485,  2.4069, -0.2632],
                                         [-1.6047, -0.3379,  0.5372,  1.7098,  1.6220],
                                         [ 0.5255,  0.2564, -1.8615,  1.5519, -0.5655],
                                         [-0.9452, -1.1828, -1.8192,  1.1349,  0.9806]],

                                        [[-1.8198,  0.5455,  1.1761,  1.3070, -0.4654],
                                         [ 1.2673,  0.2608,  0.8385, -1.0407, -0.6288],
                                         [-0.3860,  1.3343,  1.3084,  0.5794,  0.4639],
                                         [ 0.4750, -0.9006, -1.5002,  0.8689, -0.0379],
                                         [ 0.2891,  0.0195, -0.0503, -0.3235,  1.5407]]]]).unsqueeze(0).reverseDiff()
            let revz = revx.avgpool3d(2)
            let revzCorrect = combo.tensor([[[[-0.1796, -0.7489],
                                              [ 0.1707, -0.4103]],

                                             [[ 0.2401, -0.0137],
                                              [ 0.6632, -0.4040]]],


                                            [[[ 0.4292,  0.3118],
                                              [-0.3000, -0.0659]],

                                             [[ 0.6223,  0.1840],
                                              [-0.2863,  0.3931]]]]).unsqueeze(0)
            revz.reverse(combo.tensor([[[[-0.5557,  0.7782],
                                          [ 1.2927,  0.9179]],
                           
                                         [[ 0.4852,  0.6701],
                                          [ 0.7996, -0.9707]]],
                           
                           
                                        [[[ 1.0630, -0.8899],
                                          [ 0.8771,  0.0433]],
                           
                                         [[ 0.3975,  0.0060],
                                          [-0.7735,  1.2806]]]]).unsqueeze(0))
            let revxd = revx.derivative
            let revxdCorrect = combo.tensor([[[[-0.0695, -0.0695,  0.0973,  0.0973,  0.0000],
                                               [-0.0695, -0.0695,  0.0973,  0.0973,  0.0000],
                                               [ 0.1616,  0.1616,  0.1147,  0.1147,  0.0000],
                                               [ 0.1616,  0.1616,  0.1147,  0.1147,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[-0.0695, -0.0695,  0.0973,  0.0973,  0.0000],
                                               [-0.0695, -0.0695,  0.0973,  0.0973,  0.0000],
                                               [ 0.1616,  0.1616,  0.1147,  0.1147,  0.0000],
                                               [ 0.1616,  0.1616,  0.1147,  0.1147,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.0606,  0.0606,  0.0838,  0.0838,  0.0000],
                                               [ 0.0606,  0.0606,  0.0838,  0.0838,  0.0000],
                                               [ 0.1000,  0.1000, -0.1213, -0.1213,  0.0000],
                                               [ 0.1000,  0.1000, -0.1213, -0.1213,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.0606,  0.0606,  0.0838,  0.0838,  0.0000],
                                               [ 0.0606,  0.0606,  0.0838,  0.0838,  0.0000],
                                               [ 0.1000,  0.1000, -0.1213, -0.1213,  0.0000],
                                               [ 0.1000,  0.1000, -0.1213, -0.1213,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]]],


                                             [[[ 0.1329,  0.1329, -0.1112, -0.1112,  0.0000],
                                               [ 0.1329,  0.1329, -0.1112, -0.1112,  0.0000],
                                               [ 0.1096,  0.1096,  0.0054,  0.0054,  0.0000],
                                               [ 0.1096,  0.1096,  0.0054,  0.0054,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.1329,  0.1329, -0.1112, -0.1112,  0.0000],
                                               [ 0.1329,  0.1329, -0.1112, -0.1112,  0.0000],
                                               [ 0.1096,  0.1096,  0.0054,  0.0054,  0.0000],
                                               [ 0.1096,  0.1096,  0.0054,  0.0054,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.0497,  0.0497,  0.0008,  0.0008,  0.0000],
                                               [ 0.0497,  0.0497,  0.0008,  0.0008,  0.0000],
                                               [-0.0967, -0.0967,  0.1601,  0.1601,  0.0000],
                                               [-0.0967, -0.0967,  0.1601,  0.1601,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.0497,  0.0497,  0.0008,  0.0008,  0.0000],
                                               [ 0.0497,  0.0497,  0.0008,  0.0008,  0.0000],
                                               [-0.0967, -0.0967,  0.1601,  0.1601,  0.0000],
                                               [-0.0967, -0.0967,  0.1601,  0.1601,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                              [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                               [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]]]])
                                               
            printfn $"revxdCorrect = {revxdCorrect}"
            let revxdCorrect = revxdCorrect.unsqueeze(0)
            printfn $"revxdCorrect = {revxdCorrect}"

            Assert.True(revz.allclose(revzCorrect, 0.05))
            printfn $"revxd = {revxd}"
            printfn $"revxdCorrect = {revxdCorrect}"
            Assert.True(revxd.allclose(revxdCorrect, 0.10))


