// Copyright (c) 2016-     University of Oxford (Atilim Gunes Baydin <gunes@robots.ox.ac.uk>)
// and other contributors, see LICENSE in root of repository.
//
// BSD 2-Clause License. See LICENSE in root of repository.

namespace Tests

open NUnit.Framework
open DiffSharp

[<TestFixture>]
type TestTensorMaxPool () =

    [<Test>]
    member _.TestTensorMaxPool1D () =
        for combo in Combos.FloatingPointExcept16s do
            let t = combo.tensor([[[-2.1704, -1.1558,  2.5995,  1.3858, -1.3157, -0.3179,  0.9593,  -2.1432,  0.7169, -1.7999],
                                     [ 0.4564, -0.2262,  0.3495,  0.4587, -0.3858,  0.2349,  0.2978,  0.6288,  1.1539,  0.2121]],

                                    [[ 0.6654,  0.7151,  0.9980,  0.1321, -2.0009, -1.1897,  1.0608,  -1.8059, -0.2344,  1.6387],
                                     [ 1.1872, -2.2679, -0.0297, -0.2067, -1.5622, -0.3916,  0.6039,  -1.1469,  0.4560,  1.2069]]])

            let tk3, tk3i = dsharp.maxpool1di(t, 3)
            let tk3Correct = combo.tensor([[[ 2.5995,  1.3858,  0.9593],
                                            [ 0.4564,  0.4587,  1.1539]],
                                     
                                           [[ 0.9980,  0.1321,  1.0608],
                                            [ 1.1872, -0.2067,  0.6039]]])
            let tk3iCorrect = combo.tensor([[[2, 3, 6],
                                             [0, 3, 8]],
                                     
                                            [[2, 3, 6],
                                             [0, 3, 6]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk3Correct, tk3)
            Assert.CheckEqual(tk3iCorrect, tk3i)

            let tk3p1, tk3p1i = dsharp.maxpool1di(t, 3, padding=1)
            let tk3p1Correct = combo.tensor([[[-1.1558,  2.5995,  0.9593,  0.7169],
                                                [ 0.4564,  0.4587,  0.6288,  1.1539]],
                                       
                                               [[ 0.7151,  0.9980,  1.0608,  1.6387],
                                                [ 1.1872, -0.0297,  0.6039,  1.2069]]])
            let tk3p1iCorrect = combo.tensor([[[1, 2, 6, 8],
                                                [0, 3, 7, 8]],
                                       
                                               [[1, 2, 6, 9],
                                                [0, 2, 6, 9]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk3p1iCorrect, tk3p1i)
            Assert.CheckEqual(tk3p1Correct, tk3p1)

            let tk3s2, tk3s2i = dsharp.maxpool1di(t, 3, stride=2)
            let tk3s2Correct = combo.tensor([[[ 2.5995,  2.5995,  0.9593,  0.9593],
                                              [ 0.4564,  0.4587,  0.2978,  1.1539]],
                                     
                                             [[ 0.9980,  0.9980,  1.0608,  1.0608],
                                              [ 1.1872, -0.0297,  0.6039,  0.6039]]])
            let tk3s2iCorrect = combo.tensor([[[2, 2, 6, 6],
                                                  [0, 3, 6, 8]],
                                         
                                                 [[2, 2, 6, 6],
                                                  [0, 2, 6, 6]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk3s2iCorrect, tk3s2i)
            Assert.CheckEqual(tk3s2Correct, tk3s2)

            let tk4s3p2, tk4s3p2i = dsharp.maxpool1di(t, 4, stride=3, padding=2)
            let tk4s3p2Correct = combo.tensor([[[-1.1558,  2.5995,  0.9593,  0.7169],
                                                  [ 0.4564,  0.4587,  0.6288,  1.1539]],
                                         
                                                 [[ 0.7151,  0.9980,  1.0608,  1.6387],
                                                  [ 1.1872, -0.0297,  0.6039,  1.2069]]])
            let tk4s3p2iCorrect = combo.tensor([[[1, 2, 6, 8],
                                                  [0, 3, 7, 8]],
                                         
                                                 [[1, 2, 6, 9],
                                                  [0, 2, 6, 9]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk4s3p2iCorrect, tk4s3p2i)
            Assert.CheckEqual(tk4s3p2Correct, tk4s3p2)

        for combo in Combos.IntegralAndBool do 
            let x = combo.zeros([1;4;4])
            isInvalidOp(fun () -> dsharp.maxpool1d(x,3))

    [<Test>]
    member _.TestTensorMaxPool2D () =
        for combo in Combos.IntegralAndFloatingPointExcept16s do
            let t = combo.tensor([[[[ 0.7372,  0.7090,  0.9216,  0.3363,  1.0141, -0.7642,  0.3801, -0.9568],
                                      [-0.3520, -1.2336,  1.8489,  0.9929, -0.8138,  0.0978, -1.3206, -1.5434],
                                      [ 0.6883, -0.2346,  0.1735,  0.6695, -1.9122,  1.1338, -0.1248,  0.2164],
                                      [-1.1349,  0.3008, -0.1635, -1.0362, -0.6487, -0.8422, -0.4334,  1.0604],
                                      [-2.1562, -0.1079,  0.5744, -0.7275,  1.0254, -0.0508, -0.0525, -0.0746],
                                      [-0.7494,  0.6819, -1.7327, -0.4838, -0.6120,  1.6331,  0.1797, -0.6068],
                                      [ 0.6400,  0.1389,  0.3033,  0.3195,  0.9934,  1.2455, -1.0953,  0.9922],
                                      [ 0.2375,  0.6003, -1.1614,  1.0146,  0.2100, -1.0145, -0.1933,  1.1415]],

                                     [[-0.0819,  0.2091,  0.4351,  1.7527, -1.1970,  2.1048,  1.0200, -0.5153],
                                      [ 1.0867, -1.8738, -0.2754, -0.5089,  0.8850, -0.4751, -0.7820,  1.4476],
                                      [-0.9072,  0.9977, -0.9106, -0.3171, -1.2444,  0.7102,  0.5656,  1.2660],
                                      [ 0.1986, -0.4967,  0.2384, -0.6551,  1.0156,  0.0520, -0.1964,  1.1367],
                                      [ 0.8948,  2.2070,  0.9938,  0.5311, -1.0674,  0.3894,  0.4192, -0.6235],
                                      [ 2.7646, -0.6509,  0.4669, -1.8774, -0.6341,  0.5113,  1.2398,  2.5090],
                                      [ 1.0722,  0.8162, -2.3271,  1.3826,  1.3832,  0.6205, -0.9138, -0.8237],
                                      [-0.0688, -1.6786,  0.1672, -0.7255, -0.1228, -0.1603, -2.1906, -2.6372]]],


                                    [[[-1.0461,  0.4063,  0.2085, -0.7598, -1.3893, -0.8866,  1.0594, -0.6184],
                                      [ 2.1120, -0.6475, -0.3964,  0.0378,  0.0138, -0.1672,  0.9265, -1.7734],
                                      [-0.2313,  0.6284, -0.0508, -0.1014, -0.5059,  0.8666, -0.7010, -0.5073],
                                      [ 0.1709,  0.2466,  0.1781, -1.6740, -0.0251, -1.4144, -2.1012,  0.3922],
                                      [ 0.9141,  0.6582, -0.0826, -0.7104,  1.7133,  1.2406,  1.1415, -0.6222],
                                      [-2.1525, -0.2996, -1.3787,  0.0336, -1.4643,  0.6534,  0.3996,  0.3145],
                                      [-0.3298,  0.3855, -0.5100,  1.2770,  0.5306, -0.6604, -0.0489,  0.0609],
                                      [-0.1552, -1.1218, -0.8435,  0.2365,  1.4428,  0.4234, -1.1083, -1.3874]],

                                     [[ 0.0511,  0.1216, -1.0103, -1.2529,  1.7200, -0.0225,  0.7446, -0.8076],
                                      [ 0.2543,  1.4250,  0.7869,  0.0526, -2.1598,  1.8228, -0.4628,  1.4234],
                                      [ 0.5492,  0.8668,  0.2120,  0.6599, -1.0934, -1.3726,  0.4788, -0.1171],
                                      [ 0.5121,  1.2607, -0.4565,  0.5448, -2.5025, -0.5503, -1.3373,  0.1711],
                                      [-0.3939, -0.6382, -0.0899, -1.4706,  0.4580,  0.3304,  1.8958,  0.1178],
                                      [ 0.1109,  0.2468,  0.3485, -0.0960, -0.0432, -0.3026, -1.9750,  0.4057],
                                      [-1.1117, -0.3422,  1.2130, -1.1206,  0.9506, -0.7723,  0.3162, -0.5487],
                                      [ 0.6304, -0.9149,  0.6075, -0.5371,  1.5875, -0.2979, -0.5832, -3.0311]]]])

            let tk3, tk3i = dsharp.maxpool2di(t, 3)
            let tk3Correct = combo.tensor([[[[1.8489, 1.1338],
                                              [0.6819, 1.6331]],

                                             [[1.0867, 2.1048],
                                              [2.7646, 1.0156]]],


                                            [[[2.1120, 0.8666],
                                              [0.9141, 1.7133]],

                                             [[1.4250, 1.8228],
                                              [1.2607, 0.5448]]]])
            let tk3iCorrect = combo.tensor([[[[10, 21],
                                                  [41, 45]],

                                                 [[ 8,  5],
                                                  [40, 28]]],


                                                [[[ 8, 21],
                                                  [32, 36]],

                                                 [[ 9, 13],
                                                  [25, 27]]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk3Correct, tk3)
            Assert.CheckEqual(tk3iCorrect, tk3i)

            let tk3p1, tk3p1i = dsharp.maxpool2di(t, 3, padding=1)
            let tk3p1Correct = combo.tensor([[[[0.7372, 1.8489, 0.3801],
                                                  [0.6883, 1.0254, 1.1338],
                                                  [0.6819, 1.0146, 1.6331]],

                                                 [[1.0867, 1.7527, 2.1048],
                                                  [2.2070, 1.0156, 1.2660],
                                                  [2.7646, 1.3832, 2.5090]]],


                                                [[[2.1120, 0.2085, 1.0594],
                                                  [0.9141, 1.7133, 1.2406],
                                                  [0.3855, 1.4428, 0.6534]],

                                                 [[1.4250, 1.7200, 1.8228],
                                                  [1.2607, 0.6599, 1.8958],
                                                  [0.6304, 1.5875, 0.4057]]]])
            let tk3p1iCorrect = combo.tensor([[[[ 0, 10,  6],
                                                  [16, 36, 21],
                                                  [41, 59, 45]],

                                                 [[ 8,  3,  5],
                                                  [33, 28, 23],
                                                  [40, 52, 47]]],


                                                [[[ 8,  2,  6],
                                                  [32, 36, 37],
                                                  [49, 60, 45]],

                                                 [[ 9,  4, 13],
                                                  [25, 19, 38],
                                                  [56, 60, 47]]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk3p1iCorrect, tk3p1i)
            Assert.CheckEqual(tk3p1Correct, tk3p1)

            let tk3s2, tk3s2i = dsharp.maxpool2di(t, 3, stride=2)
            let tk3s2Correct = combo.tensor([[[[1.8489, 1.8489, 1.1338],
                                                  [0.6883, 1.0254, 1.1338],
                                                  [0.6819, 1.0254, 1.6331]],

                                                 [[1.0867, 1.7527, 2.1048],
                                                  [2.2070, 1.0156, 1.0156],
                                                  [2.7646, 1.3832, 1.3832]]],


                                                [[[2.1120, 0.2085, 1.0594],
                                                  [0.9141, 1.7133, 1.7133],
                                                  [0.9141, 1.7133, 1.7133]],

                                                 [[1.4250, 1.7200, 1.8228],
                                                  [1.2607, 0.6599, 1.8958],
                                                  [1.2130, 1.2130, 1.8958]]]])
            let tk3s2iCorrect = combo.tensor([[[[10, 10, 21],
                                                  [16, 36, 21],
                                                  [41, 36, 45]],

                                                 [[ 8,  3,  5],
                                                  [33, 28, 28],
                                                  [40, 52, 52]]],


                                                [[[ 8,  2,  6],
                                                  [32, 36, 36],
                                                  [32, 36, 36]],

                                                 [[ 9,  4, 13],
                                                  [25, 19, 38],
                                                  [50, 50, 38]]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk3s2iCorrect, tk3s2i)
            Assert.CheckEqual(tk3s2Correct, tk3s2)

            let tk4s3p2, tk4s3p2i = dsharp.maxpool2di(t, 4, stride=3, padding=2)
            let tk4s3p2Correct = combo.tensor([[[[0.7372, 1.8489, 1.0141],
                                                  [0.6883, 1.8489, 1.1338],
                                                  [0.6819, 1.0254, 1.6331]],

                                                 [[1.0867, 1.7527, 2.1048],
                                                  [2.2070, 2.2070, 1.4476],
                                                  [2.7646, 2.2070, 2.5090]]],


                                                [[[2.1120, 0.4063, 1.0594],
                                                  [2.1120, 1.7133, 1.7133],
                                                  [0.9141, 1.7133, 1.7133]],

                                                 [[1.4250, 1.7200, 1.8228],
                                                  [1.4250, 1.4250, 1.8958],
                                                  [0.6304, 1.5875, 1.8958]]]])
            let tk4s3p2iCorrect = combo.tensor([[[[ 0, 10,  4],
                                                      [16, 10, 21],
                                                      [41, 36, 45]],

                                                     [[ 8,  3,  5],
                                                      [33, 33, 15],
                                                      [40, 33, 47]]],


                                                    [[[ 8,  1,  6],
                                                      [ 8, 36, 36],
                                                      [32, 36, 36]],

                                                     [[ 9,  4, 13],
                                                      [ 9,  9, 38],
                                                      [56, 60, 38]]]], dtype=Dtype.Int32)
            Assert.CheckEqual(tk4s3p2iCorrect, tk4s3p2i)
            Assert.CheckEqual(tk4s3p2Correct, tk4s3p2)

        for combo in Combos.IntegralAndBool do 
            let x = combo.zeros([4;4;4;4])
            isInvalidOp(fun () -> dsharp.maxpool2d(x,3))

    [<Test>]
    member _.TestTensorMaxPool3D () =
        for combo in Combos.IntegralAndFloatingPointExcept16s do
            let t = combo.tensor([[[[ 0.4633,  0.9173,  0.4568, -1.7660, -0.1077],
                                       [-2.1112,  1.5542,  0.5720, -1.0952, -1.8144],
                                       [ 0.3505, -0.9843, -2.5655, -0.9835,  1.2303],
                                       [ 0.8156,  1.5415,  1.3066, -1.1820,  0.2060],
                                       [ 0.0684,  1.5936,  0.2956, -0.5176, -1.6960]],

                                      [[-1.7281, -0.7697, -2.2310,  0.3580,  0.6299],
                                       [ 0.8558, -0.6180, -1.6077, -0.6779,  1.2910],
                                       [ 0.1885, -0.7006, -0.1863, -1.6729, -0.5761],
                                       [ 0.1940, -0.0399,  0.9329,  1.0687,  0.0955],
                                       [-1.0189,  0.4046,  1.1762,  0.3842,  0.6831]],

                                      [[ 0.2996,  0.5738,  0.0369,  0.2835, -0.2363],
                                       [ 0.6847, -0.4949, -0.3974,  0.6808, -1.2942],
                                       [ 1.0910, -0.0594, -0.0037, -0.3355, -1.5056],
                                       [-0.0965,  1.1358,  1.2851, -1.7333, -1.1705],
                                       [ 0.0966, -1.2780,  1.2939,  1.3469, -0.2603]],

                                      [[-0.5270,  1.1442,  0.1259, -1.2813,  0.3536],
                                       [ 0.1579,  0.0828,  1.3531, -0.9110, -0.8747],
                                       [ 0.2473, -0.1507, -0.4880,  0.4575,  1.1186],
                                       [ 2.0900,  1.0479, -0.7209, -1.6928,  1.8761],
                                       [ 2.2015, -0.5097,  0.7364, -1.5177,  0.9212]],

                                      [[ 1.0358,  1.6584, -1.9654, -1.3971,  1.5641],
                                       [ 0.4032,  0.7737,  0.9351, -0.5245,  0.0783],
                                       [-1.2932, -0.9885, -1.1850, -0.7403,  0.1739],
                                       [-0.5471,  0.5017, -1.0571,  1.7574, -0.0911],
                                       [ 0.6944, -1.2772,  0.7473, -1.0983,  1.1462]]],


                                     [[[-1.2563,  0.0688,  1.0405, -0.2582,  0.7333],
                                       [ 2.0711, -0.1815,  0.8876, -0.2907,  1.1195],
                                       [-0.3912,  0.3624,  1.0576, -0.4748, -1.4021],
                                       [ 1.2176, -0.6160, -0.3471,  1.1689,  0.5677],
                                       [-0.0639,  0.3765, -0.2614,  1.8267,  0.0315]],

                                      [[ 1.2927,  1.0709, -0.8808,  0.8106, -0.5315],
                                       [ 0.7614, -0.3935,  1.2451, -0.0598, -0.5887],
                                       [-0.4089, -0.8598,  0.2478,  0.1282, -0.2745],
                                       [-0.4139, -1.2905, -0.2625, -2.0453,  1.8941],
                                       [-0.2400, -1.2830, -0.3503, -0.8536, -0.5927]],

                                      [[ 0.8200,  1.8860, -0.5216, -0.9590, -0.9760],
                                       [-1.5796,  2.2379, -0.5714, -1.5612,  1.4035],
                                       [-0.6434, -1.2257,  0.1408,  0.3781, -2.2344],
                                       [ 0.4963,  0.2431,  0.6835,  0.0047,  1.3374],
                                       [-1.5899,  2.5382,  0.9503,  1.9080,  1.8315]],

                                      [[ 0.5853,  1.9343, -0.7472,  2.1774, -2.1895],
                                       [-0.6187, -0.2870,  1.2485,  2.4069, -0.2632],
                                       [-1.6047, -0.3379,  0.5372,  1.7098,  1.6220],
                                       [ 0.5255,  0.2564, -1.8615,  1.5519, -0.5655],
                                       [-0.9452, -1.1828, -1.8192,  1.1349,  0.9806]],

                                      [[-1.8198,  0.5455,  1.1761,  1.3070, -0.4654],
                                       [ 1.2673,  0.2608,  0.8385, -1.0407, -0.6288],
                                       [-0.3860,  1.3343,  1.3084,  0.5794,  0.4639],
                                       [ 0.4750, -0.9006, -1.5002,  0.8689, -0.0379],
                                       [ 0.2891,  0.0195, -0.0503, -0.3235,  1.5407]]]]).unsqueeze(0)

            let tk2, tk2i = dsharp.maxpool3di(t, 2)
            let tk2Correct = combo.tensor([[[[1.5542, 0.5720],
                                                [1.5415, 1.3066]],
                                     
                                               [[1.1442, 1.3531],
                                                [2.0900, 1.2851]]],
                                     
                                     
                                              [[[2.0711, 1.2451],
                                                [1.2176, 1.1689]],
                                     
                                               [[2.2379, 2.4069],
                                                [0.5255, 1.7098]]]]).unsqueeze(0)
            let tk2iCorrect = combo.tensor([[[[ 6,  7],
                                                [16, 17]],
                                     
                                               [[76, 82],
                                                [90, 67]]],
                                     
                                     
                                              [[[ 5, 32],
                                                [15, 18]],
                                     
                                               [[56, 83],
                                                [90, 88]]]], dtype=Dtype.Int32).unsqueeze(0)
            Assert.CheckEqual(tk2Correct, tk2)
            Assert.CheckEqual(tk2iCorrect, tk2i)

            let tk2p1, tk2p1i = dsharp.maxpool3di(t, 2, padding=1)
            let tk2p1Correct = combo.tensor([[[[ 0.4633,  0.9173, -0.1077],
                                                [ 0.3505,  1.5542,  1.2303],
                                                [ 0.8156,  1.5936,  0.2060]],
                                     
                                               [[ 0.2996,  0.5738,  0.6299],
                                                [ 1.0910, -0.0037,  1.2910],
                                                [ 0.1940,  1.2939,  1.3469]],
                                     
                                               [[ 1.0358,  1.6584,  1.5641],
                                                [ 0.4032,  1.3531,  1.1186],
                                                [ 2.2015,  1.0479,  1.8761]]],
                                     
                                     
                                              [[[-1.2563,  1.0405,  0.7333],
                                                [ 2.0711,  1.0576,  1.1195],
                                                [ 1.2176,  0.3765,  1.8267]],
                                     
                                               [[ 1.2927,  1.8860,  0.8106],
                                                [ 0.7614,  2.2379,  1.4035],
                                                [ 0.4963,  2.5382,  1.9080]],
                                     
                                               [[ 0.5853,  1.9343,  2.1774],
                                                [ 1.2673,  1.3343,  2.4069],
                                                [ 0.5255,  0.2564,  1.5519]]]]).unsqueeze(0)
            let tk2p1iCorrect = combo.tensor([[[[  0,   1,   4],
                                                    [ 10,   6,  14],
                                                    [ 15,  21,  19]],
                                         
                                                   [[ 50,  51,  29],
                                                    [ 60,  62,  34],
                                                    [ 40,  72,  73]],
                                         
                                                   [[100, 101, 104],
                                                    [105,  82,  89],
                                                    [ 95,  91,  94]]],
                                         
                                         
                                                  [[[  0,   2,   4],
                                                    [  5,  12,   9],
                                                    [ 15,  21,  23]],
                                         
                                                   [[ 25,  51,  28],
                                                    [ 30,  56,  59],
                                                    [ 65,  71,  73]],
                                         
                                                   [[ 75,  76,  78],
                                                    [105, 111,  83],
                                                    [ 90,  91,  93]]]], dtype=Dtype.Int32).unsqueeze(0)
            Assert.CheckEqual(tk2p1iCorrect, tk2p1i)
            Assert.CheckEqual(tk2p1Correct, tk2p1)

            let tk2s3, tk2s3i = dsharp.maxpool3di(t, 2, stride=3)
            let tk2s3Correct = combo.tensor([[[[1.5542, 1.2910],
                                                [1.5936, 1.0687]],
                                     
                                               [[1.6584, 1.5641],
                                                [2.2015, 1.8761]]],
                                     
                                     
                                              [[[2.0711, 1.1195],
                                                [1.2176, 1.8941]],
                                     
                                               [[1.9343, 2.4069],
                                                [0.5255, 1.5519]]]]).unsqueeze(0)
            let tk2s3iCorrect = combo.tensor([[[[  6,  34],
                                                    [ 21,  43]],
                                         
                                                   [[101, 104],
                                                    [ 95,  94]]],
                                         
                                         
                                                  [[[  5,   9],
                                                    [ 15,  44]],
                                         
                                                   [[ 76,  83],
                                                    [ 90,  93]]]], dtype=Dtype.Int32).unsqueeze(0)
            Assert.CheckEqual(tk2s3iCorrect, tk2s3i)
            Assert.CheckEqual(tk2s3Correct, tk2s3)

            let tk2s3p1, tk2s3p1i = dsharp.maxpool3di(t, 2, stride=3, padding=1)
            let tk2s3p1Correct = combo.tensor([[[[ 0.4633,  0.4568],
                                                    [ 0.8156,  1.3066]],
                                         
                                                   [[ 0.2996,  0.2835],
                                                    [ 2.0900,  1.2851]]],
                                         
                                         
                                                  [[[-1.2563,  1.0405],
                                                    [ 1.2176,  1.1689]],
                                         
                                                   [[ 0.8200,  2.1774],
                                                    [ 0.5255,  1.7098]]]]).unsqueeze(0)
            let tk2s3p1iCorrect = combo.tensor([[[[ 0,  2],
                                                    [15, 17]],
                                         
                                                   [[50, 53],
                                                    [90, 67]]],
                                         
                                         
                                                  [[[ 0,  2],
                                                    [15, 18]],
                                         
                                                   [[50, 78],
                                                    [90, 88]]]], dtype=Dtype.Int32).unsqueeze(0)
            Assert.CheckEqual(tk2s3p1iCorrect, tk2s3p1i)
            Assert.CheckEqual(tk2s3p1Correct, tk2s3p1)

        for combo in Combos.IntegralAndBool do 
            let x = combo.zeros([4;4;4;4;4])
            isInvalidOp(fun () -> dsharp.maxpool3d(x,3))

    [<Test>]
    member _.TestTensorMaxUnpool1D () =
        for combo in Combos.IntegralAndFloatingPointExcept16s do
            let tk3 = combo.tensor([[[ 2.5995,  1.3858,  0.9593],
                                      [ 0.4564,  0.4587,  1.1539]],
                             
                                     [[ 0.9980,  0.1321,  1.0608],
                                      [ 1.1872, -0.2067,  0.6039]]])
            let tk3i = combo.tensor([[[2, 3, 6],
                                          [0, 3, 8]],
                                 
                                         [[2, 3, 6],
                                          [0, 3, 6]]], dtype=Dtype.Int32)
            let tk3u = dsharp.maxunpool1d(tk3, tk3i, 3)
            let tk3uCorrect = combo.tensor([[[ 0.0000,  0.0000,  2.5995,  1.3858,  0.0000,  0.0000,  0.9593,  0.0000,  0.0000],
                                             [ 0.4564,  0.0000,  0.0000,  0.4587,  0.0000,  0.0000,  0.0000,  0.0000,  1.1539]],

                                            [[ 0.0000,  0.0000,  0.9980,  0.1321,  0.0000,  0.0000,  1.0608,  0.0000,  0.0000],
                                             [ 1.1872,  0.0000,  0.0000, -0.2067,  0.0000,  0.0000,  0.6039,  0.0000,  0.0000]]])
            Assert.CheckEqual(tk3uCorrect, tk3u)

            let tk3p1 = combo.tensor([[[-1.1558,  2.5995,  0.9593,  0.7169],
                                            [ 0.4564,  0.4587,  0.6288,  1.1539]],
                                   
                                           [[ 0.7151,  0.9980,  1.0608,  1.6387],
                                            [ 1.1872, -0.0297,  0.6039,  1.2069]]])
            let tk3p1i = combo.tensor([[[1, 2, 6, 8],
                                                [0, 3, 7, 8]],
                                       
                                               [[1, 2, 6, 9],
                                                [0, 2, 6, 9]]], dtype=Dtype.Int32)
            let tk3p1u = dsharp.maxunpool1d(tk3p1, tk3p1i, 3, padding=1)
            let tk3p1uCorrect = combo.tensor([[[ 0.0000, -1.1558,  2.5995,  0.0000,  0.0000,  0.0000,  0.9593,
                                                   0.0000,  0.7169,  0.0000],
                                                 [ 0.4564,  0.0000,  0.0000,  0.4587,  0.0000,  0.0000,  0.0000,
                                                   0.6288,  1.1539,  0.0000]],

                                                [[ 0.0000,  0.7151,  0.9980,  0.0000,  0.0000,  0.0000,  1.0608,
                                                   0.0000,  0.0000,  1.6387],
                                                 [ 1.1872,  0.0000, -0.0297,  0.0000,  0.0000,  0.0000,  0.6039,
                                                   0.0000,  0.0000,  1.2069]]])
            Assert.CheckEqual(tk3p1uCorrect, tk3p1u)

            let tk3s2 = combo.tensor([[[ 2.5995,  2.5995,  0.9593,  0.9593],
                                              [ 0.4564,  0.4587,  0.2978,  1.1539]],
                                     
                                             [[ 0.9980,  0.9980,  1.0608,  1.0608],
                                              [ 1.1872, -0.0297,  0.6039,  0.6039]]])
            let tk3s2i = combo.tensor([[[2, 2, 6, 6],
                                                  [0, 3, 6, 8]],
                                         
                                                 [[2, 2, 6, 6],
                                                  [0, 2, 6, 6]]], dtype=Dtype.Int32)
            let tk3s2u = dsharp.maxunpool1d(tk3s2, tk3s2i, 3, stride=2)
            let tk3s2uCorrect = combo.tensor([[[ 0.0000,  0.0000,  2.5995,  0.0000,  0.0000,  0.0000,  0.9593,
                                                   0.0000,  0.0000],
                                                 [ 0.4564,  0.0000,  0.0000,  0.4587,  0.0000,  0.0000,  0.2978,
                                                   0.0000,  1.1539]],

                                                [[ 0.0000,  0.0000,  0.9980,  0.0000,  0.0000,  0.0000,  1.0608,
                                                   0.0000,  0.0000],
                                                 [ 1.1872,  0.0000, -0.0297,  0.0000,  0.0000,  0.0000,  0.6039,
                                                   0.0000,  0.0000]]])
            Assert.CheckEqual(tk3s2uCorrect, tk3s2u)

            let tk4s3p2 = combo.tensor([[[-1.1558,  2.5995,  0.9593,  0.7169],
                                              [ 0.4564,  0.4587,  0.6288,  1.1539]],
                                     
                                             [[ 0.7151,  0.9980,  1.0608,  1.6387],
                                              [ 1.1872, -0.0297,  0.6039,  1.2069]]])
            let tk4s3p2i = combo.tensor([[[1, 2, 6, 8],
                                                  [0, 3, 7, 8]],
                                         
                                                 [[1, 2, 6, 9],
                                                  [0, 2, 6, 9]]], dtype=Dtype.Int32)
            let tk4s3p2u = dsharp.maxunpool1d(tk4s3p2, tk4s3p2i, 4, stride=3, padding=2, outputSize=[2;2;10])
            let tk4s3p2uCorrect = combo.tensor([[[ 0.0000, -1.1558,  2.5995,  0.0000,  0.0000,  0.0000,  0.9593,
                                                   0.0000,  0.7169,  0.0000],
                                                 [ 0.4564,  0.0000,  0.0000,  0.4587,  0.0000,  0.0000,  0.0000,
                                                   0.6288,  1.1539,  0.0000]],

                                                [[ 0.0000,  0.7151,  0.9980,  0.0000,  0.0000,  0.0000,  1.0608,
                                                   0.0000,  0.0000,  1.6387],
                                                 [ 1.1872,  0.0000, -0.0297,  0.0000,  0.0000,  0.0000,  0.6039,
                                                   0.0000,  0.0000,  1.2069]]])
            Assert.CheckEqual(tk4s3p2uCorrect, tk4s3p2u)

    [<Test>]
    member _.TestTensorMaxUnpool2D () =
        for combo in Combos.IntegralAndFloatingPointExcept16s do
            let tk3 = combo.tensor([[[[1.8489, 1.1338],
                                              [0.6819, 1.6331]],

                                             [[1.0867, 2.1048],
                                              [2.7646, 1.0156]]],


                                            [[[2.1120, 0.8666],
                                              [0.9141, 1.7133]],

                                             [[1.4250, 1.8228],
                                              [1.2607, 0.5448]]]])
            let tk3i = combo.tensor([[[[10, 21],
                                                  [41, 45]],

                                                 [[ 8,  5],
                                                  [40, 28]]],


                                                [[[ 8, 21],
                                                  [32, 36]],

                                                 [[ 9, 13],
                                                  [25, 27]]]], dtype=Dtype.Int32)
            let tk3u = dsharp.maxunpool2d(tk3, tk3i, 3, outputSize=[2;2;8;8])
            let tk3uCorrect = combo.tensor([[[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 1.8489, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.1338, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.6819, 0.0000, 0.0000, 0.0000, 1.6331, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                             [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2.1048, 0.0000, 0.0000],
                                              [1.0867, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 1.0156, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [2.7646, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]],


                                            [[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [2.1120, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.8666, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.9141, 0.0000, 0.0000, 0.0000, 1.7133, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                             [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 1.4250, 0.0000, 0.0000, 0.0000, 1.8228, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 1.2607, 0.0000, 0.5448, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]]])
            Assert.CheckEqual(tk3uCorrect, tk3u)

            let tk3p1 = combo.tensor([[[[0.7372, 1.8489, 0.3801],
                                              [0.6883, 1.0254, 1.1338],
                                              [0.6819, 1.0146, 1.6331]],

                                             [[1.0867, 1.7527, 2.1048],
                                              [2.2070, 1.0156, 1.2660],
                                              [2.7646, 1.3832, 2.5090]]],


                                            [[[2.1120, 0.2085, 1.0594],
                                              [0.9141, 1.7133, 1.2406],
                                              [0.3855, 1.4428, 0.6534]],

                                             [[1.4250, 1.7200, 1.8228],
                                              [1.2607, 0.6599, 1.8958],
                                              [0.6304, 1.5875, 0.4057]]]])
            let tk3p1i = combo.tensor([[[[ 0, 10,  6],
                                                  [16, 36, 21],
                                                  [41, 59, 45]],

                                                 [[ 8,  3,  5],
                                                  [33, 28, 23],
                                                  [40, 52, 47]]],


                                                [[[ 8,  2,  6],
                                                  [32, 36, 37],
                                                  [49, 60, 45]],

                                                 [[ 9,  4, 13],
                                                  [25, 19, 38],
                                                  [56, 60, 47]]]], dtype=Dtype.Int32)
            let tk3p1u = dsharp.maxunpool2d(tk3p1, tk3p1i, 3, padding=1, outputSize=[2;2;8;8])
            let tk3p1uCorrect = combo.tensor([[[[0.7372, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.3801, 0.0000],
                                                  [0.0000, 0.0000, 1.8489, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.6883, 0.0000, 0.0000, 0.0000, 0.0000, 1.1338, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.0254, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.6819, 0.0000, 0.0000, 0.0000, 1.6331, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 1.0146, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                 [[0.0000, 0.0000, 0.0000, 1.7527, 0.0000, 2.1048, 0.0000, 0.0000],
                                                  [1.0867, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.2660],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.0156, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 2.2070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [2.7646, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2.5090],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.3832, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]],


                                                [[[0.0000, 0.0000, 0.2085, 0.0000, 0.0000, 0.0000, 1.0594, 0.0000],
                                                  [2.1120, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.9141, 0.0000, 0.0000, 0.0000, 1.7133, 1.2406, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.6534, 0.0000, 0.0000],
                                                  [0.0000, 0.3855, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.4428, 0.0000, 0.0000, 0.0000]],

                                                 [[0.0000, 0.0000, 0.0000, 0.0000, 1.7200, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 1.4250, 0.0000, 0.0000, 0.0000, 1.8228, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.6599, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 1.2607, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.8958, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4057],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.6304, 0.0000, 0.0000, 0.0000, 1.5875, 0.0000, 0.0000, 0.0000]]]])
            Assert.CheckEqual(tk3p1uCorrect, tk3p1u)

            let tk3s2 = combo.tensor([[[[1.8489, 1.8489, 1.1338],
                                              [0.6883, 1.0254, 1.1338],
                                              [0.6819, 1.0254, 1.6331]],

                                             [[1.0867, 1.7527, 2.1048],
                                              [2.2070, 1.0156, 1.0156],
                                              [2.7646, 1.3832, 1.3832]]],


                                            [[[2.1120, 0.2085, 1.0594],
                                              [0.9141, 1.7133, 1.7133],
                                              [0.9141, 1.7133, 1.7133]],

                                             [[1.4250, 1.7200, 1.8228],
                                              [1.2607, 0.6599, 1.8958],
                                              [1.2130, 1.2130, 1.8958]]]])
            let tk3s2i = combo.tensor([[[[10, 10, 21],
                                                  [16, 36, 21],
                                                  [41, 36, 45]],

                                                 [[ 8,  3,  5],
                                                  [33, 28, 28],
                                                  [40, 52, 52]]],


                                                [[[ 8,  2,  6],
                                                  [32, 36, 36],
                                                  [32, 36, 36]],

                                                 [[ 9,  4, 13],
                                                  [25, 19, 38],
                                                  [50, 50, 38]]]], dtype=Dtype.Int32)
            let tk3s2u = dsharp.maxunpool2d(tk3s2, tk3s2i, 3, stride=2, outputSize=[2;2;8;8])
            let tk3s2uCorrect = combo.tensor([[[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 1.8489, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.6883, 0.0000, 0.0000, 0.0000, 0.0000, 1.1338, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.0254, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.6819, 0.0000, 0.0000, 0.0000, 1.6331, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                 [[0.0000, 0.0000, 0.0000, 1.7527, 0.0000, 2.1048, 0.0000, 0.0000],
                                                  [1.0867, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.0156, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 2.2070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [2.7646, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.3832, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]],


                                                [[[0.0000, 0.0000, 0.2085, 0.0000, 0.0000, 0.0000, 1.0594, 0.0000],
                                                  [2.1120, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.9141, 0.0000, 0.0000, 0.0000, 1.7133, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                 [[0.0000, 0.0000, 0.0000, 0.0000, 1.7200, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 1.4250, 0.0000, 0.0000, 0.0000, 1.8228, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.6599, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 1.2607, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.8958, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 1.2130, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]]])
            Assert.CheckEqual(tk3s2uCorrect, tk3s2u)

            let tk4s3p2 = combo.tensor([[[[0.7372, 1.8489, 1.0141],
                                              [0.6883, 1.8489, 1.1338],
                                              [0.6819, 1.0254, 1.6331]],

                                             [[1.0867, 1.7527, 2.1048],
                                              [2.2070, 2.2070, 1.4476],
                                              [2.7646, 2.2070, 2.5090]]],


                                            [[[2.1120, 0.4063, 1.0594],
                                              [2.1120, 1.7133, 1.7133],
                                              [0.9141, 1.7133, 1.7133]],

                                             [[1.4250, 1.7200, 1.8228],
                                              [1.4250, 1.4250, 1.8958],
                                              [0.6304, 1.5875, 1.8958]]]])
            let tk4s3p2i = combo.tensor([[[[ 0, 10,  4],
                                                      [16, 10, 21],
                                                      [41, 36, 45]],

                                                     [[ 8,  3,  5],
                                                      [33, 33, 15],
                                                      [40, 33, 47]]],


                                                    [[[ 8,  1,  6],
                                                      [ 8, 36, 36],
                                                      [32, 36, 36]],

                                                     [[ 9,  4, 13],
                                                      [ 9,  9, 38],
                                                      [56, 60, 38]]]], dtype=Dtype.Int32)
            let tk4s3p2u = dsharp.maxunpool2d(tk4s3p2, tk4s3p2i, 4, stride=3, padding=2, outputSize=[2;2;8;8])
            let tk4s3p2uCorrect = combo.tensor([[[[0.7372, 0.0000, 0.0000, 0.0000, 1.0141, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 1.8489, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.6883, 0.0000, 0.0000, 0.0000, 0.0000, 1.1338, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 1.0254, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.6819, 0.0000, 0.0000, 0.0000, 1.6331, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                 [[0.0000, 0.0000, 0.0000, 1.7527, 0.0000, 2.1048, 0.0000, 0.0000],
                                                  [1.0867, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.4476],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 2.2070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [2.7646, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2.5090],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]],


                                                [[[0.0000, 0.4063, 0.0000, 0.0000, 0.0000, 0.0000, 1.0594, 0.0000],
                                                  [2.1120, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.9141, 0.0000, 0.0000, 0.0000, 1.7133, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                 [[0.0000, 0.0000, 0.0000, 0.0000, 1.7200, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 1.4250, 0.0000, 0.0000, 0.0000, 1.8228, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.8958, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                  [0.6304, 0.0000, 0.0000, 0.0000, 1.5875, 0.0000, 0.0000, 0.0000]]]])
            Assert.CheckEqual(tk4s3p2uCorrect, tk4s3p2u)


    [<Test>]
    member _.TestTensorMaxUnpool3D () =
        for combo in Combos.IntegralAndFloatingPointExcept16s do
            let tk2 = combo.tensor([[[[1.5542, 0.5720],
                                        [1.5415, 1.3066]],
                             
                                       [[1.1442, 1.3531],
                                        [2.0900, 1.2851]]],
                             
                             
                                      [[[2.0711, 1.2451],
                                        [1.2176, 1.1689]],
                             
                                       [[2.2379, 2.4069],
                                        [0.5255, 1.7098]]]]).unsqueeze(0)
            let tk2i = combo.tensor([[[[ 6,  7],
                                        [16, 17]],
                             
                                       [[76, 82],
                                        [90, 67]]],
                             
                             
                                      [[[ 5, 32],
                                        [15, 18]],
                             
                                       [[56, 83],
                                        [90, 88]]]], dtype=Dtype.Int32).unsqueeze(0)
            let tk2u = dsharp.maxunpool3d(tk2, tk2i, 2, outputSize=[1;2;5;5;5])
            let tk2uCorrect = combo.tensor([[[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 1.5542, 0.5720, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 1.5415, 1.3066, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 1.2851, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 1.1442, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 1.3531, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [2.0900, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]],


                                             [[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [2.0711, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [1.2176, 0.0000, 0.0000, 1.1689, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 1.2451, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 2.2379, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 2.4069, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 1.7098, 0.0000],
                                               [0.5255, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                              [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]]]).unsqueeze(0)
            Assert.CheckEqual(tk2uCorrect, tk2u)

            let tk2p1 = combo.tensor([[[[ 0.4633,  0.9173, -0.1077],
                                                [ 0.3505,  1.5542,  1.2303],
                                                [ 0.8156,  1.5936,  0.2060]],
                                     
                                               [[ 0.2996,  0.5738,  0.6299],
                                                [ 1.0910, -0.0037,  1.2910],
                                                [ 0.1940,  1.2939,  1.3469]],
                                     
                                               [[ 1.0358,  1.6584,  1.5641],
                                                [ 0.4032,  1.3531,  1.1186],
                                                [ 2.2015,  1.0479,  1.8761]]],
                                     
                                     
                                              [[[-1.2563,  1.0405,  0.7333],
                                                [ 2.0711,  1.0576,  1.1195],
                                                [ 1.2176,  0.3765,  1.8267]],
                                     
                                               [[ 1.2927,  1.8860,  0.8106],
                                                [ 0.7614,  2.2379,  1.4035],
                                                [ 0.4963,  2.5382,  1.9080]],
                                     
                                               [[ 0.5853,  1.9343,  2.1774],
                                                [ 1.2673,  1.3343,  2.4069],
                                                [ 0.5255,  0.2564,  1.5519]]]]).unsqueeze(0)
            let tk2p1i = combo.tensor([[[[  0,   1,   4],
                                                    [ 10,   6,  14],
                                                    [ 15,  21,  19]],
                                         
                                                   [[ 50,  51,  29],
                                                    [ 60,  62,  34],
                                                    [ 40,  72,  73]],
                                         
                                                   [[100, 101, 104],
                                                    [105,  82,  89],
                                                    [ 95,  91,  94]]],
                                         
                                         
                                                  [[[  0,   2,   4],
                                                    [  5,  12,   9],
                                                    [ 15,  21,  23]],
                                         
                                                   [[ 25,  51,  28],
                                                    [ 30,  56,  59],
                                                    [ 65,  71,  73]],
                                         
                                                   [[ 75,  76,  78],
                                                    [105, 111,  83],
                                                    [ 90,  91,  93]]]], dtype=Dtype.Int32).unsqueeze(0)
            let tk2p1u = dsharp.maxunpool3d(tk2p1, tk2p1i, 2, padding=1, outputSize=[1;2;5;5;5])
            let tk2p1uCorrect = combo.tensor([[[[ 0.4633,  0.9173,  0.0000,  0.0000, -0.1077],
                                                   [ 0.0000,  1.5542,  0.0000,  0.0000,  0.0000],
                                                   [ 0.3505,  0.0000,  0.0000,  0.0000,  1.2303],
                                                   [ 0.8156,  0.0000,  0.0000,  0.0000,  0.2060],
                                                   [ 0.0000,  1.5936,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.6299],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  1.2910],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.1940,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.2996,  0.5738,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 1.0910,  0.0000, -0.0037,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  1.2939,  1.3469,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  1.3531,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  1.1186],
                                                   [ 0.0000,  1.0479,  0.0000,  0.0000,  1.8761],
                                                   [ 2.2015,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 1.0358,  1.6584,  0.0000,  0.0000,  1.5641],
                                                   [ 0.4032,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]]],


                                                 [[[-1.2563,  0.0000,  1.0405,  0.0000,  0.7333],
                                                   [ 2.0711,  0.0000,  0.0000,  0.0000,  1.1195],
                                                   [ 0.0000,  0.0000,  1.0576,  0.0000,  0.0000],
                                                   [ 1.2176,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.3765,  0.0000,  1.8267,  0.0000]],

                                                  [[ 1.2927,  0.0000,  0.0000,  0.8106,  0.0000],
                                                   [ 0.7614,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  1.8860,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  2.2379,  0.0000,  0.0000,  1.4035],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.4963,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  2.5382,  0.0000,  1.9080,  0.0000]],

                                                  [[ 0.5853,  1.9343,  0.0000,  2.1774,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  2.4069,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.5255,  0.2564,  0.0000,  1.5519,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 1.2673,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  1.3343,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]]]]).unsqueeze(0)
            Assert.CheckEqual(tk2p1uCorrect, tk2p1u)

            let tk2s3 = combo.tensor([[[[1.5542, 1.2910],
                                            [1.5936, 1.0687]],
                                 
                                           [[1.6584, 1.5641],
                                            [2.2015, 1.8761]]],
                                 
                                 
                                          [[[2.0711, 1.1195],
                                            [1.2176, 1.8941]],
                                 
                                           [[1.9343, 2.4069],
                                            [0.5255, 1.5519]]]]).unsqueeze(0)
            let tk2s3i = combo.tensor([[[[  6,  34],
                                                    [ 21,  43]],
                                         
                                                   [[101, 104],
                                                    [ 95,  94]]],
                                         
                                         
                                                  [[[  5,   9],
                                                    [ 15,  44]],
                                         
                                                   [[ 76,  83],
                                                    [ 90,  93]]]], dtype=Dtype.Int32).unsqueeze(0)
            let tk2s3u = dsharp.maxunpool3d(tk2s3, tk2s3i, 2, stride=3, outputSize=[1;2;5;5;5])
            let tk2s3uCorrect = combo.tensor([[[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 1.5542, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 1.5936, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 1.2910],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 1.0687, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 1.8761],
                                                   [2.2015, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 1.6584, 0.0000, 0.0000, 1.5641],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]],


                                                 [[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [2.0711, 0.0000, 0.0000, 0.0000, 1.1195],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [1.2176, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 1.8941],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 1.9343, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 2.4069, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.5255, 0.0000, 0.0000, 1.5519, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],

                                                  [[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                                                   [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]]]).unsqueeze(0)
            Assert.CheckEqual(tk2s3uCorrect, tk2s3u)

            let tk2s3p1 = combo.tensor([[[[ 0.4633,  0.4568],
                                                [ 0.8156,  1.3066]],
                                     
                                               [[ 0.2996,  0.2835],
                                                [ 2.0900,  1.2851]]],
                                     
                                     
                                              [[[-1.2563,  1.0405],
                                                [ 1.2176,  1.1689]],
                                     
                                               [[ 0.8200,  2.1774],
                                                [ 0.5255,  1.7098]]]]).unsqueeze(0)
            let tk2s3p1i = combo.tensor([[[[ 0,  2],
                                                    [15, 17]],
                                         
                                                   [[50, 53],
                                                    [90, 67]]],
                                         
                                         
                                                  [[[ 0,  2],
                                                    [15, 18]],
                                         
                                                   [[50, 78],
                                                    [90, 88]]]], dtype=Dtype.Int32).unsqueeze(0)
            let tk2s3p1u = dsharp.maxunpool3d(tk2s3p1, tk2s3p1i, 2, stride=3, padding=1, outputSize=[1;2;5;5;5])
            let tk2s3p1uCorrect = combo.tensor([[[[ 0.4633,  0.0000,  0.4568,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.8156,  0.0000,  1.3066,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.2996,  0.0000,  0.0000,  0.2835,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  1.2851,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 2.0900,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]]],


                                                 [[[-1.2563,  0.0000,  1.0405,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 1.2176,  0.0000,  0.0000,  1.1689,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.8200,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  2.1774,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  1.7098,  0.0000],
                                                   [ 0.5255,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],

                                                  [[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                                                   [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000]]]]).unsqueeze(0)
            Assert.CheckEqual(tk2s3p1uCorrect, tk2s3p1u)

