// Copyright (c) 2016-     University of Oxford (Atilim Gunes Baydin <gunes@robots.ox.ac.uk>)
// and other contributors, see LICENSE in root of repository.
//
// BSD 2-Clause License. See LICENSE in root of repository.

namespace Tests

open NUnit.Framework
open DiffSharp

[<TestFixture>]
type TestTensorConvolutions () =

    [<Test>]
    member _.TestTensorConv1D () =
        for combo in Combos.FloatingPointExcept16s do 
            let t1 = combo.tensor([[[0.3460; 0.4414; 0.2384; 0.7905; 0.2267];
                                    [0.5161; 0.9032; 0.6741; 0.6492; 0.8576];
                                    [0.3373; 0.0863; 0.8137; 0.2649; 0.7125];
                                    [0.7144; 0.1020; 0.0437; 0.5316; 0.7366]];

                                    [[0.9871; 0.7569; 0.4329; 0.1443; 0.1515];
                                     [0.5950; 0.7549; 0.8619; 0.0196; 0.8741];
                                     [0.4595; 0.7844; 0.3580; 0.6469; 0.7782];
                                     [0.0130; 0.8869; 0.8532; 0.2119; 0.8120]];

                                    [[0.5163; 0.5590; 0.5155; 0.1905; 0.4255];
                                     [0.0823; 0.7887; 0.8918; 0.9243; 0.1068];
                                     [0.0337; 0.2771; 0.9744; 0.0459; 0.4082];
                                     [0.9154; 0.2569; 0.9235; 0.9234; 0.3148]]])
            let t2 = combo.tensor([[[0.4941; 0.8710; 0.0606];
                                    [0.2831; 0.7930; 0.5602];
                                    [0.0024; 0.1236; 0.4394];
                                    [0.9086; 0.1277; 0.2450]];

                                   [[0.5196; 0.1349; 0.0282];
                                    [0.1749; 0.6234; 0.5502];
                                    [0.7678; 0.0733; 0.3396];
                                    [0.6023; 0.6546; 0.3439]]])

            let t3 = dsharp.conv1d(t1, t2)
            let t3Correct = combo.tensor([[[2.8516; 2.0732; 2.6420];
                                           [2.3239; 1.7078; 2.7450]];

                                          [[3.0127; 2.9651; 2.5219];
                                           [3.0899; 3.1496; 2.4110]];

                                          [[3.4749; 2.9038; 2.7131];
                                           [2.7692; 2.9444; 3.2554]]])

            Assert.True(t3.allclose(t3Correct, 0.01))

            let t3p1 = dsharp.conv1d(t1, t2, padding=1)
            let t3p1Correct = combo.tensor([[[1.4392; 2.8516; 2.0732; 2.6420; 2.1177];
                                             [1.4345; 2.3239; 1.7078; 2.7450; 2.1474]];

                                            [[2.4208; 3.0127; 2.9651; 2.5219; 1.2960];
                                             [1.5544; 3.0899; 3.1496; 2.4110; 1.8567]];

                                            [[1.2965; 3.4749; 2.9038; 2.7131; 1.7408];
                                             [1.3549; 2.7692; 2.9444; 3.2554; 1.2120]]])

            Assert.True(t3p1.allclose(t3p1Correct, 0.01))

            let t3p2 = dsharp.conv1d(t1, t2, padding=2)
            let t3p2Correct = combo.tensor([[[0.6333; 1.4392; 2.8516; 2.0732; 2.6420; 2.1177; 1.0258];
                                             [0.6539; 1.4345; 2.3239; 1.7078; 2.7450; 2.1474; 1.2585]];

                                            [[0.5982; 2.4208; 3.0127; 2.9651; 2.5219; 1.2960; 1.0620];
                                             [0.5157; 1.5544; 3.0899; 3.1496; 2.4110; 1.8567; 1.3182]];

                                            [[0.3165; 1.2965; 3.4749; 2.9038; 2.7131; 1.7408; 0.5275];
                                             [0.3861; 1.3549; 2.7692; 2.9444; 3.2554; 1.2120; 0.7428]]])

            Assert.True(t3p2.allclose(t3p2Correct, 0.01))

            let t3s2 = dsharp.conv1d(t1, t2, stride=2)
            let t3s2Correct = combo.tensor([[[2.8516; 2.6420];
                                             [2.3239; 2.7450]];

                                            [[3.0127; 2.5219];
                                             [3.0899; 2.4110]];

                                            [[3.4749; 2.7131];
                                             [2.7692; 3.2554]]])

            Assert.True(t3s2.allclose(t3s2Correct, 0.01))

            let t3s3 = dsharp.conv1d(t1, t2, stride=3)
            let t3s3Correct = combo.tensor([[[2.8516];
                                             [2.3239]];

                                            [[3.0127];
                                             [3.0899]];

                                            [[3.4749];
                                             [2.7692]]])

            Assert.True(t3s3.allclose(t3s3Correct, 0.01))

            let t3s2p1 = dsharp.conv1d(t1, t2, stride=2, padding=1)
            let t3s2p1Correct = combo.tensor([[[1.4392; 2.0732; 2.1177];
                                                 [1.4345; 1.7078; 2.1474]];

                                                [[2.4208; 2.9651; 1.2960];
                                                 [1.5544; 3.1496; 1.8567]];

                                                [[1.2965; 2.9038; 1.7408];
                                                 [1.3549; 2.9444; 1.2120]]])

            Assert.True(t3s2p1.allclose(t3s2p1Correct, 0.01))

            let t3s3p2 = dsharp.conv1d(t1, t2, stride=3, padding=2)
            let t3s3p2Correct = combo.tensor([[[0.6333; 2.0732; 1.0258];
                                                 [0.6539; 1.7078; 1.2585]];

                                                [[0.5982; 2.9651; 1.0620];
                                                 [0.5157; 3.1496; 1.3182]];

                                                [[0.3165; 2.9038; 0.5275];
                                                 [0.3861; 2.9444; 0.7428]]])
        
            Assert.True(t3s3p2.allclose(t3s3p2Correct, 0.01))

            let t3d2 = dsharp.conv1d(t1, t2, dilation=2)
            let t3d2Correct = combo.tensor([[[2.8030];
                                             [2.4735]];

                                            [[2.9226];
                                             [3.1868]];

                                            [[2.8469];
                                             [2.4790]]])

            Assert.True(t3d2.allclose(t3d2Correct, 0.01))

            let t3p2d3 = dsharp.conv1d(t1, t2, padding=2, dilation=3)
            let t3p2d3Correct = combo.tensor([[[2.1121; 0.8484; 2.2709];
                                                 [1.6692; 0.5406; 1.8381]];

                                                [[2.5078; 1.2137; 0.9173];
                                                 [2.2395; 1.1805; 1.1954]];

                                                [[1.5215; 1.3946; 2.1327];
                                                 [1.0732; 1.3014; 2.0696]]])

            Assert.True(t3p2d3.allclose(t3p2d3Correct, 0.01))

            let t3s3p6d3 = dsharp.conv1d(t1, t2, stride=3, padding=6, dilation=3)
            let t3s3p6d3Correct = combo.tensor([[[0.6333; 1.5018; 2.2709; 1.0580];
                                                 [0.6539; 1.5130; 1.8381; 1.0479]];

                                                [[0.5982; 1.7459; 0.9173; 0.2709];
                                                 [0.5157; 0.8537; 1.1954; 0.7027]];

                                                [[0.3165; 1.4118; 2.1327; 1.1949];
                                                 [0.3861; 1.5697; 2.0696; 0.8520]]])

            Assert.True(t3s3p6d3.allclose(t3s3p6d3Correct, 0.01))

            let t3b1 = t1.[0].unsqueeze(0).conv1d(t2)
            let t3b1Correct = t3Correct.[0].unsqueeze(0)
            Assert.True(t3b1.allclose(t3b1Correct, 0.01))

            let t3b1s2 = t1.[0].unsqueeze(0).conv1d(t2, stride = 2)
            let t3b1s2Correct = t3s2Correct.[0].unsqueeze(0)

            Assert.True(t3b1s2.allclose(t3b1s2Correct, 0.01))

        for combo in Combos.Integral do 
            let x = combo.ones([1;4;4])
            let y = combo.ones([1;4;4])
            let z = dsharp.conv1d(x,y)
            let zCorrect = combo.tensor([[[16]]])
            Assert.CheckEqual(z, zCorrect)
               

        // check types must always match
        for dtype1 in Dtypes.All do 
            for dtype2 in Dtypes.All do 
                if dtype1 <> dtype2 then 
                    let x = dsharp.zeros([1;4;4], dtype=dtype1)
                    let y = dsharp.zeros([1;4;4], dtype=dtype2)
                    isException(fun () -> dsharp.conv1d(x,y))

        for combo in Combos.Bool do 
            let x = combo.zeros([1;4;4])
            let y = combo.zeros([1;4;4])
            isInvalidOp(fun () -> dsharp.conv1d(x,y))

    [<Test>]
    member _.TestTensorConv2D () =
        for combo in Combos.FloatingPointExcept16s do 
            let t1 = combo.tensor([[[[ 10.7072,  -5.0993,   3.6884,   2.0982],
                                     [ -6.4356,   0.6351,  -2.3156,  -1.3384],
                                     [ -5.1846,   0.6805, -14.1961,   0.8657],
                                     [ -8.8655,  -7.1694,  -3.4903,  -2.9479]],

                                    [[  2.5630,  -2.2935,  -0.8665,   6.7999],
                                     [  1.8098,   3.2082,   2.3160,  -4.7734],
                                     [ 14.7205,   0.9631,   8.1039,   6.7437],
                                     [  3.7847,  -5.9792,  -2.7371,  -7.8548]]],


                                   [[[  3.5499,   0.9546,  -7.5715,   2.8211],
                                     [ -1.2659,   5.2366,  -7.2322,  -5.8877],
                                     [ -2.8041,   2.1746,   2.2397,   0.1242],
                                     [  1.8172,  -0.3989,  -0.2394,   7.1078]],

                                    [[ -3.7765,   2.1584,   6.8627,  -4.1471],
                                     [  4.6748,   7.9756,  -6.0065,   2.0826],
                                     [  5.1038,  -5.5801,  -4.4420,  -2.9498],
                                     [  0.1037,   4.6578,   3.0760,  -4.9566]]]])
            let t2 = combo.tensor([[[[-5.6745, -1.9422,  4.1369],
                                     [ 4.4623,  4.8385,  0.8345],
                                     [ 1.3015,  0.0708,  3.8132]],

                                     [[ 0.9448, -1.9028, -8.0195],
                                      [-5.3200,  0.4264, -1.2142],
                                      [ 1.4442, -7.3623, 14.5340]]],


                                    [[[-3.3486, -3.2725, -3.4595],
                                      [-5.0818, -0.5769, -3.5363],
                                      [ 3.1498,  0.6293, -1.2527]],

                                     [[ 3.2029,  3.9409, 12.6924],
                                      [ 4.1056, -3.2890,  2.4071],
                                      [ 4.2373, -1.8852,  4.4640]]],


                                    [[[ 4.0582, -4.6075,  6.2574],
                                      [-0.9867,  3.4303, -1.9686],
                                      [-5.0618,  5.0045, -2.0878]],

                                     [[ 1.0605, -3.2697, -1.9856],
                                      [-6.5763, -6.3535,  7.2228],
                                      [15.1009,  4.9045,  5.1197]]]])

            let t3 = dsharp.conv2d(t1, t2)
            let t3Correct = combo.tensor([[[[  10.6089;   -1.4459];
                                            [-132.3437; -165.9882]];

                                             [[  97.8425;   81.2322];
                                              [ 215.2763; -112.2244]];

                                             [[ 427.2891; -101.3674];
                                              [ -35.6012; -168.9572]]];


                                            [[[-127.6157;  -35.6266];
                                              [  -7.7668;  -47.1349]];

                                             [[ 104.2333;   28.7020];
                                              [  27.1404;    8.1246]];

                                             [[-106.0468;  -94.3428];
                                              [ -78.6259;  136.6283]]]])

            let t3p1 = dsharp.conv2d(t1, t2, padding=1)
            let t3p1Correct = combo.tensor([[[[  86.6988;    8.1164;  -85.8172;   69.5001];
                                              [-154.2592;   10.6089;   -1.4459; -126.2889];
                                              [-176.1860; -132.3437; -165.9882;  -23.2585];
                                              [ -62.8550; -180.0650;  -52.4599;   55.0733]];

                                             [[   3.9697;  -53.5450;   16.3075;  -35.2008];
                                              [ -60.7372;   97.8425;   81.2322;   20.0075];
                                              [  -9.2216;  215.2763; -112.2244;   73.8351];
                                              [  88.4748;  308.1942;  176.2158;  131.2712]];

                                             [[   5.6857;   51.6497;  106.6138;  -17.3603];
                                              [ -46.9604;  427.2891; -101.3674;  226.5788];
                                              [-125.8047;  -35.6012; -168.9572; -141.2721];
                                              [-105.4274; -132.2796;   35.6026;  -13.8173]]];


                                            [[[ 115.1200; -141.3008;   36.3188;  -92.2498];
                                              [-133.0979; -127.6157;  -35.6266;   42.1693];
                                              [  14.0058;   -7.7668;  -47.1349;  116.9311];
                                              [  52.3284;   75.6948;   -3.7964;    3.3106]];

                                             [[  31.6266;  -11.5726;   39.5819;   22.8020];
                                              [ -55.3912;  104.2333;   28.7020;   24.2710];
                                              [  91.6285;   27.1404;    8.1246;   38.5616];
                                              [ -37.8251;  -83.1444; -113.7539;   -7.7113]];

                                             [[  96.3737;  202.0389;  -68.9841;  -74.9820];
                                              [ -11.1773; -106.0468;  -94.3428; -101.9384];
                                              [ -44.8701;  -78.6259;  136.6283;   89.6921];
                                              [  60.9218;   14.3467;  -86.6495;   49.3313]]]])

            let t3p12 = dsharp.conv2d(t1, t2, paddings=[|1; 2|])
            let t3p12Correct = combo.tensor([[[[   7.5867;   86.6988;    8.1164;  -85.8172;   69.5001;  -35.4485];
                                              [ 210.3501; -154.2592;   10.6089;   -1.4459; -126.2889;   24.8066];
                                              [ -42.1367; -176.1860; -132.3437; -165.9882;  -23.2585;  -44.1093];
                                              [-151.4929;  -62.8550; -180.0650;  -52.4599;   55.0733;   30.0922]];

                                             [[ -15.5535;    3.9697;  -53.5450;   16.3075;  -35.2008;   -7.1871];
                                              [  94.8112;  -60.7372;   97.8425;   81.2322;   20.0075;   33.2591];
                                              [ 127.0036;   -9.2216;  215.2763; -112.2244;   73.8351;  -30.0885];
                                              [ 245.2360;   88.4748;  308.1942;  176.2158;  131.2712;    1.4327]];

                                             [[  20.1355;    5.6857;   51.6497;  106.6138;  -17.3603; -112.0973];
                                              [ 173.8400;  -46.9604;  427.2891; -101.3674;  226.5788;  145.8927];
                                              [ 110.5519; -125.8047;  -35.6012; -168.9572; -141.2721; -159.3897];
                                              [ -16.8828; -105.4274; -132.2796;   35.6026;  -13.8173;   65.2295]]];


                                            [[[  70.6642;  115.1200; -141.3008;   36.3188;  -92.2498;   29.9960];
                                              [ 101.7243; -133.0979; -127.6157;  -35.6266;   42.1693;  -61.3766];
                                              [ -42.8275;   14.0058;   -7.7668;  -47.1349;  116.9311;   53.7170];
                                              [ -51.1392;   52.3284;   75.6948;   -3.7964;    3.3106;   54.5939]];

                                             [[   0.8100;   31.6266;  -11.5726;   39.5819;   22.8020;  -41.0836];
                                              [ -18.1888;  -55.3912;  104.2333;   28.7020;   24.2710;    3.6328];
                                              [  84.1016;   91.6285;   27.1404;    8.1246;   38.5616;   15.0304];
                                              [  68.3032;  -37.8251;  -83.1444; -113.7539;   -7.7113;  -66.3344]];

                                             [[  -7.6892;   96.3737;  202.0389;  -68.9841;  -74.9820;   85.7395];
                                              [  97.9534;  -11.1773; -106.0468;  -94.3428; -101.9384;  -46.0084];
                                              [  21.9169;  -44.8701;  -78.6259;  136.6283;   89.6921; -113.2355];
                                              [ -30.5091;   60.9218;   14.3467;  -86.6495;   49.3313;   22.9582]]]])

            let t3s2 = dsharp.conv2d(t1, t2, stride=2)
            let t3s2Correct = combo.tensor([[[[  10.6089]];

                                             [[  97.8425]];

                                             [[ 427.2891]]];


                                            [[[-127.6157]];

                                             [[ 104.2333]];

                                             [[-106.0468]]]])

            let t3s13 = dsharp.conv2d(t1, t2, strides=[|1; 3|])
            let t3s13Correct = combo.tensor([[[[  10.6089];
                                              [-132.3437]];

                                             [[  97.8425];
                                              [ 215.2763]];

                                             [[ 427.2891];
                                              [ -35.6012]]];


                                            [[[-127.6157];
                                              [  -7.7668]];

                                             [[ 104.2333];
                                              [  27.1404]];

                                             [[-106.0468];
                                              [ -78.6259]]]])

            let t3s2p1 = dsharp.conv2d(t1, t2, stride=2, padding=1)
            let t3s2p1Correct = combo.tensor([[[[  86.6988;  -85.8172];
                                                  [-176.1860; -165.9882]];

                                                 [[   3.9697;   16.3075];
                                                  [  -9.2216; -112.2244]];

                                                 [[   5.6857;  106.6138];
                                                  [-125.8047; -168.9572]]];


                                                [[[ 115.1200;   36.3188];
                                                  [  14.0058;  -47.1349]];

                                                 [[  31.6266;   39.5819];
                                                  [  91.6285;    8.1246]];

                                                 [[  96.3737;  -68.9841];
                                                  [ -44.8701;  136.6283]]]])

            let t3s23p32 = dsharp.conv2d(t1, t2, strides=[2; 3], paddings=[3; 2])
            let t3s23p32Correct = combo.tensor([[[[   0.0000,    0.0000],
                                                      [   7.5866,  -85.8172],
                                                      [ -42.1364, -165.9885],
                                                      [ -67.0271,   97.8170]],

                                                     [[   0.0000,    0.0000],
                                                      [ -15.5537,   16.3071],
                                                      [ 127.0034, -112.2239],
                                                      [  78.7071,  -84.0060]],

                                                     [[   0.0000,    0.0000],
                                                      [  20.1357,  106.6139],
                                                      [ 110.5519, -168.9587],
                                                      [ -62.9899,  -13.2544]]],


                                                    [[[   0.0000,    0.0000],
                                                      [  70.6642,   36.3191],
                                                      [ -42.8270,  -47.1361],
                                                      [   6.6860,   70.4299]],

                                                     [[   0.0000,    0.0000],
                                                      [   0.8102,   39.5820],
                                                      [  84.1018,    8.1256],
                                                      [  -4.9704,  -58.3407]],

                                                     [[   0.0000,    0.0000],
                                                      [  -7.6887,  -68.9838],
                                                      [  21.9173,  136.6280],
                                                      [  11.1650,   48.6844]]]])
        
            let t3p1d2 = dsharp.conv2d(t1, t2, padding=1, dilation=2)
            let t3p1d2Correct = combo.tensor([[[[ -72.7697,  -34.7305],
                                                  [ -35.3463, -230.5320]],

                                                 [[ -42.2859,   24.9292],
                                                  [  96.3085,   25.1894]],

                                                 [[-149.3111,   42.9268],
                                                  [  73.8409, -159.8669]]],


                                                [[[ -57.9600,  -88.2215],
                                                  [  50.7950,  -52.7872]],

                                                 [[ -43.4812,   49.7672],
                                                  [ -47.4554,   76.3617]],

                                                 [[ -25.4452,   -9.8843],
                                                  [  35.7940,   27.9557]]]])

            let t3p22d23 = dsharp.conv2d(t1, t2, paddings=[2;2], dilations=[2;3])
            let t3p22d23Correct = combo.tensor([[[[-3.2693e+01, -4.3192e+01],
                                                      [ 4.7954e+01,  9.6877e+00],
                                                      [ 1.7971e+01, -7.0747e+01],
                                                      [-4.4577e+01, -1.7964e+01]],

                                                     [[ 9.0977e+00, -2.3489e+01],
                                                      [-4.1579e+00, -3.3179e+00],
                                                      [ 4.0888e+00, -3.3949e+01],
                                                      [ 3.4366e+01,  2.7721e+01]],

                                                     [[ 5.2087e+00, -1.3141e+01],
                                                      [-8.3409e+01, -5.3549e+01],
                                                      [ 2.7209e+01, -1.1435e+02],
                                                      [-2.0424e-02,  8.5139e+00]]],


                                                    [[[ 4.6776e+01, -8.4654e-01],
                                                      [-5.5823e+00, -6.0218e+01],
                                                      [ 2.1814e+00,  1.0590e+01],
                                                      [-2.5290e+01,  2.5629e+01]],

                                                     [[ 4.2384e+00, -8.4199e+00],
                                                      [-3.8285e+01,  1.7978e+01],
                                                      [ 2.2481e+01,  6.5141e+01],
                                                      [-7.9511e-01, -9.9825e+00]],

                                                     [[-2.6924e+01, -8.0152e+01],
                                                      [-1.1862e+01,  2.7242e+01],
                                                      [ 3.1457e+01,  4.8352e+01],
                                                      [-8.1167e+01,  3.2597e+01]]]])

            let t3s3p6d3 = dsharp.conv2d(t1, t2, stride=3, padding=6, dilation=3)
            let t3s3p6d3Correct = combo.tensor([[[[  78.0793,   88.7191,  -32.2774,   12.5512],
                                                      [  27.0241, -107.5002,   98.7433,  -41.9933],
                                                      [  11.7470, -105.7288, -152.6583,   23.1514],
                                                      [ -67.0271,   60.8134,   74.5546,    9.3066]],

                                                     [[  -1.9717,   29.6326,   33.0870,   35.4221],
                                                      [  -3.6938,  -49.7435,  -66.3994,  -25.3134],
                                                      [  35.9503,   38.2935,   80.4125,   -2.5147],
                                                      [  78.7071,  -45.5705,   20.5010,  -15.2868]],

                                                     [[  -9.2327,   96.5872,   28.3565,   92.0639],
                                                      [  35.3198,    5.5638,  -14.6744, -150.4814],
                                                      [ 106.6989, -163.4741,   37.9205,   70.2904],
                                                      [ -62.9899,   25.6233,    7.3010,  -20.2932]]],


                                                    [[[ -41.3512,  -21.4615,   29.8981,   -2.3176],
                                                      [  15.9843,  -22.6151,   87.3233,   36.7436],
                                                      [  46.3618,   66.0061,   18.5348,   38.1597],
                                                      [   6.6860,   65.4270,  -14.5871,  -45.0162]],

                                                     [[ -21.3053,  -12.6932,    4.7727,   -8.6866],
                                                      [ -23.4574,  -39.6679,   -1.5520,  -29.9771],
                                                      [ -66.3903, -127.3519,  -46.1654,  -79.1997],
                                                      [  -4.9704,  -93.0387,  -48.5467,  -39.6767]],

                                                     [[ -26.7460,  -27.8782,  -81.2187,  -76.9048],
                                                      [ -37.5283,  -29.9493,   60.9875,  -86.3384],
                                                      [  26.8834,  -22.3392,   64.3614,   32.6334],
                                                      [  11.1650,   45.6064,   -9.0581,   23.5884]]]])

            let t3b1 = t1.[0].unsqueeze(0).conv2d(t2)
            let t3b1Correct = t3Correct.[0].unsqueeze(0)
            let t3b1s2 = t1.[0].unsqueeze(0).conv2d(t2, stride = 2)
            let t3b1s2Correct = t3s2Correct.[0].unsqueeze(0)

            // Assert.True(false)
            Assert.True(t3.allclose(t3Correct, 0.01))
            Assert.True(t3p1.allclose(t3p1Correct, 0.01))
            Assert.True(t3p12.allclose(t3p12Correct, 0.01))
            Assert.True(t3s2.allclose(t3s2Correct, 0.01))
            Assert.True(t3s13.allclose(t3s13Correct, 0.01))
            Assert.True(t3s2p1.allclose(t3s2p1Correct, 0.01))
            Assert.True(t3s23p32.allclose(t3s23p32Correct, 0.01))
            Assert.True(t3p1d2.allclose(t3p1d2Correct, 0.01))
            Assert.True(t3p22d23.allclose(t3p22d23Correct, 0.01))
            Assert.True(t3s3p6d3.allclose(t3s3p6d3Correct, 0.01))
            Assert.True(t3b1.allclose(t3b1Correct, 0.01))
            Assert.True(t3b1s2.allclose(t3b1s2Correct, 0.01))

        // check intergral types
        for combo in Combos.Integral do 
            let x = combo.ones([1;1;4;4])
            let y = combo.ones([1;1;4;4])
            let z = dsharp.conv2d(x, y)
            let zCorrect = combo.tensor([[[[16]]]])
            Assert.CheckEqual(z, zCorrect)

        // check types must always match
        for dtype1 in Dtypes.All do 
            for dtype2 in Dtypes.All do 
                if dtype1 <> dtype2 then 
                    let x = dsharp.zeros([1;1;4;4], dtype=dtype1)
                    let y = dsharp.zeros([1;1;4;4], dtype=dtype2)
                    isException(fun () -> dsharp.conv2d(x,y, strides=[1;1]))

        for combo in Combos.Bool do 
            let x = combo.zeros([1;1;4;4])
            let y = combo.zeros([1;1;4;4])
            isInvalidOp(fun () -> dsharp.conv2d(x,y, strides=[1;1]))

    [<Test>]
    member _.TestTensorConv3D () =
        for combo in Combos.FloatingPointExcept16s do 
            let t1 = combo.tensor([[[[ 2.0403e+00,  5.0188e-01,  4.6880e-01,  8.0736e-01],
                                       [-6.1190e-01,  6.1642e-01, -4.0588e-01, -2.9679e-01],
                                       [-5.6210e-01,  3.6843e-01, -6.6630e-02, -1.3918e+00],
                                       [-1.2988e+00,  9.6719e-01, -3.3539e-01,  8.7715e-01]],

                                      [[-1.7863e+00, -1.1244e+00, -2.1417e-02,  6.4124e-01],
                                       [ 7.5028e-01,  2.2587e-01, -1.2390e-01, -8.4495e-02],
                                       [-1.1291e+00,  1.5644e+00, -2.0280e+00, -9.2168e-01],
                                       [-9.2567e-01,  3.9768e-01,  1.0377e+00,  5.0193e-01]],

                                      [[-5.3238e-01, -8.4971e-02,  5.3398e-01, -1.0695e+00],
                                       [ 5.6227e-01,  2.3256e-01,  6.6780e-01, -7.1462e-01],
                                       [-6.6682e-01, -3.5299e-01, -6.0286e-01, -1.0693e+00],
                                       [ 1.2855e+00, -5.9239e-02, -1.6507e-01, -7.1905e-01]],

                                      [[-4.1638e-01,  7.6894e-01, -8.3663e-01,  8.2333e-01],
                                       [-1.4869e+00, -1.5159e+00,  8.6893e-01, -4.0507e-01],
                                       [ 1.6423e+00,  1.1892e+00,  9.8311e-01, -4.7513e-01],
                                       [ 1.4261e+00, -1.6494e+00,  8.3231e-02,  3.5143e-01]]],


                                     [[[ 1.6732e+00, -2.3141e+00, -2.7201e-01,  4.8099e-02],
                                       [ 1.4185e-01, -2.7953e-01,  2.0087e-01,  2.5665e+00],
                                       [ 2.0306e+00,  1.3222e+00,  2.3076e-01,  4.5952e-01],
                                       [ 8.8091e-01, -7.6203e-01,  1.4536e-03,  1.3817e-01]],

                                      [[-1.8129e-01,  3.7236e-01,  4.3555e-01,  1.0214e+00],
                                       [ 1.7297e-01, -3.5313e-01,  2.8694e+00, -4.7409e-01],
                                       [-6.3609e-01,  3.4134e+00, -4.9251e-01, -3.8600e-01],
                                       [ 6.8581e-02,  1.0088e+00,  3.0463e-01, -5.7993e-01]],

                                      [[ 7.7506e-01,  1.5062e-01, -2.9680e-02, -1.9979e+00],
                                       [ 6.7832e-01,  1.3433e+00,  1.0491e+00,  9.5303e-02],
                                       [-1.4113e+00, -3.0230e-01, -3.2206e-01,  3.3161e-01],
                                       [-1.0122e+00,  5.1443e-01,  6.5048e-02, -4.2270e-02]],

                                      [[ 1.2150e+00, -1.4316e+00, -2.9044e-01, -7.3760e-01],
                                       [ 3.5693e-01,  1.0187e+00,  1.1133e+00, -4.1039e-01],
                                       [-1.7768e+00, -2.2549e-01,  2.7584e-01, -1.2234e+00],
                                       [-2.9351e-01, -5.3639e-01, -1.2375e+00,  8.3979e-03]]]]).unsqueeze(0)
            let t2 = combo.tensor([[[[-0.5868, -0.6268,  0.2067],
                                       [ 0.0902, -0.2625,  0.4332],
                                       [-2.3743,  0.4579,  1.1151]],

                                      [[-0.6703, -0.4771,  1.5989],
                                       [-0.8629,  0.0367, -1.7918],
                                       [-0.1023,  0.0615, -1.3259]],

                                      [[ 0.5963,  0.3167,  0.8568],
                                       [ 1.0630, -0.2076, -1.6126],
                                       [-0.6459,  1.4887, -1.4647]]],


                                     [[[-0.6016,  0.8268,  1.3840],
                                       [-0.2750, -0.2897,  0.9044],
                                       [-1.8141, -0.2568,  0.3517]],

                                      [[ 0.4624, -0.5173, -0.7067],
                                       [-0.3159,  0.7693,  0.0949],
                                       [ 0.2051,  1.2193, -1.5660]],

                                      [[-0.0875,  0.5780, -0.2825],
                                       [ 0.2239,  0.7976,  1.5523],
                                       [ 0.6226, -0.4116,  1.0639]]]]).unsqueeze(0)

            let t3 = dsharp.conv3d(t1, t2)
            let t3Correct = combo.tensor([[[[ 3.1109,  6.7899],
                                               [ 4.3064,  4.1053]],

                                              [[ 5.0324, -8.8943],
                                               [-0.1298,  1.2862]]]]).unsqueeze(0)

            let t3p1 = dsharp.conv3d(t1, t2, padding=1)
            let t3p1Correct = combo.tensor([[[[  2.9555,  -2.2637,  -7.1829,   5.6339],
                                               [ -3.3115,  11.7124,   2.7917,   2.6118],
                                               [  5.5319,   3.0030,   3.2099,  -2.7804],
                                               [ -1.4804,  -0.1157,  -6.4439,  -0.0716]],

                                              [[  2.4783,  -2.6479,   5.6216,  -1.2882],
                                               [-10.3388,   3.1109,   6.7899,  -6.1003],
                                               [ -1.3145,   4.3064,   4.1053,   5.3012],
                                               [  2.6878,  -4.5237,  -0.6728,   0.6796]],

                                              [[ -1.4721,  -4.1515,   4.6180,  -9.2384],
                                               [  9.8664,   5.0324,  -8.8943,   5.2075],
                                               [ -1.5404,  -0.1298,   1.2862,  -3.2419],
                                               [  8.5308,   2.7561,  -6.2106,   1.8973]],

                                              [[  0.9938,  -2.9158,  -5.2227,  -3.0340],
                                               [  3.2490,   2.0787,   2.2262,  -2.4861],
                                               [ -0.0842,   0.3416,  -3.8301,  -2.1084],
                                               [  4.0825,  -1.9845,  -1.1269,   2.3267]]]]).unsqueeze(0)

            let t3p123 = dsharp.conv3d(t1, t2, paddings=[|1; 2; 3|])
            let t3p123Correct = combo.tensor([[[[ 0.0000e+00, -2.9020e+00,  4.5825e+00, -3.1431e+00, -1.0803e+00,
                                                         8.2371e-01,  1.4897e-01,  0.0000e+00],
                                                   [ 0.0000e+00, -1.2234e+00,  2.9555e+00, -2.2637e+00, -7.1829e+00,
                                                         5.6339e+00,  5.1473e-01,  0.0000e+00],
                                                   [ 0.0000e+00, -6.8862e-01, -3.3115e+00,  1.1712e+01,  2.7917e+00,
                                                         2.6118e+00, -3.8470e-01,  0.0000e+00],
                                                   [ 0.0000e+00,  3.3201e+00,  5.5319e+00,  3.0030e+00,  3.2099e+00,
                                                        -2.7804e+00,  6.1979e-01,  0.0000e+00],
                                                   [ 0.0000e+00,  8.8853e-01, -1.4804e+00, -1.1566e-01, -6.4439e+00,
                                                        -7.1598e-02,  2.3270e-01,  0.0000e+00],
                                                   [ 0.0000e+00, -3.5118e+00,  2.0512e+00,  1.6275e+00,  1.7109e+00,
                                                         1.5145e-01, -1.7395e-01,  0.0000e+00]],

                                                  [[ 0.0000e+00,  7.1204e+00,  3.0177e-04, -6.9272e+00,  2.8760e+00,
                                                        -1.9002e-02, -2.4133e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  5.6420e+00,  2.4783e+00, -2.6479e+00,  5.6216e+00,
                                                        -1.2882e+00, -5.9195e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  7.1537e-02, -1.0339e+01,  3.1109e+00,  6.7899e+00,
                                                        -6.1003e+00,  1.2121e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  8.9927e-01, -1.3145e+00,  4.3064e+00,  4.1053e+00,
                                                         5.3012e+00, -4.4293e+00,  0.0000e+00],
                                                   [ 0.0000e+00, -5.7960e-01,  2.6878e+00, -4.5237e+00, -6.7276e-01,
                                                         6.7965e-01, -6.6988e-01,  0.0000e+00],
                                                   [ 0.0000e+00,  8.0942e-01,  6.4290e-01,  1.2871e+00,  5.3531e-01,
                                                        -1.0901e+00, -1.6275e+00,  0.0000e+00]],

                                                  [[ 0.0000e+00, -6.6101e-01, -4.8746e+00,  7.4949e+00,  3.0253e+00,
                                                        -1.3816e+00, -4.6669e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  4.2946e+00, -1.4721e+00, -4.1515e+00,  4.6180e+00,
                                                        -9.2384e+00,  3.2005e+00,  0.0000e+00],
                                                   [ 0.0000e+00, -2.9133e+00,  9.8664e+00,  5.0324e+00, -8.8943e+00,
                                                         5.2075e+00,  2.1560e+00,  0.0000e+00],
                                                   [ 0.0000e+00, -9.4993e+00, -1.5404e+00, -1.2982e-01,  1.2862e+00,
                                                        -3.2419e+00,  4.1770e-01,  0.0000e+00],
                                                   [ 0.0000e+00, -4.7673e+00,  8.5308e+00,  2.7561e+00, -6.2106e+00,
                                                         1.8973e+00,  2.6808e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  3.9791e+00,  5.8774e-01,  3.1007e-01, -4.0616e+00,
                                                        -8.0652e-01,  7.2560e-01,  0.0000e+00]],

                                                  [[ 0.0000e+00, -1.6718e+00,  2.1936e+00,  5.2331e-01, -2.4292e+00,
                                                        -2.0133e+00,  5.9281e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  3.6098e+00,  9.9384e-01, -2.9158e+00, -5.2227e+00,
                                                        -3.0340e+00,  1.4565e+00,  0.0000e+00],
                                                   [ 0.0000e+00,  2.3582e+00,  3.2490e+00,  2.0787e+00,  2.2262e+00,
                                                        -2.4861e+00,  3.0599e+00,  0.0000e+00],
                                                   [ 0.0000e+00, -6.6049e+00, -8.4240e-02,  3.4158e-01, -3.8301e+00,
                                                        -2.1084e+00,  2.8022e+00,  0.0000e+00],
                                                   [ 0.0000e+00, -1.1513e+00,  4.0825e+00, -1.9845e+00, -1.1269e+00,
                                                         2.3267e+00, -1.7839e-01,  0.0000e+00],
                                                   [ 0.0000e+00,  1.3527e+00, -3.7297e+00,  1.3533e+00,  1.6894e+00,
                                                        -3.2651e-01,  2.1566e-01,  0.0000e+00]]]]).unsqueeze(0)

            let t3s2 = dsharp.conv3d(t1, t2, stride=2)
            let t3s2Correct = combo.tensor([[[[3.1109]]]]).unsqueeze(0)

            let t3s132 = dsharp.conv3d(t1, t2, strides=[|1; 3; 2|])
            let t3s132Correct = combo.tensor([[[[3.1109]],
                                                  [[5.0324]]]]).unsqueeze(0)

            let t3s2p1 = dsharp.conv3d(t1, t2, stride=2, padding=1)
            let t3s2p1Correct = combo.tensor([[[[ 2.9555, -7.1829],
                                                   [ 5.5319,  3.2099]],

                                                  [[-1.4721,  4.6180],
                                                   [-1.5404,  1.2862]]]]).unsqueeze(0)

            let t3s231p321 = dsharp.conv3d(t1, t2, strides=[2; 3; 1], paddings=[3; 2; 1])
            let t3s231p321Correct = combo.tensor([[[[ 0.0000,  0.0000,  0.0000,  0.0000],
                                                       [ 0.0000,  0.0000,  0.0000,  0.0000]],

                                                      [[ 4.5825, -3.1431, -1.0803,  0.8237],
                                                       [ 5.5319,  3.0030,  3.2099, -2.7804]],

                                                      [[-4.8746,  7.4949,  3.0253, -1.3816],
                                                       [-1.5404, -0.1298,  1.2862, -3.2419]],

                                                      [[-0.1487, -1.5309,  1.1215,  3.0797],
                                                       [ 1.4189,  1.4221,  4.1597,  1.4329]]]]).unsqueeze(0)
            
            Assert.True(t3.allclose(t3Correct, 0.01, 0.01))
            Assert.True(t3p1.allclose(t3p1Correct, 0.01, 0.01))
            Assert.True(t3p123.allclose(t3p123Correct, 0.01, 0.01))
            Assert.True(t3s2.allclose(t3s2Correct, 0.01, 0.01))
            Assert.True(t3s132.allclose(t3s132Correct, 0.01, 0.01))
            Assert.True(t3s2p1.allclose(t3s2p1Correct, 0.01, 0.01))
            Assert.True(t3s231p321.allclose(t3s231p321Correct, 0.01, 0.01))

            let t3p1d2 = dsharp.conv3d(t1, t2, padding=1, dilation=2)
            let t3p1d2Correct = combo.tensor([[[[-0.2568,  0.7812],
                                                   [ 3.7157,  2.1968]],

                                                  [[ 7.7515,  1.1481],
                                                   [-1.2951, -2.1536]]]]).unsqueeze(0)
            Assert.True(t3p1d2.allclose(t3p1d2Correct, 0.01, 0.01))

            let t3p224d234 = dsharp.conv3d(t1, t2, paddings=[2;2;4], dilations=[2;3;4])
            let t3p224d234Correct = 
                                   combo.tensor([[[[ 0.5110,  0.8308,  0.8378,  2.1878],
                                                   [ 0.5542,  0.8628,  0.0433,  0.7889]],

                                                  [[ 0.7539,  0.8638,  2.9105, -0.6111],
                                                   [-2.2889,  2.2566, -0.4374, -1.2079]],

                                                  [[ 0.6620,  0.9611,  0.8799, -0.6184],
                                                   [-1.5508, -0.7252, -0.3192,  0.4482]],

                                                  [[-0.0271,  0.7710,  0.0897, -0.1711],
                                                   [-0.8259, -1.5293,  0.9234, -0.6048]]]]).unsqueeze(0)
            Assert.True(t3p224d234.allclose(t3p224d234Correct, 0.01, 0.01))

            let t3s3p6d3 = dsharp.conv3d(t1, t2, stride=3, padding=6, dilation=3)
            let t3s3p6d3Correct = 
                                   combo.tensor([[[[-1.2082,  1.2172,  0.9059, -0.4916],
                                                   [ 2.1467, -3.7502,  5.0506,  0.3885],
                                                   [ 4.7375,  2.0637,  0.0984,  1.4406],
                                                   [-1.3617,  0.8104, -0.4940,  0.5110]],

                                                  [[-3.4229, -2.0909,  2.7974, -1.0638],
                                                   [-2.9979, -0.1444, -3.2004, -0.2850],
                                                   [ 1.0353, -1.1102,  0.8409, -0.3885],
                                                   [-1.3945,  2.0495,  1.7803, -0.3152]],

                                                  [[ 1.5129,  2.9412, -8.0788, -2.2397],
                                                   [ 0.6883, -1.7963,  0.6140, -2.7854],
                                                   [-1.1362,  1.5341, -3.5884, -1.6604],
                                                   [ 3.4384,  1.9425, -1.4670, -0.8295]],

                                                  [[-0.0370,  0.1560, -0.6491, -0.6168],
                                                   [ 2.4056,  0.5702, -3.0690, -0.5726],
                                                   [ 1.9479,  0.2854, -1.4980, -0.0100],
                                                   [-0.1114, -1.0524, -0.8736, -0.2113]]]]).unsqueeze(0)
            Assert.True(t3s3p6d3.allclose(t3s3p6d3Correct, 0.01, 0.01))

    [<Test>]
    member _.TestTensorConvTranspose1D () =
        for combo in Combos.FloatingPointExcept16s do
            let t1 = combo.tensor([[[-1.2531,  0.9667,  0.2120, -1.2948,  0.4470,  1.3539],
                                    [-0.3736,  0.8294, -0.8978,  0.1512, -1.9213, -0.0488],
                                    [-0.6830,  0.0080, -0.1773, -1.7092, -0.0818, -0.2670]]])
            let t2 = combo.tensor([[[ 0.1036,  0.4791, -1.3667],
                                    [ 1.8627, -1.0295, -0.9342]],
                           
                                   [[-0.1559,  0.4204, -1.0169],
                                    [ 1.0772,  0.9606,  0.4394]],
                           
                                   [[-0.0849,  0.5367, -1.4039],
                                    [-0.1863,  0.8559,  0.1834]]])

            let t3 = dsharp.convTranspose1d(t1, t2)
            let t3Correct = combo.tensor([[[-0.0135, -1.1538,  4.0443, -2.5593, -0.2493,  3.5484,  1.9425,
                                            -1.4259],
                                           [-2.6092,  3.0392,  0.1504, -3.7002, -1.8314,  1.1058, -2.9461,
                                            -1.3352]]])

            let t3p1 = dsharp.convTranspose1d(t1, t2, padding=1)
            let t3p1Correct = combo.tensor([[[-1.1538,  4.0443, -2.5593, -0.2493,  3.5484,  1.9425],
                                              [ 3.0392,  0.1504, -3.7002, -1.8314,  1.1058, -2.9461]]])

            let t3p2 = dsharp.convTranspose1d(t1, t2, padding=2)
            let t3p2Correct = combo.tensor([[[ 4.0443, -2.5593, -0.2493,  3.5484],
                                             [ 0.1504, -3.7002, -1.8314,  1.1058]]])

            let t3s2 = dsharp.convTranspose1d(t1, t2, stride=2)
            let t3s2Correct = combo.tensor([[[-0.0135, -1.1240,  3.0214,  0.8161, -1.9989, -0.3710,  0.8596,
                                              -1.4742,  4.3680, -0.6374,  1.6282,  0.4848, -1.4259],
                                             [-2.6092,  0.3466,  3.5738, -0.1917, -1.0763, -1.2325, -2.5556,
                                               0.0154, -0.2591, -2.3758,  1.2422, -1.6693, -1.3352]]])

            let t3s3 = dsharp.convTranspose1d(t1, t2, stride=3)
            let t3s3Correct = combo.tensor([[[-0.0135, -1.1240,  3.0512, -0.0298,  0.8161, -2.1758,  0.1770,
                                              -0.3710,  0.8721, -0.0125, -1.4742,  4.0153,  0.3527, -0.6374,
                                               1.4576,  0.1705,  0.4848, -1.4259],
                                             [-2.6092,  0.3466,  0.8812,  2.6926, -0.1917, -0.5372, -0.5391,
                                              -1.2325, -0.6251, -1.9305,  0.0154,  0.9626, -1.2217, -2.3758,
                                              -1.2768,  2.5191, -1.6693, -1.3352]]])

            let t3s2p1 = dsharp.convTranspose1d(t1, t2, stride=2, padding=1)
            let t3s2p1Correct = combo.tensor([[[-1.1240,  3.0214,  0.8161, -1.9989, -0.3710,  0.8596, -1.4742,
                                                 4.3680, -0.6374,  1.6282,  0.4848],
                                               [ 0.3466,  3.5738, -0.1917, -1.0763, -1.2325, -2.5556,  0.0154,
                                                 -0.2591, -2.3758,  1.2422, -1.6693]]])

            let t3s3p2 = dsharp.convTranspose1d(t1, t2, stride=3, padding=2)
            let t3s3p2Correct = combo.tensor([[[ 3.0512, -0.0298,  0.8161, -2.1758,  0.1770, -0.3710,  0.8721,
                                                  -0.0125, -1.4742,  4.0153,  0.3527, -0.6374,  1.4576,  0.1705],
                                                 [ 0.8812,  2.6926, -0.1917, -0.5372, -0.5391, -1.2325, -0.6251,
                                                   -1.9305,  0.0154,  0.9626, -1.2217, -2.3758, -1.2768,  2.5191]]])

            let t3d2 = dsharp.convTranspose1d(t1, t2, dilation=2)
            let t3d2Correct = combo.tensor([[[-0.0135, -0.0298, -0.9470,  0.8036,  3.0329, -3.4795,  0.2347,
                                                 4.5001,  1.4576, -1.4259],
                                               [-2.6092,  2.6926, -0.1925, -2.1222, -1.5730,  1.9973, -3.0009,
                                                -0.7067, -1.2768, -1.3352]]])

            let t3p2d3 = dsharp.convTranspose1d(t1, t2, padding=2, dilation=3)
            let t3p2d3Correct = combo.tensor([[[ 0.1770, -1.1365,  1.1688, -0.2005,  1.5770, -2.8133,  1.3570,
                                                     4.0153],
                                                   [-0.5391, -1.5840, -1.4133,  1.2866,  0.8965, -2.9130, -2.2944,
                                                     0.9626]]])

            let t3s3p6d3 = dsharp.convTranspose1d(t1, t2, stride=3, padding=6, dilation=3)
            let t3s3p6d3Correct = combo.tensor([[[ 4.0443,  0.0000,  0.0000, -2.5593,  0.0000,  0.0000, -0.2493,
                                                   0.0000,  0.0000,  3.5484],
                                                 [ 0.1504,  0.0000,  0.0000, -3.7002,  0.0000,  0.0000, -1.8314,
                                                   0.0000,  0.0000,  1.1058]]])

            Assert.True(t3Correct.allclose(t3, 0.01))
            Assert.True(t3p1Correct.allclose(t3p1, 0.01))
            Assert.True(t3p2Correct.allclose(t3p2, 0.01))
            Assert.True(t3s2Correct.allclose(t3s2, 0.01))
            Assert.True(t3s3Correct.allclose(t3s3, 0.01))
            Assert.True(t3s2p1Correct.allclose(t3s2p1, 0.01))
            Assert.True(t3s3p2Correct.allclose(t3s3p2, 0.01))
            Assert.True(t3d2Correct.allclose(t3d2, 0.01))
            Assert.True(t3p2d3Correct.allclose(t3p2d3, 0.01))
            Assert.True(t3s3p6d3Correct.allclose(t3s3p6d3, 0.01, 0.01))
            printfn "done"

    [<Test>]
    member _.TestTensorConvTranspose2D () =
        for combo in Combos.FloatingPointExcept16s do
            let t1 = combo.tensor([[[[-2.0280, -7.4258, -1.1627, -3.6714],
                                       [ 3.1646, -2.0775,  1.1166, -3.1054],
                                       [-2.9795,  6.3719,  6.7753, -0.2423],
                                       [-5.1595, -1.5602, -1.5165, -4.1525]],
                             
                                      [[-4.4974, -1.6737,  0.2967, -1.3116],
                                       [ 3.7593, -1.4428, -2.1954, -3.8098],
                                       [-0.2220,  4.3347,  2.6288,  4.9739],
                                       [-2.8094, -3.4588, -1.3126, -2.8789]],
                             
                                      [[ 1.8656,  3.6751,  3.6202,  0.7065],
                                       [ 2.9986, -2.5643, -3.2444, -0.0339],
                                       [-1.0250,  3.4748, -0.9057,  0.6292],
                                       [ 0.1423,  2.9450,  4.5264, -1.4891]]],
                             
                             
                                     [[[-0.5852, -1.6015, -0.2604,  6.8539],
                                       [-1.6572,  0.3233,  2.4716,  0.8160],
                                       [-7.9254,  0.5539, -0.4043,  0.7395],
                                       [ 2.3128,  1.5731,  2.1585,  0.2829]],
                             
                                      [[ 2.0864, -4.2912,  0.8241,  3.3248],
                                       [ 2.4391,  5.8813,  1.0969, -0.4856],
                                       [ 2.2431, -3.8626, -0.0758,  0.7386],
                                       [-1.3231,  2.5438, -3.1992,  2.7404]],
                             
                                      [[ 2.1057,  2.1381,  4.3754, -4.7032],
                                       [-0.0310,  1.5864, -4.6051, -3.2207],
                                       [-8.3767,  1.9677, -2.5842,  0.6181],
                                       [-5.3311,  3.3852, -0.9679, 10.0806]]]])
            let t2 = combo.tensor([[[[-0.6207,  0.9829,  1.9519],
                                       [-1.3195, -1.0054, -0.0422],
                                       [-0.7566, -0.5450,  0.0660]],
                             
                                      [[ 1.2635, -0.5134, -1.5355],
                                       [ 0.0294, -0.7468,  1.5766],
                                       [-0.6810,  0.0306,  0.7619]]],
                             
                             
                                     [[[ 1.8189,  0.0156,  1.2304],
                                       [-0.6246, -0.5269, -0.6632],
                                       [ 1.0706,  0.0366,  0.4163]],
                             
                                      [[ 1.1352,  0.1125, -1.1641],
                                       [-0.4009,  0.2187,  0.6077],
                                       [ 0.0796, -1.0126, -0.2706]]],
                             
                             
                                     [[[-0.1754,  0.1714, -0.4221],
                                       [ 0.3765, -2.9587,  1.4150],
                                       [ 0.3446, -0.8976,  2.2664]],
                             
                                      [[-0.4247, -0.3800,  1.0981],
                                       [-1.4746,  0.9296,  0.3400],
                                       [ 0.1843,  1.0527,  0.3531]]]])

            let t3 = dsharp.convTranspose2d(t1, t2)
            let t3Correct = combo.tensor([[[[ -7.2488,  -0.8234, -16.3482, -18.8535,  -6.9405,  -9.0783],
                                               [ 10.5350,  13.9143,   8.8096,  -6.3821,   4.9971,  -8.7103],
                                               [ -6.4071,  -6.7860,  18.0874,  51.6045,  28.4071,   8.8040],
                                               [  4.4154, -19.7267, -40.3442, -24.0385, -25.0267, -15.2847],
                                               [ 10.2796,  15.1273, -10.1839,  15.1099,  16.6752,   3.4580],
                                               [  0.9450,   1.0737,  -1.8054,   1.3937,  13.1064,  -4.8475]],
                                     
                                              [[ -8.4601, -13.0171,   9.9559,  10.2132,   6.8841,   7.9401],
                                               [  5.9849,  -8.2165,  -5.9590, -13.5684,   1.1469,   2.8209],
                                               [ -8.0502,  30.9921,  31.5255, -14.5540, -10.9641, -14.1428],
                                               [ -9.5590, -10.0463,  -0.3495,   4.8396,  29.0524,   9.5997],
                                               [  2.5872,  -3.9301, -20.5199,   6.8982,  -0.8133, -10.1110],
                                               [  3.3162,   4.1667,   5.1967,   9.1590,   2.0185,  -2.9105]]],
                                     
                                     
                                             [[[  3.7889,  -7.3680,   0.1545,  -6.1833,   4.6413,  19.4543],
                                               [  5.7324,   7.4798,   2.3715, -12.0400,  19.2886,  -6.7945],
                                               [ 14.5222, -24.0757, -16.1896,  -1.7090,  13.5193, -11.0012],
                                               [  6.8502,  46.0075, -20.2598,  28.5731, -11.2059,  -7.4251],
                                               [  1.2786,  19.7991, -42.3652,  12.9959, -37.7386,  14.1919],
                                               [ -5.0035,   6.1760, -21.6751,  14.6040, -12.4852,  24.0061]],
                                     
                                              [[  0.7348,  -8.0679,  -0.9427,  22.7978,   2.8876, -19.5593],
                                               [ -3.2706,   8.9194,   2.4042,   2.6916, -16.5644,   7.0029],
                                               [ -3.9380,   1.2676,  14.5253,  11.3920, -10.3566,   1.2414],
                                               [ 16.2215,  -0.6001, -28.4006, -15.5361,  -8.6123,   8.8859],
                                               [ 12.4917, -24.5919,   2.5210, -14.8144,   9.6141,   6.1206],
                                               [ -2.6629,  -4.4465,  -0.6293,   5.8754,  10.0140,   3.0334]]]])

            let t1p1 = combo.tensor([[[[ 1.0744,  7.9558,  0.4934,  2.3298,  2.3925, -1.2102],
                                       [-2.1089,  4.0487,  0.9586,  4.5810,  1.0251,  5.6604],
                                       [-3.4522, -4.8244,  0.5531, -6.3983, -5.8461,  3.7263],
                                       [ 7.5891,  4.5920,  1.9801, -5.1166, -3.8933,  2.1153],
                                       [ 0.6262,  2.5322, -6.0730, -3.4204,  2.3583,  0.4224],
                                       [ 0.6814, -0.9715, -1.2208,  9.5117, -1.2802,  2.0687]],
                             
                                      [[ 3.3219, -0.4099, -0.3930, -1.8511, -2.0642, -1.9206],
                                       [ 2.6994,  1.6932,  1.3649,  3.2362,  2.3385, -0.2216],
                                       [-4.3740, -8.2227, -2.9300, -8.7945, -2.0426, -1.1449],
                                       [ 3.6044, -0.5552,  0.0607,  3.7366,  0.1317,  0.3760],
                                       [ 0.7646, -3.2802, -0.7214, -5.0273,  0.0336, -3.9015],
                                       [-1.3125,  1.8098, -1.9835,  7.9206, -0.8541,  3.2770]],
                             
                                      [[ 3.0539, -3.7408,  1.0175, -3.9080, -1.6320, -0.7949],
                                       [ 0.6580,  3.8309,  5.3238, -6.3294,  5.0700,  4.4601],
                                       [ 4.7103, -1.8846,  3.8602, -3.9283,  4.4575,  1.5436],
                                       [-2.9477,  4.4539,  0.6466,  3.8747, -1.8396,  0.4202],
                                       [ 2.0424,  4.7229, -2.0569, -0.7198, -7.7648,  3.7662],
                                       [ 6.3408, -1.8474, -2.4028, -1.1776,  6.5768, -2.5502]]],
                             
                             
                                     [[[ 0.2038, -1.9139, -1.0913,  1.7458,  1.3187, -0.7424],
                                       [-0.6190, -1.4809, -4.1774,  4.1776, -1.6485, -2.8223],
                                       [ 1.3574, -0.9936,  0.4081, -1.2595, -3.1222, -0.1957],
                                       [ 3.2237, -3.5044, -2.2179,  1.1732,  2.7336, -1.0194],
                                       [ 2.8080, -0.6129,  2.4027, -0.8684, -5.8353,  0.5219],
                                       [-5.1602,  0.4612, -1.8575, -1.8444,  1.2732,  5.0051]],
                             
                                      [[ 0.4338, -0.3004,  3.5642,  0.7867, -0.3105,  0.5667],
                                       [ 0.0962, -0.1167, -1.1296,  1.1743, -0.3805,  0.3942],
                                       [ 3.1247, -0.7838,  7.1643, -3.3606, -2.5899,  0.4827],
                                       [-0.7164, -0.9592, -1.6169,  2.0705,  1.3104,  2.9180],
                                       [ 0.9406,  6.0178,  7.0580, -1.1603, -4.9145, -3.0228],
                                       [-1.2659, -4.5113, -0.4634,  2.0256,  3.4598,  1.6469]],
                             
                                      [[ 6.1612, -7.6000,  1.1598,  2.3335, -6.1723,  5.6237],
                                       [ 3.0543, -5.6086,  2.6119, -0.5712, -0.5620,  3.4211],
                                       [-0.8446, -1.7392, -4.8108, -0.0792, -4.0653,  2.2177],
                                       [ 0.2648, -1.0341, -3.0084,  0.6107,  3.5405,  3.5716],
                                       [ 8.1575, -5.9643, -5.5036, -1.8790, -2.2454, -1.4370],
                                       [-1.7650, -5.9335,  3.4498,  0.8872, -1.0203,  3.9062]]]])

            let t3p1 = dsharp.convTranspose2d(t1p1, t2, padding=1)
            let t3p1Correct = combo.tensor([[[[-2.5539e+01,  9.8793e+00,  2.3522e+00,  1.6893e+01,  1.4417e+01,
                                                 1.2602e+01],
                                               [-3.1444e+01, -3.5893e+01, -6.7083e+01,  5.7391e+00, -7.6345e+01,
                                                -2.8184e+01],
                                               [ 5.7274e+00,  5.1016e+01,  2.4985e+01,  6.2553e+01, -4.1881e+01,
                                                 1.1302e+00],
                                               [-2.0541e+01, -9.0034e+00, -2.3712e+01, -5.8394e-01, -2.7339e+01,
                                                 8.2359e+00],
                                               [-4.5268e+00, -2.3789e+01,  5.4599e+01,  7.0560e+00,  7.2854e+01,
                                                -3.1187e+01],
                                               [-2.5245e+01,  1.9611e+01, -7.4000e-01, -1.5047e+01, -3.2242e+01,
                                                -7.5167e+00]],
                                     
                                              [[ 1.5225e+01, -8.1117e+00,  2.3894e+01,  3.4110e+00, -1.5564e+01,
                                                 -1.6471e+00],
                                               [-2.4827e+01,  2.1827e+00,  2.1729e+01, -1.7261e+01,  2.6620e+01,
                                                 2.1128e+01],
                                               [ 8.8218e+00, -3.1076e+01, -4.0147e+00, -1.8270e+01,  3.3127e+00,
                                                 -9.0832e-01],
                                               [-5.8058e+00,  8.6448e+00,  7.2669e+00,  4.1642e+01,  2.9576e+00,
                                                -2.1493e+01],
                                               [-1.4143e+01,  2.1080e+01,  3.9626e+01, -1.6192e+00, -4.8345e+01,
                                                 1.0363e+01],
                                               [ 7.3484e+00,  1.9200e+01,  6.8525e-01, -2.3770e+01,  1.9260e+01,
                                                 3.4740e+00]]],
                                     
                                     
                                             [[[-1.7204e+01,  2.7923e+01, -2.1302e+01, -1.9810e+01,  3.2535e+01,
                                                -3.0405e+01],
                                               [-1.4934e+01,  7.5868e+01, -4.2455e+01,  9.5382e+00,  1.0415e+01,
                                                -3.3989e+01],
                                               [ 1.1103e+00,  1.2644e+01, -1.0561e+01, -3.6917e+00,  3.7296e+01,
                                                 -8.4717e+00],
                                               [ 1.7178e+01,  3.1835e+01,  1.5056e+01, -9.7515e+00, -2.2679e+01,
                                                 -3.5688e+01],
                                               [-4.6248e+01,  6.6559e+00,  2.6084e+00, -5.3964e+00,  1.5587e+01,
                                                 2.4642e+01],
                                               [ 7.0854e+00,  5.0883e+01, -2.0413e+01, -9.6752e+00, -1.0166e+01,
                                                 -2.7874e+01]],
                                     
                                              [[ 1.6488e+01, -6.7920e+00, -2.6865e+00,  1.7668e+01, -2.3272e+01,
                                                 8.2484e+00],
                                               [ 1.6097e+01, -6.7093e+00, -8.1159e+00, -2.9688e+01,  7.8054e+00,
                                                 9.2428e+00],
                                               [-2.1152e+00, -1.7606e-01,  4.4501e+00,  1.2627e+01, -1.0182e+01,
                                                -6.1416e+00],
                                               [-7.5072e-02,  2.9625e+01, -3.5118e+01, -3.8816e+01, -1.1095e+00,
                                                 2.1909e+01],
                                               [ 1.6438e+01,  1.7336e+01, -9.1775e+00,  1.9114e+01,  1.4552e+01,
                                                 -2.2556e+01],
                                               [ 2.0026e+01, -3.1022e+01, -1.8629e+01,  1.0793e+00, -8.2290e+00,
                                                 1.6719e+00]]]])

            let t1p12 = combo.tensor([[[[ 2.0904e-01, -3.0708e+00, -5.8043e-01,  5.2003e-01,  3.1007e+00,
                                            -3.0689e+00,  1.9686e+00,  2.2593e+00],
                                           [-1.5114e+00, -3.5046e+00, -7.6147e+00, -7.7734e-01, -7.9658e-01,
                                            -2.7403e+00,  3.2388e+00,  4.1308e-01],
                                           [ 7.0679e+00,  2.5667e+00, -3.3968e+00, -2.1805e+00, -4.6535e+00,
                                             -6.6126e+00, -4.5696e+00, -2.7322e+00],
                                           [ 4.8306e+00,  1.1991e+00,  1.6866e-01,  4.3821e-01, -4.4588e-01,
                                             2.7424e+00,  3.8553e+00, -1.8864e-01],
                                           [ 3.8901e-01, -5.3517e+00, -2.3543e+00,  3.5484e+00,  3.9898e-01,
                                             -4.1207e+00, -1.5045e+00,  1.9773e+00],
                                           [ 4.3314e+00, -3.5333e+00,  2.1335e+00,  5.1173e+00,  5.2105e+00,
                                             -5.9196e+00, -2.3715e+00,  8.5792e-02]],
                                 
                                          [[ 1.4584e+00,  1.0401e+00,  4.0129e+00,  1.2725e+00, -4.3258e-01,
                                             -3.3049e-01, -1.2140e+00, -1.6860e+00],
                                           [-1.7470e+00, -1.6925e+00, -7.9839e-02,  5.8790e-01, -1.4510e+00,
                                             4.8597e+00,  4.4617e+00,  3.7802e+00],
                                           [ 2.7816e+00, -1.4593e-01,  7.2832e-01,  1.8055e-01, -2.4145e+00,
                                             -3.6923e+00, -2.9494e+00, -6.4016e+00],
                                           [ 3.0402e+00,  6.5263e-01,  7.9575e+00, -2.5088e+00,  4.5268e+00,
                                             6.6195e+00,  1.6011e+00,  4.3730e+00],
                                           [-1.4767e+00, -2.0553e+00,  1.7944e+00, -6.4128e-02, -3.9420e-01,
                                            -9.2923e-01,  3.8154e+00, -9.5326e-01],
                                           [ 2.3029e+00, -1.4282e+00,  4.1835e+00, -7.0811e-01,  4.0882e+00,
                                             -1.2903e+00, -3.6706e-01, -2.4274e+00]],
                                 
                                          [[ 5.5625e+00, -3.0755e-01, -5.8200e+00,  8.1142e+00, -5.4013e+00,
                                             -3.2303e+00, -5.2555e-01, -7.5444e-01],
                                           [ 8.5872e+00, -1.0552e+01,  1.7941e+00,  4.1905e+00, -7.0491e-02,
                                             6.0357e+00,  8.2003e-01,  1.2992e+00],
                                           [ 2.3029e+00, -7.7644e+00,  5.2392e+00,  3.0534e+00, -1.3255e+00,
                                             1.9722e+00, -8.8349e+00,  1.8596e+00],
                                           [ 4.1077e+00, -6.4727e+00,  5.4707e+00, -8.1994e-01, -2.2840e+00,
                                             -7.3100e+00,  1.6094e+00, -1.8923e-01],
                                           [ 3.6762e+00, -8.5700e+00,  7.6150e+00, -7.6913e+00,  4.0187e+00,
                                             -3.4347e+00,  3.4880e+00,  4.4458e-01],
                                           [-9.3896e-02, -1.3383e+00, -1.4096e-02, -2.6950e+00,  4.1328e+00,
                                            -3.0136e-02, -4.4437e+00,  2.1302e+00]]],
                                 
                                 
                                         [[[-2.3001e+00, -6.1048e-01, -5.0777e-01,  6.5870e+00, -6.9482e-01,
                                             1.8224e+00, -1.5978e+00, -9.7060e-01],
                                           [ 1.0086e+00, -2.5574e+00, -3.5676e+00, -1.6516e+00, -3.0457e-02,
                                             2.0455e+00, -2.9152e+00,  4.7178e-01],
                                           [ 1.8213e+00,  2.9062e+00, -1.6246e+00, -3.0354e+00,  1.9258e+00,
                                             1.2320e+00,  1.7550e-01,  1.5679e+00],
                                           [-3.1161e-01,  2.1187e-01,  7.7038e-01, -8.0618e+00, -3.1787e+00,
                                            -7.8896e-01,  2.8006e+00,  1.1497e+00],
                                           [-4.3055e+00,  2.3031e+00,  6.8383e+00,  3.3530e+00, -2.6364e+00,
                                            -2.0941e+00,  2.3572e-01, -1.9117e-02],
                                           [-5.0467e-01, -4.9318e+00, -1.4161e+00, -4.3488e+00, -2.0141e+00,
                                            -9.1710e-01, -1.2912e+00, -4.6389e-01]],
                                 
                                          [[-1.5890e-02,  2.9213e-01,  2.8771e+00,  3.3473e+00, -1.5947e+00,
                                            -8.5990e-02,  5.4676e-01, -5.4066e-01],
                                           [ 4.7811e-01, -9.0797e-01, -3.5322e+00, -5.5444e+00, -9.3019e-01,
                                             -2.8029e+00, -2.3730e+00,  1.3185e+00],
                                           [ 1.1198e+00,  1.3149e+00,  3.9382e+00,  9.9105e-01,  2.3394e+00,
                                             1.5633e+00,  2.0929e+00, -3.1767e-02],
                                           [ 1.2592e+00,  8.2358e-01, -3.0186e+00, -4.4605e+00, -2.6266e+00,
                                             -7.4811e-01,  1.6034e+00,  5.7280e-01],
                                           [-2.5910e-01,  4.7576e+00,  6.1715e+00,  5.1725e+00,  4.2087e+00,
                                             1.5060e-02,  2.3843e+00, -1.1196e+00],
                                           [ 3.4526e-02, -3.3107e+00, -2.9831e+00, -4.9749e+00,  1.3786e+00,
                                             -2.0894e+00, -3.8216e-04, -4.6755e-01]],
                                 
                                          [[ 1.9114e+00, -2.1377e+00,  1.1277e+00,  1.8681e+00,  7.3343e+00,
                                             -1.7746e+00,  1.5446e+00, -6.5108e-01],
                                           [ 9.0044e-01, -3.1848e+00, -3.0141e+00,  8.5436e+00,  4.0129e-01,
                                             -9.0136e-01,  4.6455e-01, -1.2833e+00],
                                           [-9.6027e-01,  1.5802e+00,  1.1102e+00,  8.0889e-01,  2.0755e+00,
                                             2.4087e-01, -2.8644e+00, -8.1120e-01],
                                           [-2.9667e+00, -1.1450e+00,  2.8817e+00, -7.4703e+00,  4.4933e+00,
                                             1.5010e+00, -1.4258e+00,  3.4844e-01],
                                           [ 6.3914e-02, -6.0574e+00,  3.2300e+00, -6.4394e+00,  7.5388e+00,
                                             -3.8723e+00, -1.0272e+00,  5.6870e-01],
                                           [-1.0461e+00, -4.1427e+00,  1.4182e-01,  5.8372e+00, -3.7351e-01,
                                            -2.1219e+00, -5.3250e-01,  7.3212e-01]]]])

            let t3p12 = dsharp.convTranspose2d(t1p12, t2, paddings=[1;2])
            let t3p12Correct = combo.tensor([[[[-3.3253e+00,  5.4371e+00, -5.9816e+01,  3.2848e+01,  4.3607e+00,
                                                 1.6492e+00],
                                               [ 9.7679e+01,  6.7747e+00, -4.1665e+01,  2.0032e+01, -5.2838e+01,
                                                 -5.1707e+01],
                                               [ 8.8758e+01, -3.6796e+01,  2.3499e+01,  5.4406e+01,  1.2719e+01,
                                                 9.2254e+01],
                                               [ 2.9644e+01, -5.8237e+01,  8.4483e+00,  1.9658e+01, -4.7019e-01,
                                                 -2.9818e+01],
                                               [ 8.3079e+01, -7.1435e+01,  6.8016e+01,  1.2094e+00,  3.2177e+01,
                                                 -5.0162e+01],
                                               [ 2.5591e+01, -4.3952e+01,  1.5923e+01, -3.4699e+01,  3.2012e+01,
                                                 6.0155e+00]],
                                     
                                              [[ 2.1227e+01, -2.3985e+01,  2.5212e+01,  6.6007e+00,  1.4629e+01,
                                                 1.4605e+00],
                                               [-2.6661e+01, -3.7247e+01, -3.5895e+00, -1.5200e+01,  4.8951e+00,
                                                 2.6003e+00],
                                               [-2.9117e+00, -1.1533e+01,  5.0551e+00,  2.0305e+01,  1.1223e+01,
                                                -3.9817e+01],
                                               [ 4.3272e-01,  2.2397e+01,  2.0958e+01, -9.2573e+00,  2.9995e+00,
                                                 -1.3124e-02],
                                               [-1.6896e+01,  1.5415e+01, -1.4137e+01, -2.0068e+01, -3.1009e+01,
                                                 4.9770e+00],
                                               [ 5.7245e+00, -7.4357e+00, -1.5237e+01,  1.4700e+01,  2.3845e+01,
                                                 -2.0412e+01]]],
                                     
                                     
                                             [[[ 4.3162e+00, -3.7015e+01, -2.1557e+01, -4.2872e+01,  1.5128e+01,
                                                 -3.9774e+00],
                                               [ 4.5918e+01,  2.2101e+01, -2.0702e+01,  1.0873e+01,  3.8851e+01,
                                                 -7.5143e-02],
                                               [-1.0218e+01, -2.4655e+00, -3.6693e+01, -2.1096e+01, -1.4586e+01,
                                                 2.4224e+00],
                                               [-7.7054e-02,  3.7449e+01,  8.2727e+01,  2.5300e+00,  4.3413e+00,
                                                -6.6815e-01],
                                               [-1.6899e+01, -6.8931e+01,  2.8213e+01, -7.6618e+01,  2.3916e+01,
                                                -5.7188e+00],
                                               [ 2.7919e+01, -7.0535e+00,  1.7199e+01, -1.2670e+00,  3.3749e+01,
                                                 -6.5397e+00]],
                                     
                                              [[-1.3218e+01, -1.1301e+01, -9.3226e+00,  4.0663e+01, -1.1171e+01,
                                                 8.9378e+00],
                                               [-1.3149e+00, -3.0373e+01,  3.3557e+00,  1.8259e+01, -1.2272e+00,
                                                 7.0654e+00],
                                               [-7.9169e+00, -9.3778e+00,  1.4320e+01,  5.5024e+00,  3.0991e+01,
                                                 1.1212e+01],
                                               [ 2.0909e+01,  9.3709e+00, -2.4690e+01, -3.7275e+01,  1.1494e+01,
                                                 -1.2765e+01],
                                               [-2.6079e+01,  1.4229e+01,  1.4370e+00,  3.9834e+01,  3.5829e-01,
                                                -8.2415e+00],
                                               [-1.8959e+01, -2.4770e+01, -1.8573e-01,  6.9171e-01, -8.2630e+00,
                                                -1.0300e+01]]]])

            let t1s2 = combo.tensor([[[[-4.2302, -2.7939],
                                       [ 4.5052,  3.8188]],
                             
                                      [[ 5.7356,  8.4538],
                                       [ 3.7488,  6.3469]],
                             
                                      [[ 8.4869, 10.8920],
                                       [ 6.1609, -5.2561]]],
                             
                             
                                     [[[ 4.4355, -3.7308],
                                       [-1.7996,  2.1566]],
                             
                                      [[ 4.5993, -2.7351],
                                       [ 4.9944,  1.7658]],
                             
                                      [[-3.0583, -7.1895],
                                       [ 9.4745,  6.8794]]]])
            let t3s2 = dsharp.convTranspose2d(t1s2, t2, stride=2)
            let t3s2Correct = combo.tensor([[[[ 11.5695,  -2.6138,  10.4181,  -0.7474,   0.3506],
                                               [  5.1947, -23.8791,  10.8908, -33.8715,   9.9235],
                                               [ 15.2073,   0.4402,  57.1628,  -4.9930,  45.5023],
                                               [ -5.9665, -24.7330,  -4.9407,   8.3677, -11.8079],
                                               [  2.7278,  -7.8481,  17.9155,   2.8690,  -9.0182]],
                                     
                                              [[ -2.4383,  -0.4080,  10.5790,  -1.7535,   6.4095],
                                               [-14.9385,  12.3029, -19.8310,  14.0606,   4.4357],
                                               [ 12.2329,  -1.2355,  12.5506,   3.5710, -19.5942],
                                               [-10.4553,   3.1825,  16.7942,  -6.3499,   8.0906],
                                               [ -1.6342,   2.8274,   1.5294, -11.8432,  -0.6639]]],
                                     
                                     
                                             [[[  6.1489,   3.9072,  14.2093,  -4.9419,  -7.6127],
                                               [ -9.8767,   2.1657,  -3.6406,  26.4635,  -8.2018],
                                               [  9.0536,   0.4292,  -8.0068,  11.7128, -14.2008],
                                               [  2.8222, -28.8545,   8.8117, -23.4528,   8.4723],
                                               [  9.9734,  -7.3408,  26.0629,  -7.2857,  16.4690]],
                                     
                                              [[ 12.1241,  -0.5976, -20.2883,   4.3397,   1.0178],
                                               [  2.7963,  -5.1495,  20.3365,  -4.4954,  -9.9885],
                                               [ -3.8460,  -9.8555,  11.2138,  -8.4357,  -2.4537],
                                               [-16.0263,  11.2437,  -7.3697,   5.1708,   6.8122],
                                               [  3.3692,   4.8615,   0.5627,   5.5199,   3.5944]]]])

            let t1s13 = combo.tensor([[[[-9.8044, -2.9782],
                                           [-2.7887,  4.5641],
                                           [ 0.5278,  4.7393],
                                           [-4.0212, -5.5322]],
                                 
                                          [[ 0.7842, -1.7191],
                                           [-0.1781, -0.0738],
                                           [ 7.6769, -0.2776],
                                           [-5.3948, -1.7661]],
                                 
                                          [[ 6.1815, -2.2200],
                                           [-9.2024, -5.4785],
                                           [-6.2536,  0.4347],
                                           [-2.3570,  4.6716]]],
                                 
                                 
                                         [[[-3.0220,  2.2930],
                                           [-3.3329,  1.0919],
                                           [ 0.4386, -5.8802],
                                           [-3.3151,  0.9038]],
                                 
                                          [[ 2.5312,  4.7056],
                                           [ 0.3190,  0.0251],
                                           [-2.4100, -0.1728],
                                           [ 1.5978, -2.1062]],
                                 
                                          [[-1.8104, -8.8542],
                                           [-2.7608,  3.7158],
                                           [ 1.1023,  0.6211],
                                           [ 0.3481, -3.1282]]]])
            let t3s13 = dsharp.convTranspose2d(t1s13, t2, strides=[1;3])
            let t3s13Correct = combo.tensor([[[[  6.4277,  -8.5650, -20.7816,  -0.8889,  -3.3346,  -6.9913],
                                               [ 17.7955, -13.1661,   6.8624,   2.1615,  14.0141,   9.2549],
                                               [ 25.4467,  29.5152,  14.0191, -11.9140,  19.9407,  -5.1138],
                                               [-16.0010,  19.2597, -48.5687, -11.9344,  -8.1418, -26.4900],
                                               [ 13.4527,  19.4654, -10.5299,   6.4285, -10.3124,   9.1974],
                                               [ -3.5454,   4.1097,  -7.8530,   3.9047,  -1.2428,   9.4873]],
                                     
                                              [[-14.1229,   2.7728,  20.9297,  -4.7716,   2.1792,   4.1365],
                                               [ -9.5353,  18.1484, -18.4952,  11.8849,  -0.4852, -19.4332],
                                               [ 33.4754,   1.8713, -29.7474,  15.2129, -11.8344,  -3.7762],
                                               [ -3.8556, -11.7677,   7.9117, -15.4929,  -7.8825,  24.6944],
                                               [  4.6192, -14.7085, -14.3029,  -9.5128,   8.9717,  -4.3675],
                                               [  1.8746,   2.8585,  -2.4361,   4.4878,   6.5368,  -2.0876]]],
                                     
                                     
                                             [[[  6.7974,  -3.2412,  -2.0201,   8.6888,   0.8095,  14.0027],
                                               [  4.8581,   3.3171,  -9.0605, -10.5821,  23.1227, -15.1524],
                                               [  2.6824,  15.2982,  -9.8007,   3.4209, -10.9109, -24.7141],
                                               [  8.1563,  -1.3002,  -7.8564,   4.7387,   0.5551,  10.2388],
                                               [  0.9752,   0.1444,   1.0968,   3.4232,  12.0973,  -2.1200],
                                               [  4.3388,   1.5527,   1.2354,  -4.0167,   2.2382,  -7.9069]],
                                     
                                              [[ -0.1760,   2.5242,  -0.2943,  11.9993,   2.7168, -18.7214],
                                               [ -1.1104,   3.9235,  -2.1272,  11.0673, -10.8839,   5.8387],
                                               [  3.1212,  -5.4843,  -6.2836, -16.1657,  -8.6078,  10.2598],
                                               [ -1.3828,  -1.4117,  -0.3860,  -0.9968,   9.3384,  -9.3984],
                                               [ -1.5388,   6.7630,  -2.7617,   9.5889,  -3.3946,  -5.1327],
                                               [  2.4490,  -1.3529,  -2.8353,  -1.3597,  -1.1327,   0.1540]]]])

            let t1s2p1 = combo.tensor([[[[ -3.4577,   3.2779,   2.9547],
                                           [  2.2602,  -3.8841,   1.4702],
                                           [  0.2794,  -2.2958,  -3.5196]],
                                 
                                          [[  0.1823,  -0.9480,  -0.3327],
                                           [  0.7481,  -2.4933,  -3.9782],
                                           [  3.2706,   2.8311,  -4.2914]],
                                 
                                          [[-12.7793,  -1.5203,   8.0372],
                                           [  5.0149,  -9.2994,  -1.8505],
                                           [  6.6970,  -0.4846,   4.1385]]],
                                 
                                 
                                         [[[  1.8252,  -2.0286,   4.0794],
                                           [  0.4706,   2.6324,  -0.3310],
                                           [  0.9786,  -0.9518,  -5.4449]],
                                 
                                          [[  3.1169,   0.4747,  -1.1639],
                                           [ -0.0482,   0.6452,  -1.3964],
                                           [  1.8278,   0.1934,  -2.0665]],
                                 
                                          [[ -7.7843,  -7.3282,   1.5546],
                                           [ -3.3539,  -1.5674,   0.0477],
                                           [  2.6323,   6.4161,   6.6779]]]])
            let t3s2p1 = dsharp.convTranspose2d(t1s2p1, t2, stride=2, padding=1)
            let t3s2p1Correct = combo.tensor([[[[ 4.1190e+01, -2.2363e+01,  1.7022e+00, -2.3258e+00, -2.6575e+01],
                                                   [ 1.6455e+01, -3.0412e+01, -5.9070e+00, -1.7994e+01, -7.7708e+00],
                                                   [-1.7504e+01,  9.6857e+00,  3.2733e+01, -1.1493e+01,  6.0931e+00],
                                                   [-4.2322e+00,  1.7293e+01,  8.0773e+00, -3.5520e+01, -2.1028e+00],
                                                   [-2.1819e+01,  8.3739e+00,  2.2502e+00,  6.4162e+00, -6.4449e+00]],
                                         
                                                  [[-9.2576e+00, -6.9672e+00, -4.0686e+00, -7.5565e+00,  5.1920e+00],
                                                   [-1.6725e+01, -1.2407e+01,  4.7072e+00, -1.5580e+00,  8.3889e+00],
                                                   [ 3.1375e+00,  2.0321e+01, -6.2893e+00, -6.4338e+00, -3.6882e+00],
                                                   [ 2.2704e+00,  7.6596e+00, -5.7023e+00, -1.8606e+01,  1.8768e+00],
                                                   [ 6.7321e+00,  4.2171e+00,  1.8832e+00, -6.5496e+00,  5.5370e+00]]],
                                         
                                         
                                                 [[[ 1.9554e+01, -1.3538e+01,  2.3471e+01, -1.4669e+01, -8.0876e+00],
                                                   [ 5.9935e+00, -1.4617e+01,  1.0030e+01, -1.6091e+01, -4.0002e+00],
                                                   [ 9.4754e+00, -9.2002e+00,  1.6508e+00, -1.4299e+00,  9.2735e-01],
                                                   [ 4.1938e+00, -6.5662e+00,  1.6308e-01, -1.0217e+01, -4.1529e+00],
                                                   [-9.7351e+00,  6.0219e+00, -1.8128e+01,  1.9980e+01, -1.3195e+01]],
                                         
                                                  [[-7.9177e+00,  1.2681e+01, -5.1935e+00, -7.1072e+00, -1.8560e+00],
                                                   [-1.0267e+01, -1.7580e+00, -8.9404e+00, -1.5384e+01,  2.9346e+00],
                                                   [-3.4798e+00,  1.7023e+00, -3.2818e+00,  4.4891e+00, -1.3794e-02],
                                                   [-4.7645e+00, -7.2907e+00, -4.1505e+00, -2.3790e+00,  1.4794e+00],
                                                   [ 2.1159e+00, -6.0181e+00,  6.7175e+00, -8.3804e+00,  9.8221e+00]]]])

            let t1s23p32 = combo.tensor([[[[ 0.0000,  0.0000,  0.0000],
                                           [-3.2326, -1.2749, -3.3366],
                                           [-1.7567, -0.9686, -2.1970],
                                           [-1.4939,  2.3154, -0.4978],
                                           [ 5.1554, -0.8580, -1.6888]],
                                 
                                          [[ 0.0000,  0.0000,  0.0000],
                                           [-1.6604, -0.3488,  1.1702],
                                           [-2.1695, -0.4674,  4.5114],
                                           [ 0.6170,  0.3235,  4.8016],
                                           [ 3.4517,  0.1421,  1.8764]],
                                 
                                          [[ 0.0000,  0.0000,  0.0000],
                                           [-2.1929, -4.4554,  2.9319],
                                           [ 3.2436,  8.7959,  1.2112],
                                           [ 3.8262,  3.5775,  5.6113],
                                           [-1.9036, -1.5468,  0.0142]]],
                                 
                                 
                                         [[[ 0.0000,  0.0000,  0.0000],
                                           [-1.5589, -0.6350,  0.7208],
                                           [ 4.4022,  0.2401,  4.6891],
                                           [-1.1714, -9.2079, -4.1885],
                                           [ 1.9395,  5.5157,  3.1695]],
                                 
                                          [[ 0.0000,  0.0000,  0.0000],
                                           [ 0.8601,  0.7594,  2.9743],
                                           [ 3.9042, -0.1467,  1.2048],
                                           [ 0.3783, -3.1536,  5.7121],
                                           [ 1.4443,  1.0067,  4.0964]],
                                 
                                          [[ 0.0000,  0.0000,  0.0000],
                                           [ 0.8332, -8.5063, -0.7146],
                                           [-3.2521, -4.7905, -0.4381],
                                           [-0.6507,  4.6023, -2.5422],
                                           [-1.2853, -0.8996,  0.0497]]]])
            let t3s23p32 = dsharp.convTranspose2d(t1s23p32, t2, strides=[2;3], paddings=[3;2])
            let t3s23p32Correct = combo.tensor([[[[ -1.8653,   0.2227,  14.6477,  -6.0192,   4.7756],
                                                   [-13.3418,  -2.7359,   5.2295, -16.5054,  14.1446],
                                                   [  6.1026,   4.8817, -24.8045,  12.7971,   0.5372],
                                                   [  2.5602,   1.7874,  -4.4904,  23.0840,  14.9680],
                                                   [  5.0679,  -1.9103, -13.0832,   4.7500,  -0.2295]],
                                         
                                                  [[ -6.8511,   6.6723,  -3.2659,  -3.7369,  -4.8906],
                                                   [  5.9968,  -5.4707,  -7.2737,   9.2400,   4.7367],
                                                   [ -2.9852, -12.8116,   8.7978,   1.1795,  -3.6593],
                                                   [  6.1712,   4.0169,   7.1913,   2.4910,   4.5172],
                                                   [ -0.6795,  -5.3371,   1.6673,   5.0634, -10.2140]]],
                                         
                                         
                                                 [[[  0.6744,  -2.8392,  25.4059, -12.5133,  -3.0779],
                                                   [ 16.9127,  -1.2134,   7.4218, -16.6941,   1.7505],
                                                   [ -7.3768,  -2.0289,  14.0095,  -6.6914,  -7.1047],
                                                   [ -7.0010,  -2.8175,  -4.1471, -34.6982,  11.0266],
                                                   [ -1.1221,  15.8524,  -2.6974,   8.9922,   1.0017]],
                                         
                                                  [[ -1.6517,  12.2203,  -7.2672,  -3.4317,  -0.1174],
                                                   [-16.0018,   1.0966,  -8.0625,  -9.1513,   7.0926],
                                                   [  8.2073,   7.1299,  -4.6647,  -1.3393,   0.3008],
                                                   [  1.7930, -18.2269,  -2.2634,  21.3948,  -0.9061],
                                                   [ -1.8381,  -5.7929,  10.4651, -14.8689,   1.3356]]]])

            let t1p1d2 = combo.tensor([[[[ -1.4935,  -0.9143,   1.9049,  -3.4720],
                                           [ -0.0765,  -6.4800,  -5.8089,   1.8598],
                                           [ -4.9432,   0.7761,   4.2125,  -2.6577],
                                           [  3.2395,  -1.6309,   3.0082,   5.5846]],
                                 
                                          [[  0.8980,  -2.8900,   0.8966,  -1.4387],
                                           [ -1.3534,   3.0437,   1.8584,   2.4703],
                                           [  1.6080,   2.3951,   0.9763,   4.3595],
                                           [  2.8455,   4.4696,  -0.3192,  -0.7607]],
                                 
                                          [[  1.8914,  -2.6172,  -0.7348,   1.3387],
                                           [  1.5050,   6.0453,  -5.7601,  -5.8269],
                                           [ -1.9717,   3.9505,  -0.5285,  -4.7867],
                                           [ -1.6577,  -3.5756,  -2.8567,   1.3185]]],
                                 
                                 
                                         [[[  2.0819,   0.7653,  -1.9882,   1.9447],
                                           [ -1.2180,   0.8260,  -3.9099,   4.3648],
                                           [  1.3846,   1.3559,  -1.9401,   4.3954],
                                           [ -2.5044,   2.0114,   5.6507,   6.7569]],
                                 
                                          [[ -0.6521,  -2.0061,  -0.0293,   0.6525],
                                           [ -1.3767,  -2.5563,  -1.3317,  -0.2047],
                                           [ -1.4225,   2.7875,   0.7057,  -4.1782],
                                           [ -2.0456,   1.1288,   3.3816,  -3.9975]],
                                 
                                          [[-10.3514,   6.6914,   7.5311,  -4.3119],
                                           [  5.0292,  12.8169,  -0.9108,  -7.8711],
                                           [  2.2663,  -4.1982,   0.8442,   5.2652],
                                           [  2.8034,  -1.7984,  -8.3519,   4.9279]]]])
            let t3p1d2 = dsharp.convTranspose2d(t1p1d2, t2, padding=1, dilation=2)
            let t3p1d2Correct = combo.tensor([[[[  8.4979,   8.1578,  -0.9246,  -9.1176, -10.5874,  -6.6205],
                                                   [  5.2079, -13.8357,  28.0654,  -0.8426,  -2.0303,   7.9319],
                                                   [ 18.6946,   1.6702, -26.3933,  37.9199,  30.4063,  -2.4531],
                                                   [ -4.3368,   2.0038, -10.4593,  -2.6176,  11.9491,  -2.7395],
                                                   [  8.2586,  -1.6561,   0.9127,  12.4730,   1.7779, -16.6218],
                                                   [  3.3383,   2.1986,   1.1473,  -5.9113,  15.9062,  -0.5134]],
                                         
                                                  [[ -7.2998,  -3.4685,   9.0009,   8.7258,  14.5827,   0.4311],
                                                   [  7.0128,  13.9733,  -1.8878,  -1.3741,   3.4671,  -4.8869],
                                                   [ -5.7934,  12.6768,  27.1129, -11.6433, -22.6556, -17.3718],
                                                   [ -6.8525,   2.3969,  11.4891, -13.2466,   4.4319,   8.0043],
                                                   [  9.2020,   7.0856,  -1.6636,  -5.9827, -16.3868,  -3.3851],
                                                   [  0.3902,  -6.7436,   3.0319,  -6.3136,  -8.1966,   2.7587]]],
                                         
                                         
                                                 [[[ -7.4104,  -0.1922,   1.2678, -10.2139,  -4.0052,  -8.8859],
                                                   [  7.7276,  38.4212, -34.7024, -36.3262,  34.2309,   7.4849],
                                                   [  6.4525,  -5.1866, -56.6429,  10.9949,  52.3020,  18.4749],
                                                   [ -5.5316,   7.2902,  -0.3738, -26.0990,  -8.4270,  17.7335],
                                                   [ -2.9813, -20.0934, -20.1420,  36.3213,  10.0719, -17.1758],
                                                   [  0.5118,  -0.3265,  -2.8530,   4.9610, -15.5394,   2.0790]],
                                         
                                                  [[ -7.3016,  -7.5058,   3.0433,  11.1989,  16.5089,   6.5538],
                                                   [ -2.3799, -26.2130,  11.1512,  10.6192, -17.7198,   2.4928],
                                                   [-13.2641,  21.5614,  24.2401,  10.6934, -18.6836, -29.0676],
                                                   [  5.6654,  -8.2564,  -3.2337,  10.4815,   1.4508,  -1.1905],
                                                   [  3.8546,  24.1948,   3.2743, -13.9923,  -0.1919,   5.1839],
                                                   [ -1.4752,   5.4015,  -9.5561,   2.3548,   8.7044,  -1.3711]]]])

            let t1p22d23 = combo.tensor([[[[-1.2098e+00, -2.4110e+00, -1.0279e+00, -3.9876e+00],
                                           [ 5.6019e-01, -1.5290e+00,  1.2401e+00,  1.2266e-01],
                                           [ 1.9778e+00, -1.5180e+00, -1.3277e+00,  1.1161e+00],
                                           [ 7.8095e-01,  6.0152e+00, -1.1348e+00, -1.9066e+00],
                                           [ 2.4955e+00,  3.9095e+00,  1.1106e+00,  1.6221e+00],
                                           [-4.0381e+00, -3.6661e+00, -1.3509e+00, -4.5592e+00]],
                                 
                                          [[-1.0937e+00, -2.0893e-01,  1.9642e+00, -6.0165e-01],
                                           [-7.3989e-01, -5.2584e+00, -1.4846e+00,  2.1132e-01],
                                           [ 1.6045e+00, -3.0431e+00,  1.5164e+00,  2.7907e+00],
                                           [ 3.3791e+00,  5.5568e+00,  1.0130e+00,  4.2790e-01],
                                           [ 1.2678e+00,  3.2593e+00,  2.7528e+00, -1.6473e+00],
                                           [-4.9622e+00, -1.8143e+00, -2.2499e+00,  6.0567e-01]],
                                 
                                          [[-3.4310e+00, -2.9905e+00,  6.9098e-01, -3.8573e+00],
                                           [-1.5282e+00,  2.4647e-01,  2.8520e+00,  1.1805e+00],
                                           [ 4.1877e+00, -1.6244e+00, -3.7407e+00, -4.6168e+00],
                                           [-1.7002e+00,  1.5955e+00,  6.4699e+00,  2.2116e+00],
                                           [-5.5796e-01,  1.9423e+00, -1.5028e+00, -1.4009e+00],
                                           [ 2.4800e+00,  6.2988e-01,  1.3072e+00, -6.6665e+00]]],
                                 
                                 
                                         [[[-3.1804e+00, -5.1830e-01, -1.1245e+00, -2.0020e+00],
                                           [ 5.1911e-01, -1.7104e+00,  2.2359e+00,  4.3109e-02],
                                           [-4.8944e+00,  4.8992e+00,  1.6799e+00, -3.3535e+00],
                                           [ 1.4257e+00,  3.6713e+00, -4.5776e-01,  1.3292e+00],
                                           [ 2.8698e+00, -1.7510e+00,  5.5438e-01,  5.5704e-01],
                                           [-1.1954e+00,  6.5019e-01,  1.9188e+00,  8.1933e-02]],
                                 
                                          [[-4.6997e-01, -1.3293e+00, -6.7385e-01,  4.6287e+00],
                                           [-1.6234e+00, -1.0411e+00,  1.0147e+00,  1.0878e-01],
                                           [-5.8939e-01,  1.6040e+00, -7.2406e-01, -1.0665e+00],
                                           [ 1.8123e+00,  1.9490e+00, -4.8444e+00, -1.4087e+00],
                                           [ 5.6853e-01, -2.5669e-01,  3.1855e-01,  3.0923e+00],
                                           [-9.9076e-01,  4.7172e-03,  2.6959e+00, -1.8670e-01]],
                                 
                                          [[-6.2282e+00,  8.8515e-01, -2.2936e+00,  9.4559e-01],
                                           [-2.9560e+00,  9.6039e-01,  5.5681e+00,  1.3379e+00],
                                           [-4.0362e+00,  9.9716e+00,  1.6734e+00, -4.0311e+00],
                                           [ 3.0872e+00, -1.5992e+00, -7.6902e-01,  1.6764e+00],
                                           [ 4.4828e-01,  2.8493e+00,  5.6855e-01, -5.2895e+00],
                                           [ 2.8623e+00,  3.1194e+00, -3.9290e+00, -2.4554e+00]]]])
            let t3p22d23 = dsharp.convTranspose2d(t1p22d23, t2, paddings=[2;2], dilations=[2;3])
            let t3p22d23Correct = combo.tensor([[[[ 4.6280e+00,  2.4009e+01,  9.5642e+00, -3.9685e+00,  1.6077e+01,
                                                    -1.0013e+01],
                                                   [ 1.7769e+00,  6.6014e+00,  9.8511e+00, -8.8935e+00, -5.1148e-01,
                                                     2.1805e+01],
                                                   [ 7.0965e+00, -1.6816e+01,  1.6153e+01,  1.2492e+01,  2.1143e+01,
                                                     3.5813e+00],
                                                   [-1.7276e+00,  8.6048e+00, -1.6800e+01, -2.2964e+01, -3.5034e+01,
                                                    -1.3067e+01],
                                                   [-2.4116e+00, -7.3908e+00, -9.2208e+00,  6.0162e+00,  1.5574e+01,
                                                    -4.6266e+00],
                                                   [ 7.8526e+00,  6.3514e+00, -1.7287e+00, -6.4759e+00,  2.7634e+01,
                                                     8.5755e+00]],
                                         
                                                  [[-2.0408e-01,  7.3995e+00,  2.9141e-02,  4.1133e+00, -3.2888e+00,
                                                    -8.5523e-01],
                                                   [-6.6055e+00, -6.0599e+00, -2.8484e+00, -3.6159e-01, -5.8471e+00,
                                                    -1.9475e+01],
                                                   [ 1.1019e+01,  7.7522e+00, -6.4308e+00, -3.1367e+00, -1.0815e+01,
                                                     -1.5296e+01],
                                                   [-1.5233e+01, -7.2742e+00,  5.1823e+00,  1.1571e+01,  2.7042e+01,
                                                     2.2181e+01],
                                                   [ 1.4806e+00,  2.1242e+00,  9.2378e-01, -7.1384e+00, -3.4593e+00,
                                                     7.8981e+00],
                                                   [ 9.8048e-01,  1.0242e+01, -8.3664e-01,  7.4823e+00, -1.0282e+01,
                                                     -3.0258e+00]]],
                                         
                                         
                                                 [[[-1.6121e+00,  1.7316e+01,  5.1522e+00,  1.0198e+01, -2.4169e+01,
                                                     9.4833e+00],
                                                   [-9.8801e+00,  7.7356e+00,  2.7915e+00, -1.9914e+01, -1.9059e+00,
                                                     1.2361e+01],
                                                   [-1.6598e+00,  4.3962e+01, -3.7071e+01, -2.9644e+00,  2.4383e+00,
                                                     9.3214e+00],
                                                   [ 9.0554e+00, -9.5691e+00,  1.2193e+00,  3.6328e-01, -1.6113e+01,
                                                     -2.1219e+00],
                                                   [-2.1859e+00, -2.8941e+00, -1.8096e+01, -4.8515e+00,  9.2880e+00,
                                                     2.7867e+01],
                                                   [-1.0800e+01, -1.3079e+01, -1.0380e+01,  9.0377e+00,  1.7603e+01,
                                                     1.8126e+00]],
                                         
                                                  [[ 4.2091e+00, -6.5818e+00, -5.2048e+00, -3.0196e+00,  2.8719e+00,
                                                     2.3581e-01],
                                                   [-1.4303e+01, -7.8386e+00,  8.8451e-01,  3.7105e+00, -2.3244e+00,
                                                    -1.2665e+01],
                                                   [-1.0179e+00,  6.6568e+00,  8.0111e+00, -2.0887e+00, -2.1675e+01,
                                                     1.8483e+01],
                                                   [ 9.8004e+00, -5.4378e-01, -3.3078e+00,  4.2812e+00,  1.2749e+01,
                                                     8.1681e+00],
                                                   [-1.8430e+00,  2.6286e+00,  1.2923e+01,  2.7304e+00, -7.8955e+00,
                                                     4.8717e+00],
                                                   [ 4.5538e+00,  7.7849e+00, -1.1294e+00, -4.1387e-01,  1.0196e+00,
                                                     3.7936e+00]]]])

            let t1s3p6d3 = combo.tensor([[[[-0.4797,  1.2067,  0.8487, -0.9267],
                                           [ 0.0488,  2.9384, -2.8182, -2.7154],
                                           [ 0.9480, -2.3075, -4.5708, -2.2337],
                                           [ 0.1669,  4.3160,  2.9409, -0.7828]],
                                 
                                          [[-0.1887,  0.4049, -1.9126,  0.4331],
                                           [ 0.2998,  0.4966,  1.3509,  2.1225],
                                           [-0.3169, -2.3733, -4.2170, -0.0781],
                                           [-0.1093,  2.5067,  3.0689,  5.2431]],
                                 
                                          [[-2.0482,  1.2449,  0.3645,  0.2970],
                                           [ 1.1837,  8.8906, -0.6150, -0.3658],
                                           [ 1.4408,  2.9900, -8.0328, -0.4368],
                                           [ 0.8015, -0.6401, -0.4330, -0.6978]]],
                                 
                                 
                                         [[[-0.6182, -0.5837,  0.7181,  0.6395],
                                           [-1.5513, -1.4997,  0.8532,  0.0916],
                                           [ 0.0921, -0.2811,  0.0137, -2.8628],
                                           [-0.1444,  4.6484,  1.7724, -2.7309]],
                                 
                                          [[ 0.1016,  1.0336,  0.5866, -0.0869],
                                           [-0.3539,  0.7336,  1.4618,  1.5993],
                                           [ 0.6032, -0.6872, -2.0944, -1.2374],
                                           [-0.0151,  3.2930, -1.2824,  0.5289]],
                                 
                                          [[-0.8863, -0.9437, -1.2007, -0.1748],
                                           [-1.6423,  1.9599, -2.7169,  1.5076],
                                           [-1.4196,  1.2534, -3.9894,  3.1457],
                                           [-0.2654, -2.1439,  1.0330,  0.4360]]]])
            let t3s3p6d3 = dsharp.convTranspose2d(t1s3p6d3, t2, stride=3, padding=6, dilation=3)
            let t3s3p6d3Correct = combo.tensor([[[[-38.8444,   0.0000,   0.0000,   8.3644],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [  7.0444,   0.0000,   0.0000,  90.9947]],
                                         
                                                  [[ -0.5142,   0.0000,   0.0000,  25.4986],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [ 36.8548,   0.0000,   0.0000,  -9.3262]]],
                                         
                                         
                                                 [[[-12.5651,   0.0000,   0.0000,   2.8805],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [-10.1415,   0.0000,   0.0000,  48.2164]],
                                         
                                                  [[ -3.6824,   0.0000,   0.0000, -12.8018],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [  0.0000,   0.0000,   0.0000,   0.0000],
                                                   [  5.7111,   0.0000,   0.0000, -31.2658]]]])

            Assert.True(t3Correct.allclose(t3, 0.01))
            Assert.True(t3p1Correct.allclose(t3p1, 0.01))
            Assert.True(t3p12Correct.allclose(t3p12, 0.01))
            Assert.True(t3s2Correct.allclose(t3s2, 0.01))
            Assert.True(t3s13Correct.allclose(t3s13, 0.01))
            Assert.True(t3s2p1Correct.allclose(t3s2p1, 0.01))
            Assert.True(t3s23p32Correct.allclose(t3s23p32, 0.01))
            Assert.True(t3p1d2Correct.allclose(t3p1d2, 0.01))
            Assert.True(t3p22d23Correct.allclose(t3p22d23, 0.01))
            Assert.True(t3s3p6d3Correct.allclose(t3s3p6d3, 0.01, 0.01))

    [<Test>]
    member _.TestTensorConvTranspose3D () =
        for combo in Combos.FloatingPointExcept16s do
            let t1 = combo.tensor([[[[ 0.9873,  2.7076, -0.9461],
                                       [-0.0808,  1.5441, -0.8709],
                                       [-0.8709,  0.3782,  2.0588]],

                                      [[ 1.0087, -0.8291,  0.8613],
                                       [-0.6963,  0.1493,  0.2307],
                                       [-0.0230,  1.0297,  1.7398]],

                                      [[ 2.0611, -1.6843, -1.0479],
                                       [-0.0454, -0.3567,  0.5329],
                                       [ 1.5642,  0.3775,  1.8207]]]]).unsqueeze(0)
            let t2 = combo.tensor([[[[-0.6863,  0.6292,  1.2939],
                                       [ 0.6178, -1.1568, -1.2094],
                                       [ 0.2491,  1.3155,  0.3311]],

                                      [[-0.1488,  0.1148, -2.6754],
                                       [ 1.0680,  0.5176,  0.4799],
                                       [-0.8843, -1.2587, -0.5647]],

                                      [[-0.1586,  0.1037, -0.8961],
                                       [-0.5436,  0.7449, -1.4694],
                                       [-0.5542,  0.4589,  0.9205]]],


                                     [[[-0.7661,  0.1054,  0.0801],
                                       [ 0.8272, -0.0132, -2.3537],
                                       [-0.8411,  0.6373, -0.4968]],

                                      [[ 0.4365,  1.0976, -1.0754],
                                       [ 0.6496, -0.2016, -0.5867],
                                       [ 0.7225, -0.6232,  1.1162]],

                                      [[-0.0697, -0.5219, -0.3690],
                                       [ 1.5946, -0.9011, -0.1317],
                                       [-0.5122, -1.3610, -0.1057]]]]).unsqueeze(0)
              
            let t3 = dsharp.convTranspose3d(t1, t2)
            let t3Correct = combo.tensor([[[[-0.6776, -1.2371,  3.6305,  2.9081, -1.2242],
                                               [ 0.6655, -0.5798, -3.4461, -0.7301,  0.0174],
                                               [ 0.7937,  2.2132, -0.8753,  0.5767,  3.4039],
                                               [-0.5582,  1.5194,  3.6753, -3.4734, -2.7783],
                                               [-0.2169, -1.0514,  0.7219,  2.8336,  0.6817]],

                                              [[-0.8392,  0.9142, -1.9974, -7.8834,  3.6458],
                                               [ 2.1676,  0.9441,  0.6938, -3.0770,  1.1327],
                                               [-0.9930, -0.8891, -1.5376,  2.0150, -3.1344],
                                               [-1.0463, -1.5267,  0.7838, -1.4336, -0.5480],
                                               [ 0.7644,  0.9879, -0.0247, -0.1753, -0.5864]],

                                              [[-1.7213,  2.3650, -1.0495, -3.0462, -2.8125],
                                               [ 1.9617, -4.6640,  2.4310, -3.3593,  3.9237],
                                               [-2.5857, -0.1416,  4.5485, -4.4521, -5.1023],
                                               [ 2.0645, -1.6396,  2.3854,  1.0397, -5.1477],
                                               [ 0.8926,  0.6609, -3.1227,  1.0417,  1.5156]],

                                              [[-0.4667,  0.7234, -6.6784,  5.2182,  2.0317],
                                               [ 1.7702,  0.4220, -2.9658,  1.4148, -3.4009],
                                               [-2.2808, -1.2291, -1.2356,  0.4161, -5.1288],
                                               [ 2.1092,  0.6063,  2.0487,  0.6804, -1.7714],
                                               [-1.3705, -2.8840, -3.4814, -0.7586,  0.5735]],

                                              [[-0.3269,  0.4809, -1.8555,  1.4006,  0.9390],
                                               [-1.1133,  2.5028, -3.7944,  2.0693,  1.0622],
                                               [-1.3657,  2.1418, -0.4349, -1.2597, -3.3792],
                                               [-0.8252,  1.1367, -3.5079,  0.7176, -2.1848],
                                               [-0.8669,  0.5087,  0.6042,  1.1831,  1.6760]]],


                                             [[[-0.7564, -1.9702,  1.0893,  0.1172, -0.0758],
                                               [ 0.8786,  1.0353, -2.3188, -6.3286,  2.1572],
                                               [-0.2301, -0.7514, -0.1270, -5.3238,  2.6849],
                                               [-0.6524, -1.0259,  5.5045, -2.2395, -4.4132],
                                               [ 0.7325, -0.8731, -1.0580,  1.1241, -1.0229]],

                                              [[-0.3418,  3.0070,  0.8309, -3.9259,  1.0865],
                                               [ 1.9740,  1.2583, -2.2057, -2.0378, -0.5173],
                                               [-1.1262,  2.2510, -1.0006,  5.6069, -3.5906],
                                               [-0.0575,  1.8699,  1.8174, -0.7445, -6.3896],
                                               [-0.6098, -0.0648, -0.5161, -0.2638,  1.4335]],

                                              [[-1.2076,  1.5488, -2.5398,  1.0863, -0.6611],
                                               [ 3.6711,  0.7693, -9.7912,  4.7919,  2.2017],
                                               [-3.2770,  1.9780, -3.2797,  0.7986, -2.1776],
                                               [-0.5332,  2.4850, -1.1911, -2.2108, -5.4925],
                                               [-0.8862,  2.4291, -2.9556, -1.8043,  0.8196]],

                                              [[ 0.8293,  1.0586, -4.5222,  0.5174,  0.8091],
                                               [ 2.9762, -3.5933,  0.4902,  1.3255, -0.1569],
                                               [ 0.5169, -0.9847,  2.8202, -2.1327, -4.2036],
                                               [ 1.3033,  2.2345,  2.3475, -3.3519, -0.7269],
                                               [ 1.1419, -1.1981,  0.5359, -3.1900,  1.8482]],

                                              [[-0.1437, -0.9583,  0.1916,  1.1684,  0.3867],
                                               [ 3.2899, -4.4946, -0.2590,  1.0196, -0.0586],
                                               [-1.2372, -3.3131,  2.8871,  0.0815, -0.6312],
                                               [ 2.5176, -0.5630,  2.5744, -2.3779, -0.2962],
                                               [-0.8012, -2.3222, -1.6117, -2.5178, -0.1925]]]]).unsqueeze(0)

            let t3p1 = dsharp.convTranspose3d(t1, t2, padding=1)
            let t3p1Correct = combo.tensor([[[[ 0.9441,  0.6938, -3.0770],
                                               [-0.8891, -1.5376,  2.0150],
                                               [-1.5267,  0.7838, -1.4336]],

                                              [[-4.6640,  2.4310, -3.3593],
                                               [-0.1416,  4.5485, -4.4521],
                                               [-1.6396,  2.3854,  1.0397]],

                                              [[ 0.4220, -2.9658,  1.4148],
                                               [-1.2291, -1.2356,  0.4161],
                                               [ 0.6063,  2.0487,  0.6804]]],


                                             [[[ 1.2583, -2.2057, -2.0378],
                                               [ 2.2510, -1.0006,  5.6069],
                                               [ 1.8699,  1.8174, -0.7445]],

                                              [[ 0.7693, -9.7912,  4.7919],
                                               [ 1.9780, -3.2797,  0.7986],
                                               [ 2.4850, -1.1911, -2.2108]],

                                              [[-3.5933,  0.4902,  1.3255],
                                               [-0.9847,  2.8202, -2.1327],
                                               [ 2.2345,  2.3475, -3.3519]]]]).unsqueeze(0)

            let t3p122 = dsharp.convTranspose3d(t1, t2, paddings=[1; 2; 2])
            let t3p122Correct = combo.tensor([[[[-1.5376]],

                                                  [[ 4.5485]],

                                                  [[-1.2356]]],


                                                 [[[-1.0006]],

                                                  [[-3.2797]],

                                                  [[ 2.8202]]]]).unsqueeze(0)

            let t3s2 = dsharp.convTranspose3d(t1, t2, stride=2)
            let t3s2Correct = combo.tensor([[[[-6.7761e-01,  6.2121e-01, -5.8084e-01,  1.7037e+00,  4.1528e+00,
                                                -5.9531e-01, -1.2242e+00],
                                               [ 6.0999e-01, -1.1421e+00,  4.7885e-01, -3.1322e+00, -3.8592e+00,
                                                 1.0945e+00,  1.1442e+00],
                                               [ 3.0137e-01,  1.2479e+00, -1.6300e-01,  4.5334e+00,  3.2566e+00,
                                                 -1.7926e+00, -1.4401e+00],
                                               [-4.9924e-02,  9.3474e-02,  1.0517e+00, -1.7862e+00, -2.4055e+00,
                                                 1.0074e+00,  1.0532e+00],
                                               [ 5.7757e-01, -6.5425e-01, -1.0286e+00,  2.2692e+00, -6.2927e-01,
                                                 1.4977e-01,  2.3755e+00],
                                               [-5.3806e-01,  1.0074e+00,  1.2869e+00, -4.3751e-01,  8.1462e-01,
                                                -2.3816e+00, -2.4899e+00],
                                               [-2.1691e-01, -1.1456e+00, -1.9417e-01,  4.9752e-01,  6.3803e-01,
                                                 2.7084e+00,  6.8174e-01]],

                                              [[-1.4691e-01,  1.1336e-01, -3.0443e+00,  3.1089e-01, -7.1032e+00,
                                                -1.0863e-01,  2.5313e+00],
                                               [ 1.0545e+00,  5.1107e-01,  3.3656e+00,  1.4016e+00,  2.8882e-01,
                                                 -4.8976e-01, -4.5402e-01],
                                               [-8.6109e-01, -1.2520e+00, -2.9655e+00, -3.2308e+00, -4.6937e+00,
                                                 1.0909e+00,  2.8642e+00],
                                               [-8.6301e-02, -4.1827e-02,  1.6104e+00,  7.9930e-01, -1.8915e-01,
                                                -4.5081e-01, -4.1791e-01],
                                               [ 2.0104e-01,  1.7161e-03,  9.5375e-01, -1.9002e+00, -1.4199e+00,
                                                 1.3326e+00, -5.0164e+00],
                                               [-9.3011e-01, -4.5080e-01, -1.3973e-02,  1.9577e-01,  2.3804e+00,
                                                 1.0657e+00,  9.8797e-01],
                                               [ 7.7015e-01,  1.0962e+00,  1.5728e-01, -4.7605e-01, -2.0343e+00,
                                                 -2.5915e+00, -1.1625e+00]],

                                              [[-8.4890e-01,  7.3710e-01,  5.6003e-01, -2.4080e-01, -3.9402e+00,
                                                 4.4382e-01,  1.9623e+00],
                                               [ 8.6515e-02, -4.3149e-01, -4.6548e+00,  2.9759e+00, -1.9294e+00,
                                                 -1.7011e+00,  3.4855e-01],
                                               [ 1.9484e-01,  1.3335e+00, -1.6401e+00,  4.0610e-01,  1.7460e+00,
                                                 7.5368e-01,  4.9317e-01],
                                               [-3.8631e-01,  7.4535e-01,  2.1371e-01,  9.7747e-01, -1.8335e+00,
                                                -9.1553e-01,  1.0007e+00],
                                               [ 2.5271e-02, -1.0580e+00, -1.1396e+00,  1.5921e+00,  1.4837e+00,
                                                 1.2120e+00, -3.1902e-01],
                                               [ 4.5918e-01, -6.2202e-01,  1.7381e+00, -9.0946e-01, -1.8453e+00,
                                                 -4.7914e-01, -5.1294e+00],
                                               [ 4.7689e-01, -4.2998e-01, -7.6240e-01,  1.5281e+00, -1.8506e-02,
                                                 3.2336e+00,  2.4713e+00]],

                                              [[-1.5009e-01,  1.1582e-01, -2.5754e+00, -9.5193e-02,  2.0899e+00,
                                                 9.8899e-02, -2.3044e+00],
                                               [ 1.0773e+00,  5.2215e-01, -4.0141e-01, -4.2916e-01,  5.2209e-01,
                                                 4.4587e-01,  4.1333e-01],
                                               [-7.8844e-01, -1.3496e+00,  2.0044e+00,  1.0607e+00, -7.2726e-01,
                                                -1.0577e+00, -1.1035e+00],
                                               [-7.4372e-01, -3.6046e-01, -1.7473e-01,  7.7268e-02,  3.1800e-01,
                                                 1.1941e-01,  1.1070e-01],
                                               [ 6.1924e-01,  8.7386e-01,  1.6961e-01, -6.9657e-02, -3.3020e+00,
                                                 -9.0590e-02, -4.7850e+00],
                                               [-2.4604e-02, -1.1925e-02,  1.0887e+00,  5.3302e-01,  2.3523e+00,
                                                 9.0061e-01,  8.3490e-01],
                                               [ 2.0373e-02,  2.8997e-02, -8.9760e-01, -1.2961e+00, -2.1200e+00,
                                                 -2.1900e+00, -9.8242e-01]],

                                              [[-1.5746e+00,  1.4015e+00,  3.0505e+00, -1.1458e+00, -8.5383e-01,
                                                -5.6999e-01, -2.1277e+00],
                                               [ 7.2511e-01, -1.6330e+00, -4.5649e+00,  1.3309e+00,  2.1396e+00,
                                                 1.8538e+00,  1.6567e-03],
                                               [ 9.5978e-02,  3.0736e+00,  2.4374e+00, -2.8052e+00, -3.0569e+00,
                                                 -6.2395e-01,  9.2870e-01],
                                               [ 3.5049e-01, -4.6614e-01,  7.7661e-01,  5.2383e-01,  4.1591e-01,
                                                 -4.4464e-01, -9.8344e-01],
                                               [-6.9532e-01,  6.0249e-01,  7.9457e-01, -5.6395e-02, -1.9356e+00,
                                                 2.1329e+00,  1.1855e+00],
                                               [ 9.7896e-01, -1.8267e+00, -2.1844e+00,  3.3026e-01, -1.7905e+00,
                                                 -8.1025e-01, -4.7584e+00],
                                               [ 4.0237e-01,  2.0471e+00,  2.0140e-02,  9.6920e-01,  5.6216e-01,
                                                 3.1936e+00,  2.2044e+00]],

                                              [[-3.0669e-01,  2.3666e-01, -5.2638e+00, -1.9339e-01,  4.6621e+00,
                                                -1.2032e-01,  2.8035e+00],
                                               [ 2.2014e+00,  1.0669e+00, -8.0981e-01, -8.7187e-01, -1.9274e+00,
                                                 -5.4243e-01, -5.0285e-01],
                                               [-1.8160e+00, -2.5996e+00,  5.0024e-01,  2.0791e+00,  2.7528e+00,
                                                 1.3802e+00, -8.3402e-01],
                                               [-4.8506e-02, -2.3509e-02, -4.0277e-01, -1.8465e-01,  3.9798e-01,
                                                 2.7585e-01,  2.5572e-01],
                                               [-1.9259e-01,  2.3677e-01, -3.9000e+00,  4.9234e-01, -1.5508e+00,
                                                -4.6172e-01, -5.1720e+00],
                                               [ 1.6706e+00,  8.0970e-01,  1.1538e+00,  1.9542e-01,  2.1257e+00,
                                                 9.4246e-01,  8.7370e-01],
                                               [-1.3833e+00, -1.9689e+00, -1.2171e+00, -4.7519e-01, -1.8233e+00,
                                                -2.2917e+00, -1.0281e+00]],

                                              [[-3.2691e-01,  2.1379e-01, -1.5799e+00, -1.7471e-01,  1.6755e+00,
                                                -1.0869e-01,  9.3903e-01],
                                               [-1.1205e+00,  1.5353e+00, -2.1130e+00, -1.2546e+00,  3.0446e+00,
                                                -7.8053e-01,  1.5398e+00],
                                               [-1.1351e+00,  9.4124e-01,  2.9280e+00, -8.1000e-01, -7.3459e-01,
                                                -4.2564e-01, -1.4421e+00],
                                               [ 2.4689e-02, -3.3828e-02,  2.6065e-01, -2.6570e-01,  2.3445e-01,
                                                 3.9693e-01, -7.8304e-01],
                                               [-2.2292e-01,  1.4141e-01, -1.3057e+00, -1.2455e-01, -1.2508e+00,
                                                 4.3342e-01, -1.1410e+00],
                                               [-8.5033e-01,  1.1651e+00, -2.5037e+00,  2.8120e-01, -1.5445e+00,
                                                 1.3562e+00, -2.6753e+00],
                                               [-8.6687e-01,  7.1788e-01,  1.2307e+00,  1.7326e-01, -6.6148e-01,
                                                 8.3559e-01,  1.6760e+00]]],


                                             [[[-7.5636e-01,  1.0406e-01, -1.9952e+00,  2.8539e-01,  9.4179e-01,
                                                -9.9724e-02, -7.5817e-02],
                                               [ 8.1670e-01, -1.3030e-02, -8.4078e-02, -3.5733e-02, -7.1557e+00,
                                                 1.2486e-02,  2.2269e+00],
                                               [-7.6851e-01,  6.2065e-01, -3.9573e+00,  1.8882e+00,  2.4143e-01,
                                                -6.9473e-01,  4.0029e-01],
                                               [-6.6841e-02,  1.0664e-03,  1.4675e+00, -2.0378e-02, -4.3548e+00,
                                                 1.1493e-02,  2.0498e+00],
                                               [ 7.3512e-01, -1.4328e-01, -1.6181e+00,  1.0239e+00, -1.5816e+00,
                                                 -3.3798e-01,  5.9767e-01],
                                               [-7.2039e-01,  1.1493e-02,  2.3626e+00, -4.9912e-03,  8.1287e-01,
                                                -2.7170e-02, -4.8459e+00],
                                               [ 7.3248e-01, -5.5497e-01,  1.1458e-01,  2.4101e-01, -1.9196e+00,
                                                 1.3120e+00, -1.0229e+00]],

                                              [[ 4.3095e-01,  1.0837e+00,  1.2014e-01,  2.9720e+00, -3.3247e+00,
                                                 -1.0385e+00,  1.0174e+00],
                                               [ 6.4138e-01, -1.9905e-01,  1.1797e+00, -5.4590e-01, -2.2031e+00,
                                                 1.9075e-01,  5.5506e-01],
                                               [ 6.7800e-01, -7.0397e-01,  3.8190e+00,  7.4930e-03,  2.9795e-01,
                                                 -3.6628e-01, -1.1950e-01],
                                               [-5.2492e-02,  1.6291e-02,  1.0505e+00, -3.1132e-01, -1.4716e+00,
                                                 1.7558e-01,  5.1091e-01],
                                               [-4.3850e-01, -9.0554e-01,  2.1269e+00, -5.4716e-01,  1.5862e+00,
                                                 2.8025e+00, -3.1860e+00],
                                               [-5.6574e-01,  1.7558e-01,  7.5659e-01, -7.6251e-02,  1.1156e+00,
                                                -4.1509e-01, -1.2078e+00],
                                               [-6.2916e-01,  5.4272e-01, -6.9879e-01, -2.3569e-01,  1.9095e+00,
                                                -1.2830e+00,  2.2979e+00]],

                                              [[-8.4161e-01, -4.0897e-01,  1.6287e-01, -1.5005e+00, -1.6594e+00,
                                                 5.8459e-01,  4.1813e-01],
                                               [ 2.4088e+00, -9.0297e-01,  1.1275e+00, -2.4289e+00,  7.9854e-01,
                                                 8.4120e-01, -1.9027e+00],
                                               [-8.1502e-01, -7.3211e-01, -1.5431e+00, -5.0035e+00, -7.8804e-01,
                                                 2.3154e+00,  1.1917e-02],
                                               [-7.0487e-01,  8.2002e-02,  4.2354e+00, -1.3934e+00, -1.7526e+00,
                                                 7.8171e-01, -4.2824e-01],
                                               [ 7.0546e-01,  1.1831e-01, -1.0576e+00, -2.0953e+00, -1.5189e+00,
                                                 4.4112e-01, -6.4277e-01],
                                               [-1.4078e+00,  7.8505e-01,  1.6238e+00, -3.5439e-01,  2.2488e+00,
                                                -1.8782e+00, -4.3663e+00],
                                               [ 4.6543e-01,  1.1706e+00, -9.5626e-01,  1.4146e-01, -3.0695e+00,
                                                 -1.6933e+00, -1.0821e+00]],

                                              [[ 4.4030e-01,  1.1072e+00, -1.4466e+00, -9.1001e-01,  1.2675e+00,
                                                 9.4543e-01, -9.2626e-01],
                                               [ 6.5529e-01, -2.0337e-01, -1.1304e+00,  1.6715e-01,  1.0459e+00,
                                                 -1.7366e-01, -5.0531e-01],
                                               [ 4.2479e-01, -1.3930e+00,  1.3409e+00,  6.8051e-01, -3.6292e-01,
                                                 -2.8358e-01,  7.1332e-01],
                                               [-4.5237e-01,  1.4039e-01,  5.0549e-01, -3.0095e-02,  6.2284e-02,
                                                -4.6508e-02, -1.3533e-01],
                                               [-5.1313e-01,  4.0867e-01, -1.9516e-01,  1.0372e+00, -1.4634e-02,
                                                 1.7659e+00, -1.6135e+00],
                                               [-1.4965e-02,  4.6446e-03,  6.8244e-01, -2.0760e-01,  5.2616e-01,
                                                -3.5078e-01, -1.0207e+00],
                                               [-1.6643e-02,  1.4356e-02,  7.1819e-01, -6.4171e-01,  2.4062e+00,
                                                -1.0843e+00,  1.9419e+00]],

                                              [[-1.6494e+00, -3.0921e-01,  1.1411e+00,  2.5517e-01,  9.1365e-01,
                                                -5.5999e-01, -4.0179e-01],
                                               [ 3.3135e+00, -9.3616e-01, -7.6996e+00,  7.6930e-01,  4.5803e+00,
                                                 -7.6233e-01,  2.3530e+00],
                                               [-2.1669e+00,  2.9930e-01,  1.2267e+00, -6.0504e-02,  8.5671e-01,
                                                -1.9043e+00,  3.8715e-01],
                                               [-1.1480e+00,  6.2808e-01,  1.4158e-01, -1.2980e-01,  1.6286e+00,
                                                -2.1490e-01, -1.2847e+00],
                                               [-8.0186e-01,  1.0957e+00,  9.2596e-02, -9.2809e-01, -2.2707e+00,
                                                -6.9050e-01, -7.8523e-01],
                                               [ 1.2572e+00,  1.1544e-04, -1.7244e+00, -9.3285e-01,  3.2562e+00,
                                                 -1.5918e+00, -4.5146e+00],
                                               [-1.3039e+00,  1.0282e+00, -1.6197e+00, -1.1608e+00, -2.7190e+00,
                                                -1.2076e+00, -1.0886e+00]],

                                              [[ 8.9968e-01,  2.2624e+00, -2.9517e+00, -1.8488e+00,  1.3539e+00,
                                                 -1.1502e+00,  1.1269e+00],
                                               [ 1.3390e+00, -4.1556e-01, -2.3034e+00,  3.3958e-01,  3.0738e-01,
                                                 2.1127e-01,  6.1475e-01],
                                               [ 1.4693e+00, -1.3344e+00,  9.7688e-01,  6.5812e-01, -2.0208e+00,
                                                 1.2380e+00, -1.7427e+00],
                                               [-2.9503e-02,  9.1565e-03, -2.0508e-01,  7.1917e-02,  5.5545e-01,
                                                -1.0744e-01, -3.1263e-01],
                                               [ 6.4996e-01,  1.7452e+00, -1.8257e+00,  6.3668e-01,  3.7559e-01,
                                                 1.6663e+00, -1.3631e+00],
                                               [ 1.0162e+00, -3.1537e-01, -6.7241e-01, -7.6114e-02,  9.6129e-01,
                                                 -3.6708e-01, -1.0681e+00],
                                               [ 1.1301e+00, -9.7481e-01,  2.0186e+00, -2.3527e-01,  1.7367e+00,
                                                 -1.1346e+00,  2.0322e+00]],

                                              [[-1.4373e-01, -1.0757e+00, -6.4308e-01,  8.7907e-01,  6.9455e-01,
                                                 5.4691e-01,  3.8665e-01],
                                               [ 3.2868e+00, -1.8573e+00, -2.9573e+00,  1.5177e+00, -1.4491e+00,
                                                 9.4426e-01,  1.3803e-01],
                                               [-1.0525e+00, -2.7815e+00,  6.8638e-01,  2.4785e+00,  8.0928e-01,
                                                 1.1480e+00, -8.5826e-02],
                                               [-7.2421e-02,  4.0924e-02, -5.6283e-01,  3.2143e-01,  8.9676e-01,
                                                -4.8020e-01, -7.0194e-02],
                                               [-8.5815e-02, -7.5458e-01, -4.1599e-01,  2.8844e-01, -5.0149e-01,
                                                -1.6755e+00, -7.2815e-01],
                                               [ 2.4943e+00, -1.4095e+00,  3.9596e-01, -3.4019e-01,  2.8536e+00,
                                                 -1.6406e+00, -2.3982e-01],
                                               [-8.0118e-01, -2.1289e+00, -3.5876e-01, -5.1380e-01, -9.7246e-01,
                                                -2.4779e+00, -1.9252e-01]]]]).unsqueeze(0)

            let t3s132 = dsharp.convTranspose3d(t1, t2, strides=[1;3;2])
            let t3s132Correct = combo.tensor([[[[-6.7761e-01,  6.2121e-01, -5.8084e-01,  1.7037e+00,  4.1528e+00,
                                                  -5.9531e-01, -1.2242e+00],
                                                 [ 6.0999e-01, -1.1421e+00,  4.7885e-01, -3.1322e+00, -3.8592e+00,
                                                   1.0945e+00,  1.1442e+00],
                                                 [ 2.4591e-01,  1.2988e+00,  1.0013e+00,  3.5619e+00,  6.6093e-01,
                                                   -1.2446e+00, -3.1330e-01],
                                                 [ 5.5458e-02, -5.0842e-02, -1.1643e+00,  9.7157e-01,  2.5957e+00,
                                                   -5.4796e-01, -1.1268e+00],
                                                 [-4.9924e-02,  9.3474e-02,  1.0517e+00, -1.7862e+00, -2.4055e+00,
                                                   1.0074e+00,  1.0532e+00],
                                                 [-2.0126e-02, -1.0630e-01,  3.5784e-01,  2.0313e+00,  2.9439e-01,
                                                  -1.1456e+00, -2.8838e-01],
                                                 [ 5.9770e-01, -5.4795e-01, -1.3864e+00,  2.3797e-01, -9.2366e-01,
                                                   1.2954e+00,  2.6639e+00],
                                                 [-5.3806e-01,  1.0074e+00,  1.2869e+00, -4.3751e-01,  8.1462e-01,
                                                  -2.3816e+00, -2.4899e+00],
                                                 [-2.1691e-01, -1.1456e+00, -1.9417e-01,  4.9752e-01,  6.3803e-01,
                                                   2.7084e+00,  6.8174e-01]],

                                                [[-8.3922e-01,  7.4805e-01, -1.1701e+00, -2.1076e-01, -8.7671e+00,
                                                   4.3332e-01,  3.6458e+00],
                                                 [ 1.6777e+00, -6.5582e-01,  1.6334e+00,  2.3607e+00,  1.8237e+00,
                                                   -1.4862e+00, -1.4957e+00],
                                                 [-6.2186e-01,  8.4231e-02, -2.8244e+00, -4.4988e+00, -7.5218e-01,
                                                   2.3240e+00,  8.1946e-01],
                                                 [ 4.8995e-01, -4.4742e-01, -1.0170e+00,  2.7122e-01, -3.9667e+00,
                                                   4.5149e-02,  2.6284e+00],
                                                 [-5.1653e-01,  7.6371e-01,  2.5448e+00,  6.2662e-01, -2.2715e-01,
                                                  -7.1766e-01, -6.9689e-01],
                                                 [-1.0198e-01, -8.1433e-01, -1.5133e+00, -1.7472e+00,  5.1406e-03,
                                                   1.3997e+00,  5.6814e-01],
                                                 [ 1.4539e-01, -1.1449e-01,  1.5371e+00,  6.9132e-01, -1.1799e+00,
                                                   1.3311e+00, -3.2570e+00],
                                                 [-9.4435e-01, -4.2415e-01,  6.5008e-01, -9.9539e-01,  2.2100e+00,
                                                  -9.4693e-01, -1.1162e+00],
                                                 [ 7.6441e-01,  1.0659e+00,  4.0613e-01,  8.7852e-01, -1.2599e+00,
                                                   -3.0272e-01, -5.8641e-01]],

                                                [[-1.7213e+00,  1.5151e+00, -6.6590e-02, -8.7412e-01, -1.6465e+00,
                                                  -6.5858e-01, -2.8125e+00],
                                                 [ 1.8141e+00, -1.1268e+00, -6.8575e+00,  3.5361e+00, -1.5526e+00,
                                                   9.5334e-01,  3.0709e+00],
                                                 [-9.2582e-01,  1.8949e+00, -1.6511e-01,  7.0500e-02,  1.9044e+00,
                                                  -2.8969e+00, -1.7043e+00],
                                                 [ 1.4760e-01, -1.1691e-01,  1.8544e+00, -4.7139e-02, -2.5066e+00,
                                                   2.7146e-01,  8.5278e-01],
                                                 [-7.2786e-01, -3.6811e-01, -1.0609e+00,  1.6401e+00, -7.1685e-01,
                                                  -1.1457e+00,  7.4589e-01],
                                                 [ 6.4928e-01,  7.7968e-01, -7.7280e-01,  5.1527e-02,  1.6304e+00,
                                                   1.0984e-02, -7.5546e-01],
                                                 [-9.3201e-01,  8.9124e-01,  2.3937e+00,  3.9500e-01, -4.4403e+00,
                                                   1.5589e+00, -4.1439e+00],
                                                 [ 1.4152e+00, -2.4701e+00,  5.0425e-01,  3.7800e-01,  1.3457e+00,
                                                   3.2795e-01, -4.3923e+00],
                                                 [ 8.9260e-01,  1.6870e+00, -1.2969e+00, -6.2591e-01, -2.3344e+00,
                                                   1.1500e+00,  1.5156e+00]],

                                                [[-4.6668e-01,  3.4129e-01, -6.0363e+00, -2.7939e-01,  5.2685e+00,
                                                  -3.0976e-02,  2.0317e+00],
                                                 [ 1.6530e+00,  1.8183e+00, -1.8413e+00, -1.4894e+00, -1.1774e+00,
                                                   9.9144e-02, -1.7685e+00],
                                                 [-2.3818e+00, -2.1315e+00,  1.7137e+00,  1.7396e+00,  6.3724e-01,
                                                   1.7143e+00,  1.3846e+00],
                                                 [ 1.1720e-01, -7.7444e-02,  7.7492e-01, -2.5474e-02,  7.0469e-01,
                                                   8.5115e-02, -1.6324e+00],
                                                 [ 3.3004e-01, -5.4219e-01,  5.3930e-01, -7.3462e-02,  5.3244e-02,
                                                   4.4767e-01, -8.3234e-02],
                                                 [ 4.2607e-01, -2.6242e-01, -3.8263e-01,  5.1750e-01, -2.6028e-01,
                                                   -5.6490e-01, -8.8564e-02],
                                                 [-2.2910e-01,  1.7721e-01, -4.3838e+00,  1.5015e-01, -2.4796e+00,
                                                   3.8952e-01, -6.4302e+00],
                                                 [ 1.6832e+00,  7.9254e-01,  6.2792e-01,  9.6240e-01, -3.3314e-01,
                                                   2.2384e+00, -1.6828e+00],
                                                 [-1.3705e+00, -1.9795e+00, -1.8090e+00, -2.6188e-03, -1.8396e+00,
                                                  -1.4932e+00,  5.7349e-01]],

                                                [[-3.2691e-01,  2.1379e-01, -1.5799e+00, -1.7471e-01,  1.6755e+00,
                                                  -1.0869e-01,  9.3903e-01],
                                                 [-1.1205e+00,  1.5353e+00, -2.1130e+00, -1.2546e+00,  3.0446e+00,
                                                  -7.8053e-01,  1.5398e+00],
                                                 [-1.1423e+00,  9.4595e-01,  2.8308e+00, -7.7300e-01, -9.6972e-01,
                                                  -4.8092e-01, -9.6460e-01],
                                                 [ 7.2031e-03, -4.7108e-03,  9.7273e-02, -3.7000e-02,  2.3513e-01,
                                                   5.5275e-02, -4.7754e-01],
                                                 [ 2.4689e-02, -3.3828e-02,  2.6065e-01, -2.6570e-01,  2.3445e-01,
                                                   3.9693e-01, -7.8304e-01],
                                                 [ 2.5169e-02, -2.0843e-02,  1.5588e-01, -1.6371e-01, -6.2368e-01,
                                                   2.4457e-01,  4.9054e-01],
                                                 [-2.4809e-01,  1.6225e-01, -1.4616e+00,  3.9159e-02, -6.2707e-01,
                                                   1.8885e-01, -1.6315e+00],
                                                 [-8.5033e-01,  1.1651e+00, -2.5037e+00,  2.8120e-01, -1.5445e+00,
                                                   1.3562e+00, -2.6753e+00],
                                                 [-8.6687e-01,  7.1788e-01,  1.2307e+00,  1.7326e-01, -6.6148e-01,
                                                   8.3559e-01,  1.6760e+00]]],


                                               [[[-7.5636e-01,  1.0406e-01, -1.9952e+00,  2.8539e-01,  9.4179e-01,
                                                  -9.9724e-02, -7.5817e-02],
                                                 [ 8.1670e-01, -1.3030e-02, -8.4078e-02, -3.5733e-02, -7.1557e+00,
                                                   1.2486e-02,  2.2269e+00],
                                                 [-8.3041e-01,  6.2917e-01, -2.7679e+00,  1.7255e+00, -5.4948e-01,
                                                  -6.0293e-01,  4.7008e-01],
                                                 [ 6.1903e-02, -8.5168e-03, -1.1894e+00,  1.6275e-01,  7.9091e-01,
                                                   -9.1792e-02, -6.9787e-02],
                                                 [-6.6841e-02,  1.0664e-03,  1.4675e+00, -2.0378e-02, -4.3548e+00,
                                                   1.1493e-02,  2.0498e+00],
                                                 [ 6.7964e-02, -5.1493e-02, -1.2586e+00,  9.8401e-01, -3.4686e-02,
                                                   -5.5498e-01,  4.3269e-01],
                                                 [ 6.6716e-01, -9.1791e-02, -3.5952e-01,  3.9863e-02, -1.5469e+00,
                                                   2.1700e-01,  1.6498e-01],
                                                 [-7.2039e-01,  1.1493e-02,  2.3626e+00, -4.9912e-03,  8.1287e-01,
                                                  -2.7170e-02, -4.8459e+00],
                                                 [ 7.3248e-01, -5.5497e-01,  1.1458e-01,  2.4101e-01, -1.9196e+00,
                                                   1.3120e+00, -1.0229e+00]],

                                                [[-3.4182e-01,  1.1900e+00,  8.3611e-01,  2.8846e+00, -4.0510e+00,
                                                  -9.4772e-01,  1.0865e+00],
                                                 [ 1.4758e+00, -2.1237e-01, -1.8803e+00, -5.3496e-01,  4.6082e-01,
                                                   1.7939e-01, -1.4723e+00],
                                                 [-1.3516e-01,  2.7538e-02,  3.2542e+00, -2.2157e+00,  2.0260e+00,
                                                   1.1385e+00, -1.4840e+00],
                                                 [ 4.9819e-01, -1.6209e-01,  5.9073e-01,  1.7106e+00, -2.2054e+00,
                                                   -9.3160e-01,  9.5501e-01],
                                                 [-6.2852e-01,  2.5481e-02,  2.8130e+00, -3.1329e-01, -1.6321e+00,
                                                   1.7254e-01, -3.2043e-02],
                                                 [ 5.2732e-01, -3.9340e-01,  1.2458e+00, -8.6716e-01,  8.2612e-01,
                                                   6.8973e-01, -1.0866e+00],
                                                 [-3.6248e-01, -9.5832e-01,  3.1090e-01,  5.2366e-01, -7.5841e-01,
                                                   2.4432e+00, -2.0746e+00],
                                                 [-5.8480e-01,  1.7588e-01,  1.6626e+00, -8.9840e-02,  1.3114e-01,
                                                  -4.3805e-01, -5.3029e+00],
                                                 [-6.0978e-01,  5.2804e-01, -1.5534e+00,  4.2050e-01, -6.5459e-02,
                                                  -1.7431e-01,  1.4335e+00]],

                                                [[-1.2076e+00,  8.0916e-01, -5.4423e-01, -2.5007e+00,  1.0022e+00,
                                                   1.3288e+00, -6.6113e-01],
                                                 [ 3.9347e+00, -1.1202e+00, -3.1875e+00, -2.2505e+00,  2.2782e+00,
                                                   6.9273e-01,  2.0858e+00],
                                                 [-1.5106e+00, -6.5883e-01, -5.7170e-01, -4.2417e+00,  1.6134e+00,
                                                   8.3112e-02,  1.5821e+00],
                                                 [-2.6352e-01, -7.2695e-01,  1.0058e+00, -6.7965e-01, -1.0057e+00,
                                                   7.6389e-01,  1.1598e-01],
                                                 [-6.1879e-01,  2.1381e-01,  2.7902e+00, -1.4168e+00, -2.4942e-01,
                                                   7.3121e-01, -1.2749e+00],
                                                 [-4.2349e-01,  5.1499e-01, -1.1291e+00, -2.4219e+00,  3.4505e-01,
                                                   1.3811e+00,  8.4791e-02],
                                                 [-1.1477e+00,  5.9410e-01,  6.0532e-01,  9.7264e-01, -1.9956e+00,
                                                   1.0271e+00, -2.4847e+00],
                                                 [-1.0974e-01,  7.6874e-01, -1.9692e+00, -5.5339e-01,  4.3769e+00,
                                                  -2.2300e+00, -5.5773e+00],
                                                 [-8.8625e-01,  2.1964e+00, -4.7814e-01, -9.1585e-01, -4.0720e-01,
                                                  -2.7260e+00,  8.1963e-01]],

                                                [[ 8.2934e-01,  1.7359e+00, -3.2661e+00, -1.4161e+00,  1.5997e+00,
                                                   -1.5997e+00,  8.0905e-01],
                                                 [ 2.9475e+00, -1.3245e+00, -3.7583e+00,  1.0867e+00,  1.7901e+00,
                                                   -5.6489e-01,  5.0130e-01],
                                                 [ 9.7242e-01, -2.6574e+00,  1.4017e+00,  2.1780e+00, -2.9905e+00,
                                                   -5.1923e-01, -1.2607e+00],
                                                 [ 2.8734e-02,  3.1358e-01,  1.3967e-01, -4.6944e-01,  5.4504e-01,
                                                   4.6453e-01, -6.5818e-01],
                                                 [-1.1399e+00,  6.3664e-01,  1.2467e-01, -6.2589e-02,  9.0363e-01,
                                                  -3.1530e-01, -3.4302e-01],
                                                 [ 3.2385e-01,  9.7602e-01, -3.1122e-01,  1.9145e-02, -1.4708e-01,
                                                   -6.4605e-01,  5.7041e-01],
                                                 [ 6.8437e-01,  1.7290e+00, -1.5806e+00, -1.2304e-01, -1.1253e-01,
                                                   1.0904e+00, -2.5999e+00],
                                                 [ 9.7942e-01, -2.9461e-01,  9.7261e-01, -1.0040e+00,  3.6000e+00,
                                                   -1.9349e+00, -1.2973e+00],
                                                 [ 1.1419e+00, -9.4346e-01,  1.4937e+00, -1.6367e+00,  7.3671e-01,
                                                   -3.5025e+00,  1.8482e+00]],

                                                [[-1.4373e-01, -1.0757e+00, -6.4308e-01,  8.7907e-01,  6.9455e-01,
                                                   5.4691e-01,  3.8665e-01],
                                                 [ 3.2868e+00, -1.8573e+00, -2.9573e+00,  1.5177e+00, -1.4491e+00,
                                                   9.4426e-01,  1.3803e-01],
                                                 [-1.0557e+00, -2.8052e+00,  6.4474e-01,  2.2923e+00,  7.1482e-01,
                                                   1.4262e+00,  1.1080e-01],
                                                 [ 3.1670e-03,  2.3703e-02,  4.1632e-02,  1.8617e-01,  9.4458e-02,
                                                   -2.7813e-01, -1.9663e-01],
                                                 [-7.2421e-02,  4.0924e-02, -5.6283e-01,  3.2143e-01,  8.9676e-01,
                                                  -4.8020e-01, -7.0194e-02],
                                                 [ 2.3262e-02,  6.1810e-02,  1.8750e-01,  4.8547e-01, -2.3523e-01,
                                                   -7.2527e-01, -5.6349e-02],
                                                 [-1.0908e-01, -8.1639e-01, -6.0349e-01, -1.9703e-01, -2.6626e-01,
                                                  -9.5024e-01, -6.7180e-01],
                                                 [ 2.4943e+00, -1.4095e+00,  3.9596e-01, -3.4019e-01,  2.8536e+00,
                                                   -1.6406e+00, -2.3982e-01],
                                                 [-8.0118e-01, -2.1289e+00, -3.5876e-01, -5.1380e-01, -9.7246e-01,
                                                  -2.4779e+00, -1.9252e-01]]]]).unsqueeze(0)

            let t3s2p1 = dsharp.convTranspose3d(t1, t2, stride=2, padding=1)
            let t3s2p1Correct = combo.tensor([[[[ 5.1107e-01,  3.3656e+00,  1.4016e+00,  2.8882e-01, -4.8976e-01],
                                                 [-1.2520e+00, -2.9655e+00, -3.2308e+00, -4.6937e+00,  1.0909e+00],
                                                 [-4.1827e-02,  1.6104e+00,  7.9930e-01, -1.8915e-01, -4.5081e-01],
                                                 [ 1.7161e-03,  9.5375e-01, -1.9002e+00, -1.4199e+00,  1.3326e+00],
                                                 [-4.5080e-01, -1.3973e-02,  1.9577e-01,  2.3804e+00,  1.0657e+00]],

                                                [[-4.3149e-01, -4.6548e+00,  2.9759e+00, -1.9294e+00, -1.7011e+00],
                                                 [ 1.3335e+00, -1.6401e+00,  4.0610e-01,  1.7460e+00,  7.5368e-01],
                                                 [ 7.4535e-01,  2.1371e-01,  9.7747e-01, -1.8335e+00, -9.1553e-01],
                                                 [-1.0580e+00, -1.1396e+00,  1.5921e+00,  1.4837e+00,  1.2120e+00],
                                                 [-6.2202e-01,  1.7381e+00, -9.0946e-01, -1.8453e+00, -4.7914e-01]],

                                                [[ 5.2215e-01, -4.0141e-01, -4.2916e-01,  5.2209e-01,  4.4587e-01],
                                                 [-1.3496e+00,  2.0044e+00,  1.0607e+00, -7.2726e-01, -1.0577e+00],
                                                 [-3.6046e-01, -1.7473e-01,  7.7268e-02,  3.1800e-01,  1.1941e-01],
                                                 [ 8.7386e-01,  1.6961e-01, -6.9657e-02, -3.3020e+00, -9.0590e-02],
                                                 [-1.1925e-02,  1.0887e+00,  5.3302e-01,  2.3523e+00,  9.0061e-01]],

                                                [[-1.6330e+00, -4.5649e+00,  1.3309e+00,  2.1396e+00,  1.8538e+00],
                                                 [ 3.0736e+00,  2.4374e+00, -2.8052e+00, -3.0569e+00, -6.2395e-01],
                                                 [-4.6614e-01,  7.7661e-01,  5.2383e-01,  4.1591e-01, -4.4464e-01],
                                                 [ 6.0249e-01,  7.9457e-01, -5.6395e-02, -1.9356e+00,  2.1329e+00],
                                                 [-1.8267e+00, -2.1844e+00,  3.3026e-01, -1.7905e+00, -8.1025e-01]],

                                                [[ 1.0669e+00, -8.0981e-01, -8.7187e-01, -1.9274e+00, -5.4243e-01],
                                                 [-2.5996e+00,  5.0024e-01,  2.0791e+00,  2.7528e+00,  1.3802e+00],
                                                 [-2.3509e-02, -4.0277e-01, -1.8465e-01,  3.9798e-01,  2.7585e-01],
                                                 [ 2.3677e-01, -3.9000e+00,  4.9234e-01, -1.5508e+00, -4.6172e-01],
                                                 [ 8.0970e-01,  1.1538e+00,  1.9542e-01,  2.1257e+00,  9.4246e-01]]],


                                               [[[-1.9905e-01,  1.1797e+00, -5.4590e-01, -2.2031e+00,  1.9075e-01],
                                                 [-7.0397e-01,  3.8190e+00,  7.4930e-03,  2.9795e-01, -3.6628e-01],
                                                 [ 1.6291e-02,  1.0505e+00, -3.1132e-01, -1.4716e+00,  1.7558e-01],
                                                 [-9.0554e-01,  2.1269e+00, -5.4716e-01,  1.5862e+00,  2.8025e+00],
                                                 [ 1.7558e-01,  7.5659e-01, -7.6251e-02,  1.1156e+00, -4.1509e-01]],

                                                [[-9.0297e-01,  1.1275e+00, -2.4289e+00,  7.9854e-01,  8.4120e-01],
                                                 [-7.3211e-01, -1.5431e+00, -5.0035e+00, -7.8804e-01,  2.3154e+00],
                                                 [ 8.2002e-02,  4.2354e+00, -1.3934e+00, -1.7526e+00,  7.8171e-01],
                                                 [ 1.1831e-01, -1.0576e+00, -2.0953e+00, -1.5189e+00,  4.4112e-01],
                                                 [ 7.8505e-01,  1.6238e+00, -3.5439e-01,  2.2488e+00, -1.8782e+00]],

                                                [[-2.0337e-01, -1.1304e+00,  1.6715e-01,  1.0459e+00, -1.7366e-01],
                                                 [-1.3930e+00,  1.3409e+00,  6.8051e-01, -3.6292e-01, -2.8358e-01],
                                                 [ 1.4039e-01,  5.0549e-01, -3.0095e-02,  6.2284e-02, -4.6508e-02],
                                                 [ 4.0867e-01, -1.9516e-01,  1.0372e+00, -1.4634e-02,  1.7659e+00],
                                                 [ 4.6446e-03,  6.8244e-01, -2.0760e-01,  5.2616e-01, -3.5078e-01]],

                                                [[-9.3616e-01, -7.6996e+00,  7.6930e-01,  4.5803e+00, -7.6233e-01],
                                                 [ 2.9930e-01,  1.2267e+00, -6.0504e-02,  8.5671e-01, -1.9043e+00],
                                                 [ 6.2808e-01,  1.4158e-01, -1.2980e-01,  1.6286e+00, -2.1490e-01],
                                                 [ 1.0957e+00,  9.2596e-02, -9.2809e-01, -2.2707e+00, -6.9050e-01],
                                                 [ 1.1544e-04, -1.7244e+00, -9.3285e-01,  3.2562e+00, -1.5918e+00]],

                                                [[-4.1556e-01, -2.3034e+00,  3.3958e-01,  3.0738e-01,  2.1127e-01],
                                                 [-1.3344e+00,  9.7688e-01,  6.5812e-01, -2.0208e+00,  1.2380e+00],
                                                 [ 9.1565e-03, -2.0508e-01,  7.1917e-02,  5.5545e-01, -1.0744e-01],
                                                 [ 1.7452e+00, -1.8257e+00,  6.3668e-01,  3.7559e-01,  1.6663e+00],
                                                 [-3.1537e-01, -6.7241e-01, -7.6114e-02,  9.6129e-01, -3.6708e-01]]]]).unsqueeze(0)

            let t3p1d2 = dsharp.convTranspose3d(t1, t2, padding=1, dilation=2)
            let t3p1d2Correct = combo.tensor([[[[-1.0245e-01, -5.9647e-01,  9.3921e-02, -7.5587e-01,  1.9314e-01],
                                                 [-1.2189e+00, -1.8433e+00,  1.6070e+00, -1.1514e+00,  2.3350e+00],
                                                 [ 9.2224e-02,  9.4806e-01, -1.7268e-01,  5.7531e-01, -1.8053e-01],
                                                 [ 4.2969e-01,  2.6431e+00, -2.2818e+00, -5.1769e-01, -1.5198e+00],
                                                 [ 3.7179e-02, -8.5859e-01,  1.9636e-01,  7.2871e-02,  4.9428e-02]],

                                                [[ 1.5057e-02, -2.7401e-01, -4.7146e-02,  3.9273e-01, -4.5927e+00],
                                                 [ 1.5358e+00, -4.2029e+00,  3.6310e+00,  4.4393e+00,  2.8129e+00],
                                                 [ 1.4288e+00, -5.9017e-01,  1.2119e+00, -1.0511e+00,  1.1724e+00],
                                                 [-2.1768e+00,  3.1079e+00, -5.8648e+00, -3.4127e+00, -2.3617e+00],
                                                 [-1.4544e+00,  9.4486e-01, -2.4129e+00,  1.8278e+00, -9.9002e-01]],

                                                [[-2.2211e-02, -1.1428e-01,  1.7139e-02,  1.8895e+00, -3.9936e-01],
                                                 [-1.0387e+00,  1.1806e+00, -3.1093e-01,  1.1913e+00, -3.1527e+00],
                                                 [ 1.5942e-01, -1.1409e-01,  7.7268e-02, -2.1475e-01,  7.1630e-02],
                                                 [ 1.8329e+00, -1.8513e-01,  1.5766e+00, -7.6421e-01,  9.6227e-01],
                                                 [-1.3200e-01,  6.7251e-01, -1.8789e-01,  1.0284e-01, -8.4286e-02]],

                                                [[-1.9183e-01,  4.5235e-02,  1.1921e-01,  1.6477e-01, -4.2937e-01],
                                                 [-3.3870e+00,  6.8932e-01,  1.2275e+00, -4.6907e+00, -6.1358e+00],
                                                 [-1.2204e+00,  9.5888e-01,  9.6550e-01, -2.7589e-01, -2.4401e+00],
                                                 [ 1.8659e-01,  2.9610e-01,  3.8398e+00,  5.1360e+00,  3.0689e+00],
                                                 [-5.4028e-01,  3.1447e-02,  1.1577e+00, -1.1192e+00,  1.6228e+00]],

                                                [[-2.3675e-02, -1.0882e-01,  1.5483e-02,  6.4794e-01, -1.3376e-01],
                                                 [ 2.8738e-01,  4.7778e-03, -5.1073e-01, -6.3953e-01,  2.9550e-01],
                                                 [-8.1145e-02, -6.4408e-01,  1.1118e-01,  1.1950e+00, -2.1934e-01],
                                                 [-1.0031e-01, -9.7736e-01,  3.8649e-01,  2.6536e+00, -2.2762e+00],
                                                 [-8.2723e-02, -4.4742e-01,  6.8506e-02, -5.3513e-01,  1.3741e-01]]],


                                               [[[-1.1435e-01, -2.5012e-01,  1.5733e-02, -3.1487e-02,  1.1962e-02],
                                                 [-1.4747e+00, -6.3610e-01,  1.1947e-01, -2.2041e+00,  2.0339e+00],
                                                 [ 1.2348e-01,  2.0001e-01, -1.9699e-03,  1.6360e+00, -3.5134e-01],
                                                 [ 1.5491e+00,  1.3579e+00, -5.4192e-01,  7.8988e-02, -2.0117e+00],
                                                 [-1.2555e-01, -6.3778e-01,  9.5123e-02,  4.9298e-01, -7.4163e-02]],

                                                [[ 9.4726e-01, -8.8186e-01,  1.6573e+00, -8.1649e-01, -1.6891e+00],
                                                 [ 2.4154e-01, -2.9949e+00, -6.8751e-02, -1.7125e+00,  1.9995e+00],
                                                 [ 7.0803e-01, -1.0804e-01, -3.0661e-01,  3.2285e-01, -6.6276e-02],
                                                 [ 3.9308e+00,  3.8945e+00, -2.8420e+00, -3.6102e+00,  2.7485e+00],
                                                 [ 1.4156e+00, -1.0560e+00, -1.1896e+00,  8.1470e-01,  1.9007e+00]],

                                                [[ 6.5155e-02, -6.6365e-01,  1.6384e-01,  1.0020e+00, -1.6052e-01],
                                                 [-8.9127e-02,  1.0903e+00,  1.2974e+00,  1.1690e+00, -6.2094e-01],
                                                 [ 9.6969e-02,  2.9025e-01, -3.0095e-02,  3.6201e-01, -8.7570e-02],
                                                 [ 6.9967e-02,  1.1285e+00,  3.0907e-01,  2.5184e-01, -1.5294e+00],
                                                 [ 1.0784e-01,  6.0061e-01, -9.3024e-02, -9.2099e-01,  1.6661e-01]],

                                                [[-2.6337e-01,  2.8566e-01, -1.1974e+00,  1.1181e+00, -1.8616e-01],
                                                 [ 3.3619e+00, -6.7208e-01, -1.8833e+00, -7.1228e-01,  8.5941e-02],
                                                 [ 2.2306e+00, -9.6057e-01, -1.3195e+00,  7.1460e-01,  5.8736e-03],
                                                 [-1.7553e+00,  2.0345e+00, -3.0523e+00,  1.1117e+00, -2.4375e+00],
                                                 [-1.0486e+00,  9.6933e-01, -1.8792e+00,  8.1101e-01, -5.6141e-01]],

                                                [[-1.0409e-02,  3.4735e-01, -7.7906e-02,  1.3655e-01, -5.5077e-02],
                                                 [-1.3938e+00,  3.5525e-01,  2.0966e-01, -1.8086e+00, -2.7074e-01],
                                                 [ 2.3803e-01,  9.9532e-01, -1.3451e-01, -1.1614e-01, -1.9662e-02],
                                                 [ 2.0666e+00,  9.8112e-01,  2.0048e-01, -2.8437e+00, -4.7968e-02],
                                                 [-7.6454e-02,  8.2957e-01, -2.0315e-01, -2.4032e-01, -1.5784e-02]]]]).unsqueeze(0)

            Assert.True(t3.allclose(t3Correct, 0.01, 0.01))
            Assert.True(t3p1.allclose(t3p1Correct, 0.01, 0.01))
            Assert.True(t3p122.allclose(t3p122Correct, 0.01, 0.01))
            Assert.True(t3s2.allclose(t3s2Correct, 0.01, 0.01))
            Assert.True(t3s132.allclose(t3s132Correct, 0.01, 0.01))
            Assert.True(t3s2p1.allclose(t3s2p1Correct, 0.01, 0.01))
            Assert.True(t3p1d2.allclose(t3p1d2Correct, 0.01, 0.01))


